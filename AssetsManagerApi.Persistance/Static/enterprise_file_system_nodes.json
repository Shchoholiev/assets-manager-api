[
    {
        "Id": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
        "Name": "ChatSupportIntegration",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "f942c4d3-caf5-4580-a5b4-3a8265b64e93",
                "Name": "Program.cs",
                "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ChatSupportIntegration\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
                "Language": 0
            },
            {
                "Id": "ab5e7b53-3eec-4e20-9e7d-8c42c440c469",
                "Name": "Startup.cs",
                "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ChatSupportIntegration.Services;\nusing ChatSupportIntegration.Infrastructure;\n\nnamespace ChatSupportIntegration\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddLogging();\n            services.AddSingleton<IChatService, ChatService>();\n            services.AddSingleton<IIntegrationService, IntegrationService>();\n            services.AddSingleton<IChatLogger, ChatLogger>();\n            services.AddSingleton<IIntegrationAdapter, IntegrationAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "700541b0-4055-4978-a5fd-c8f991e0d04e",
                "Name": "Controllers",
                "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
                "Type": 0,
                "Items": [
                    {
                        "Id": "978b6712-b21c-4b7b-be2a-6cda3ccfb491",
                        "Name": "ChatSupportController.cs",
                        "ParentId": "700541b0-4055-4978-a5fd-c8f991e0d04e",
                        "Type": 1,
                        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Services;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ChatSupportController : ControllerBase\n    {\n        private readonly IChatService _chatService;\n\n        public ChatSupportController(IChatService chatService)\n        {\n            _chatService = chatService;\n        }\n\n        [HttpGet(\"{sessionId}\")]\n        public async Task<ActionResult<ChatSession>> GetChatSession(string sessionId)\n        {\n            var session = await _chatService.GetChatSessionAsync(sessionId);\n            if (session == null) \n                return NotFound();\n            \n            return Ok(session);\n        }\n\n        [HttpPost]\n        public async Task<ActionResult<ChatMessage>> PostChatMessage([FromBody] ChatMessage message)\n        {\n            var processedMessage = await _chatService.ProcessChatMessageAsync(message);\n            return Ok(processedMessage);\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "594b8602-470f-4492-aded-f06e7291d378",
                "Name": "Services",
                "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
                "Type": 0,
                "Items": [
                    {
                        "Id": "7acdcfc2-f1e2-4264-87e1-d933f4aa23d9",
                        "Name": "ChatService.cs",
                        "ParentId": "594b8602-470f-4492-aded-f06e7291d378",
                        "Type": 1,
                        "Text": "using System;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\nusing ChatSupportIntegration.Infrastructure;\n\nnamespace ChatSupportIntegration.Services\n{\n    public interface IChatService\n    {\n        Task<ChatSession> GetChatSessionAsync(string sessionId);\n        Task<ChatMessage> ProcessChatMessageAsync(ChatMessage message);\n    }\n\n    public class ChatService : IChatService\n    {\n        private readonly IIntegrationService _integrationService;\n        private readonly IChatLogger _chatLogger;\n\n        public ChatService(IIntegrationService integrationService, IChatLogger chatLogger)\n        {\n            _integrationService = integrationService;\n            _chatLogger = chatLogger;\n        }\n\n        // In a production environment, persistent storage like a database would be used.\n        private static readonly System.Collections.Concurrent.ConcurrentDictionary<string, ChatSession> Sessions =\n            new System.Collections.Concurrent.ConcurrentDictionary<string, ChatSession>();\n\n        public async Task<ChatSession> GetChatSessionAsync(string sessionId)\n        {\n            Sessions.TryGetValue(sessionId, out ChatSession session);\n            return await Task.FromResult(session);\n        }\n\n        public async Task<ChatMessage> ProcessChatMessageAsync(ChatMessage message)\n        {\n            if (string.IsNullOrEmpty(message.SessionId))\n            {\n                // Create a new session if none exists.\n                message.SessionId = Guid.NewGuid().ToString();\n                var newSession = new ChatSession { SessionId = message.SessionId };\n                Sessions.TryAdd(newSession.SessionId, newSession);\n            }\n\n            Sessions.AddOrUpdate(message.SessionId,\n                new ChatSession { SessionId = message.SessionId, Messages = new System.Collections.Generic.List<ChatMessage> { message } },\n                (key, existingSession) =>\n                {\n                    existingSession.Messages.Add(message);\n                    return existingSession;\n                });\n\n            _chatLogger.LogInfo($\"Processing message for session {message.SessionId}\");\n            \n            // Integrate with the external live chat provider\n            var response = await _integrationService.SendMessageToLiveChatAsync(message);\n            \n            if (response != null)\n            {\n                Sessions.AddOrUpdate(message.SessionId,\n                    new ChatSession { SessionId = message.SessionId, Messages = new System.Collections.Generic.List<ChatMessage> { response } },\n                    (key, existingSession) =>\n                    {\n                        existingSession.Messages.Add(response);\n                        return existingSession;\n                    });\n            }\n\n            return response ?? message;\n        }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "1883a679-a037-4eb1-88da-48b07fc29e38",
                        "Name": "IntegrationService.cs",
                        "ParentId": "594b8602-470f-4492-aded-f06e7291d378",
                        "Type": 1,
                        "Text": "using System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\nusing ChatSupportIntegration.Infrastructure;\n\nnamespace ChatSupportIntegration.Services\n{\n    public interface IIntegrationService\n    {\n        Task<ChatMessage> SendMessageToLiveChatAsync(ChatMessage message);\n    }\n\n    public class IntegrationService : IIntegrationService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IIntegrationAdapter _integrationAdapter;\n\n        public IntegrationService(IIntegrationAdapter integrationAdapter, IHttpClientFactory httpClientFactory)\n        {\n            _integrationAdapter = integrationAdapter;\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<ChatMessage> SendMessageToLiveChatAsync(ChatMessage message)\n        {\n            // Delegate the external communication to the adapter\n            return await _integrationAdapter.SendChatMessageAsync(message);\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "13196d76-6338-47de-98f7-aa5602e78a80",
                "Name": "Models",
                "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
                "Type": 0,
                "Items": [
                    {
                        "Id": "ea93137b-cbce-405e-81a3-000c4519a25f",
                        "Name": "ChatMessage.cs",
                        "ParentId": "13196d76-6338-47de-98f7-aa5602e78a80",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace ChatSupportIntegration.Models\n{\n    public class ChatMessage\n    {\n        public string MessageId { get; set; } = Guid.NewGuid().ToString();\n        public string SessionId { get; set; }\n        public string UserId { get; set; }\n        public string Content { get; set; }\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "9c608609-3d8e-472e-88c8-35cc581f5c5f",
                        "Name": "ChatSession.cs",
                        "ParentId": "13196d76-6338-47de-98f7-aa5602e78a80",
                        "Type": 1,
                        "Text": "using System.Collections.Generic;\n\nnamespace ChatSupportIntegration.Models\n{\n    public class ChatSession\n    {\n        public string SessionId { get; set; }\n        public List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "4b51107c-d283-4adf-8510-d1f5abe13036",
                "Name": "Infrastructure",
                "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
                "Type": 0,
                "Items": [
                    {
                        "Id": "67842e61-e624-4c1b-81ea-6d988bb7ae5c",
                        "Name": "ChatLogger.cs",
                        "ParentId": "4b51107c-d283-4adf-8510-d1f5abe13036",
                        "Type": 1,
                        "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace ChatSupportIntegration.Infrastructure\n{\n    public interface IChatLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n\n    public class ChatLogger : IChatLogger\n    {\n        private readonly ILogger<ChatLogger> _logger;\n\n        public ChatLogger(ILogger<ChatLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "90be2b99-cfd8-402e-80da-c1771d6761e2",
                        "Name": "IntegrationAdapter.cs",
                        "ParentId": "4b51107c-d283-4adf-8510-d1f5abe13036",
                        "Type": 1,
                        "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Infrastructure\n{\n    public interface IIntegrationAdapter\n    {\n        Task<ChatMessage> SendChatMessageAsync(ChatMessage message);\n    }\n\n    public class IntegrationAdapter : IIntegrationAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public IntegrationAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<ChatMessage> SendChatMessageAsync(ChatMessage message)\n        {\n            // Replace with actual live chat provider endpoint in production\n            string externalEndpoint = \"https://api.livechatprovider.com/send\";\n            \n            var jsonContent = JsonSerializer.Serialize(message);\n            var content = new StringContent(jsonContent, Encoding.UTF8, \"application/json\");\n            \n            var response = await _httpClient.PostAsync(externalEndpoint, content);\n            response.EnsureSuccessStatusCode();\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n            var chatResponse = JsonSerializer.Deserialize<ChatMessage>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            return chatResponse;\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "12db2329-424f-45d8-8c27-1d91eb600314",
        "Name": "VirtualAssistantService",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "3e33e737-7980-46fa-af7a-12860640f16f",
                "Name": "Program.cs",
                "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace VirtualAssistantService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "864b476d-726c-41df-80fa-dbfee1d65f37",
                "Name": "Startup.cs",
                "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing VirtualAssistantService.Infrastructure;\nusing VirtualAssistantService.Services;\n\nnamespace VirtualAssistantService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IVirtualAssistantService, VirtualAssistantService.Services.VirtualAssistantService>();\n            services.AddSingleton<IAiEngineAdapter, AiEngineAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "51558d0b-9952-4be6-a2d7-1b2a23984d4f",
                "Name": "Controllers",
                "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
                "Type": 0,
                "Items": [
                    {
                        "Id": "d9983a82-7d71-4f2d-844e-d33c5d292ef3",
                        "Name": "VirtualAssistantController.cs",
                        "ParentId": "51558d0b-9952-4be6-a2d7-1b2a23984d4f",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing VirtualAssistantService.Models;\nusing VirtualAssistantService.Services;\n\nnamespace VirtualAssistantService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class VirtualAssistantController : ControllerBase\n    {\n        private readonly IVirtualAssistantService _assistantService;\n\n        public VirtualAssistantController(IVirtualAssistantService assistantService)\n        {\n            _assistantService = assistantService;\n        }\n\n        [HttpPost(\"inquiry\")]\n        public async Task<ActionResult<AssistantResponse>> PostInquiry([FromBody] Inquiry inquiry)\n        {\n            var response = await _assistantService.HandleInquiryAsync(inquiry);\n            if (response == null)\n            {\n                return BadRequest(\"Unable to process inquiry\");\n            }\n            return Ok(response);\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "e49794d8-990e-4d77-8f2c-8960bcd6e9cd",
                "Name": "Services",
                "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
                "Type": 0,
                "Items": [
                    {
                        "Id": "c63f805e-19de-4e00-b50b-7a810d00acdb",
                        "Name": "IVirtualAssistantService.cs",
                        "ParentId": "e49794d8-990e-4d77-8f2c-8960bcd6e9cd",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing VirtualAssistantService.Models;\n\nnamespace VirtualAssistantService.Services\n{\n    public interface IVirtualAssistantService\n    {\n        Task<AssistantResponse> HandleInquiryAsync(Inquiry inquiry);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "51e09d94-2b83-4abd-aa3d-dfa38371e122",
                        "Name": "VirtualAssistantService.cs",
                        "ParentId": "e49794d8-990e-4d77-8f2c-8960bcd6e9cd",
                        "Type": 1,
                        "Text": "using System;\nusing System.Threading.Tasks;\nusing VirtualAssistantService.Infrastructure;\nusing VirtualAssistantService.Models;\n\nnamespace VirtualAssistantService.Services\n{\n    public class VirtualAssistantService : IVirtualAssistantService\n    {\n        private readonly IAiEngineAdapter _aiEngineAdapter;\n\n        public VirtualAssistantService(IAiEngineAdapter aiEngineAdapter)\n        {\n            _aiEngineAdapter = aiEngineAdapter;\n        }\n\n        public async Task<AssistantResponse> HandleInquiryAsync(Inquiry inquiry)\n        {\n            if (string.IsNullOrWhiteSpace(inquiry.Question))\n            {\n                throw new ArgumentException(\"Inquiry question cannot be empty.\");\n            }\n            string aiResponse = await _aiEngineAdapter.GetAssistantResponseAsync(inquiry.Question, inquiry.CustomerId);\n            return new AssistantResponse\n            {\n                InquiryId = inquiry.InquiryId,\n                ResponseMessage = aiResponse,\n                ProcessedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "a5929ffb-05ee-4ccc-a28e-db74e72163b7",
                "Name": "Models",
                "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
                "Type": 0,
                "Items": [
                    {
                        "Id": "39b5e29b-b956-4f76-99a5-c38c2c60316c",
                        "Name": "Inquiry.cs",
                        "ParentId": "a5929ffb-05ee-4ccc-a28e-db74e72163b7",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace VirtualAssistantService.Models\n{\n    public class Inquiry\n    {\n        public string InquiryId { get; set; } = Guid.NewGuid().ToString();\n        public string CustomerId { get; set; }\n        public string Question { get; set; }\n        public DateTime SubmittedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "e569a111-8f08-4868-b31a-8562a82d5c1d",
                        "Name": "AssistantResponse.cs",
                        "ParentId": "a5929ffb-05ee-4ccc-a28e-db74e72163b7",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace VirtualAssistantService.Models\n{\n    public class AssistantResponse\n    {\n        public string InquiryId { get; set; }\n        public string ResponseMessage { get; set; }\n        public DateTime ProcessedAt { get; set; }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "563c1d41-912d-479c-a3eb-399f8048ab3f",
                "Name": "Infrastructure",
                "ParentId": "12db2329-424f-45d8-8c27-1d91eb600314",
                "Type": 0,
                "Items": [
                    {
                        "Id": "44911568-60b9-47ea-9e6f-103aa4f8aead",
                        "Name": "IAiEngineAdapter.cs",
                        "ParentId": "563c1d41-912d-479c-a3eb-399f8048ab3f",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\n\nnamespace VirtualAssistantService.Infrastructure\n{\n    public interface IAiEngineAdapter\n    {\n        Task<string> GetAssistantResponseAsync(string question, string customerId);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "34e813c0-aa81-404c-a292-df4eb4239053",
                        "Name": "AiEngineAdapter.cs",
                        "ParentId": "563c1d41-912d-479c-a3eb-399f8048ab3f",
                        "Type": 1,
                        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace VirtualAssistantService.Infrastructure\n{\n    public class AiEngineAdapter : IAiEngineAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public AiEngineAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<string> GetAssistantResponseAsync(string question, string customerId)\n        {\n            var requestPayload = new\n            {\n                question = question,\n                customerId = customerId,\n                timestamp = DateTime.UtcNow\n            };\n\n            var json = JsonSerializer.Serialize(requestPayload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            \n            // Replace the URL with the actual endpoint of the AI engine service\n            var response = await _httpClient.PostAsync(\"https://api.aiengineprovider.com/process\", content);\n            response.EnsureSuccessStatusCode();\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n            using (var document = JsonDocument.Parse(responseContent))\n            {\n                if (document.RootElement.TryGetProperty(\"answer\", out var answerElement))\n                {\n                    return answerElement.GetString();\n                }\n            }\n            throw new Exception(\"Invalid response from AI Engine service.\");\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "550f4486-1d5f-4d61-bf9e-0e1217117631",
        "Name": "MortgageCalculationService",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "7f287530-3ff1-4c2d-9850-adc66c8e8bee",
                "Name": "Program.cs",
                "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MortgageCalculationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "5e6b7080-2d45-484e-a477-ca9f6f813ddb",
                "Name": "Startup.cs",
                "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MortgageCalculationService.Services;\n\nnamespace MortgageCalculationService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddScoped<IMortgageService, MortgageService>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "57dc6335-e00a-4ae1-9999-2fb149e1f8b3",
                "Name": "Controllers",
                "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
                "Type": 0,
                "Items": [
                    {
                        "Id": "02eaef2b-ca6a-44c8-a4da-4b131ca9087c",
                        "Name": "MortgageController.cs",
                        "ParentId": "57dc6335-e00a-4ae1-9999-2fb149e1f8b3",
                        "Type": 1,
                        "Text": "using Microsoft.AspNetCore.Mvc;\nusing MortgageCalculationService.Models;\nusing MortgageCalculationService.Services;\n\nnamespace MortgageCalculationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MortgageController : ControllerBase\n    {\n        private readonly IMortgageService _mortgageService;\n\n        public MortgageController(IMortgageService mortgageService)\n        {\n            _mortgageService = mortgageService;\n        }\n\n        [HttpPost(\"calculate\")]\n        public ActionResult<MortgageResponse> CalculateMortgage([FromBody] MortgageRequest request)\n        {\n            if (request == null || request.Principal <= 0 || request.AnnualInterestRate <= 0 || request.TermYears <= 0)\n            {\n                return BadRequest(\"Invalid mortgage parameters provided.\");\n            }\n\n            var response = _mortgageService.CalculateMortgage(request);\n            return Ok(response);\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "76de9479-3ffa-4731-ac6e-c45ae39e5831",
                "Name": "Services",
                "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
                "Type": 0,
                "Items": [
                    {
                        "Id": "e592c0fa-4207-4d89-bc49-77eed20b902a",
                        "Name": "IMortgageService.cs",
                        "ParentId": "76de9479-3ffa-4731-ac6e-c45ae39e5831",
                        "Type": 1,
                        "Text": "using MortgageCalculationService.Models;\n\nnamespace MortgageCalculationService.Services\n{\n    public interface IMortgageService\n    {\n        MortgageResponse CalculateMortgage(MortgageRequest request);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "853610c4-b225-4d06-85b6-e25bbad8e545",
                        "Name": "MortgageService.cs",
                        "ParentId": "76de9479-3ffa-4731-ac6e-c45ae39e5831",
                        "Type": 1,
                        "Text": "using System;\nusing MortgageCalculationService.Models;\n\nnamespace MortgageCalculationService.Services\n{\n    public class MortgageService : IMortgageService\n    {\n        public MortgageResponse CalculateMortgage(MortgageRequest request)\n        {\n            // Calculate monthly payment using the formula:\n            // Monthly Payment = [P * r(1 + r)^n] / [(1 + r)^n - 1]\n            // where P = principal, r = monthly interest rate, n = total number of payments\n\n            decimal principal = request.Principal;\n            decimal monthlyInterestRate = request.AnnualInterestRate / 100 / 12;\n            int numberOfPayments = request.TermYears * 12;\n\n            decimal monthlyPayment;\n            if (monthlyInterestRate == 0)\n            {\n                monthlyPayment = principal / numberOfPayments;\n            }\n            else\n            {\n                // Use Math.Pow for exponential calculation with double conversion\n                double r = Convert.ToDouble(monthlyInterestRate);\n                double P = Convert.ToDouble(principal);\n                int n = numberOfPayments;\n                double numerator = P * r * Math.Pow(1 + r, n);\n                double denominator = Math.Pow(1 + r, n) - 1;\n                monthlyPayment = Convert.ToDecimal(numerator / denominator);\n            }\n\n            decimal totalPayment = monthlyPayment * numberOfPayments;\n            decimal totalInterest = totalPayment - principal;\n\n            return new MortgageResponse\n            {\n                MonthlyPayment = Math.Round(monthlyPayment, 2),\n                TotalPayment = Math.Round(totalPayment, 2),\n                TotalInterest = Math.Round(totalInterest, 2)\n            };\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "1bc8c9c2-2aa2-407e-b823-bd9321d69025",
                "Name": "Models",
                "ParentId": "550f4486-1d5f-4d61-bf9e-0e1217117631",
                "Type": 0,
                "Items": [
                    {
                        "Id": "8393fe1b-405c-4c04-9c61-173d1a6617f9",
                        "Name": "MortgageRequest.cs",
                        "ParentId": "1bc8c9c2-2aa2-407e-b823-bd9321d69025",
                        "Type": 1,
                        "Text": "namespace MortgageCalculationService.Models\n{\n    public class MortgageRequest\n    {\n        public decimal Principal { get; set; }\n        public decimal AnnualInterestRate { get; set; }\n        public int TermYears { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "9f0b79e2-b9da-4fb3-a91e-5281d000633c",
                        "Name": "MortgageResponse.cs",
                        "ParentId": "1bc8c9c2-2aa2-407e-b823-bd9321d69025",
                        "Type": 1,
                        "Text": "namespace MortgageCalculationService.Models\n{\n    public class MortgageResponse\n    {\n        public decimal MonthlyPayment { get; set; }\n        public decimal TotalPayment { get; set; }\n        public decimal TotalInterest { get; set; }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "31116afa-4a91-4d86-8dce-15601955d226",
        "Name": "ElectronicStatementGenerator",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "46f48c66-fae7-41d5-ad81-b88cb8a395d9",
                "Name": "Program.cs",
                "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ElectronicStatementGenerator\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "ff73b3a3-1639-4846-bc42-8aad92fd8fc4",
                "Name": "Startup.cs",
                "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
                "Type": 1,
                "Text": "using ElectronicStatementGenerator.Controllers;\nusing ElectronicStatementGenerator.Data;\nusing ElectronicStatementGenerator.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ElectronicStatementGenerator\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IStatementService, StatementService>();\n            services.AddSingleton<IAccountRepository, AccountRepository>();\n\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/error\");\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "475432b8-f24b-4fe5-940e-10e4e3ade8b1",
                "Name": "Controllers",
                "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
                "Type": 0,
                "Items": [
                    {
                        "Id": "1053bd8c-c801-4b4f-93e9-3403c7b842cd",
                        "Name": "StatementController.cs",
                        "ParentId": "475432b8-f24b-4fe5-940e-10e4e3ade8b1",
                        "Type": 1,
                        "Text": "using ElectronicStatementGenerator.Models;\nusing ElectronicStatementGenerator.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace ElectronicStatementGenerator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class StatementController : ControllerBase\n    {\n        private readonly IStatementService _statementService;\n\n        public StatementController(IStatementService statementService)\n        {\n            _statementService = statementService;\n        }\n\n        [HttpPost(\"generate\")]\n        public IActionResult GenerateStatement([FromBody] StatementRequest request)\n        {\n            if (request == null || string.IsNullOrWhiteSpace(request.AccountId))\n            {\n                return BadRequest(\"Invalid statement request.\");\n            }\n\n            try\n            {\n                StatementResponse response = _statementService.GenerateStatement(request);\n                if (response == null)\n                {\n                    return NotFound(\"No transactions found for the provided account and period.\");\n                }\n                return Ok(response);\n            }\n            catch (System.Exception ex)\n            {\n                return StatusCode(500, $\"An error occurred while generating the statement: {ex.Message}\");\n            }\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "9b8ed5a5-4777-412e-b5e2-f92bfdeebb1d",
                "Name": "Services",
                "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
                "Type": 0,
                "Items": [
                    {
                        "Id": "1dd91027-3025-47e9-a059-b07e9737fb43",
                        "Name": "IStatementService.cs",
                        "ParentId": "9b8ed5a5-4777-412e-b5e2-f92bfdeebb1d",
                        "Type": 1,
                        "Text": "using ElectronicStatementGenerator.Models;\n\nnamespace ElectronicStatementGenerator.Services\n{\n    public interface IStatementService\n    {\n        StatementResponse GenerateStatement(StatementRequest request);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "17219428-da42-4f70-81f2-53e5ab0aae67",
                        "Name": "StatementService.cs",
                        "ParentId": "9b8ed5a5-4777-412e-b5e2-f92bfdeebb1d",
                        "Type": 1,
                        "Text": "using ElectronicStatementGenerator.Data;\nusing ElectronicStatementGenerator.Models;\nusing ElectronicStatementGenerator.Utils;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace ElectronicStatementGenerator.Services\n{\n    public class StatementService : IStatementService\n    {\n        private readonly IAccountRepository _accountRepository;\n\n        public StatementService(IAccountRepository accountRepository)\n        {\n            _accountRepository = accountRepository;\n        }\n\n        public StatementResponse GenerateStatement(StatementRequest request)\n        {\n            if (request == null || string.IsNullOrWhiteSpace(request.AccountId))\n            {\n                throw new ArgumentException(\"Invalid request data.\");\n            }\n\n            IEnumerable<Transaction> transactions = _accountRepository.GetTransactions(request.AccountId, request.Month, request.Year);\n            if (transactions == null || !transactions.Any())\n            {\n                return null; // or throw exception if account not found\n            }\n\n            decimal totalAmount = transactions.Sum(t => t.Amount);\n            \n            Statement statement = new Statement\n            {\n                AccountId = request.AccountId,\n                Month = request.Month,\n                Year = request.Year,\n                Transactions = transactions.ToList(),\n                TotalAmount = totalAmount\n            };\n\n            // Generate the electronic statement document as a formatted string\n            string documentContent = StatementFormatter.FormatStatement(statement);\n\n            return new StatementResponse\n            {\n                Success = true,\n                DocumentContent = documentContent\n            };\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
                "Name": "Models",
                "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
                "Type": 0,
                "Items": [
                    {
                        "Id": "62c51e89-ba5f-4151-b75a-be85ed1e1c12",
                        "Name": "StatementRequest.cs",
                        "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
                        "Type": 1,
                        "Text": "namespace ElectronicStatementGenerator.Models\n{\n    public class StatementRequest\n    {\n        public string AccountId { get; set; }\n        public int Month { get; set; }\n        public int Year { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "974a1778-2c98-41e5-9a06-7beaf22721ef",
                        "Name": "StatementResponse.cs",
                        "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
                        "Type": 1,
                        "Text": "namespace ElectronicStatementGenerator.Models\n{\n    public class StatementResponse\n    {\n        public bool Success { get; set; }\n        public string DocumentContent { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "345f9918-f9dc-4f82-9471-8a12cd3643d7",
                        "Name": "Statement.cs",
                        "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
                        "Type": 1,
                        "Text": "using System.Collections.Generic;\n\nnamespace ElectronicStatementGenerator.Models\n{\n    public class Statement\n    {\n        public string AccountId { get; set; }\n        public int Month { get; set; }\n        public int Year { get; set; }\n        public List<Transaction> Transactions { get; set; }\n        public decimal TotalAmount { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "08d6ec6e-8e36-4725-8efc-23e5ecb92449",
                        "Name": "Transaction.cs",
                        "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace ElectronicStatementGenerator.Models\n{\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public string AccountId { get; set; }\n        public System.DateTime Date { get; set; }\n        public string Description { get; set; }\n        public decimal Amount { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "aa4dbf9b-aa2f-4809-b358-c7df59d086db",
                        "Name": "Account.cs",
                        "ParentId": "25e75b98-efa9-42e3-ac29-56f4509d3c26",
                        "Type": 1,
                        "Text": "namespace ElectronicStatementGenerator.Models\n{\n    public class Account\n    {\n        public string AccountId { get; set; }\n        public string AccountHolderName { get; set; }\n        public string Email { get; set; }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "924dce53-21e8-48e8-be8e-09c2f5c678ed",
                "Name": "Data",
                "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
                "Type": 0,
                "Items": [
                    {
                        "Id": "38c079aa-0dca-4e9f-bc38-98461654f62e",
                        "Name": "IAccountRepository.cs",
                        "ParentId": "924dce53-21e8-48e8-be8e-09c2f5c678ed",
                        "Type": 1,
                        "Text": "using ElectronicStatementGenerator.Models;\nusing System.Collections.Generic;\n\nnamespace ElectronicStatementGenerator.Data\n{\n    public interface IAccountRepository\n    {\n        IEnumerable<Transaction> GetTransactions(string accountId, int month, int year);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "7bc9568e-0b58-4668-9eab-f54570cdf552",
                        "Name": "AccountRepository.cs",
                        "ParentId": "924dce53-21e8-48e8-be8e-09c2f5c678ed",
                        "Type": 1,
                        "Text": "using ElectronicStatementGenerator.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace ElectronicStatementGenerator.Data\n{\n    public class AccountRepository : IAccountRepository\n    {\n        private readonly List<Transaction> _transactions;\n\n        public AccountRepository()\n        {\n            // In a production environment, this data would come from a database.\n            // This static list simulates transaction records for multiple accounts.\n            _transactions = new List<Transaction>\n            {\n                new Transaction { TransactionId = \"T001\", AccountId = \"ACC123\", Date = new DateTime(2023, 8, 5), Description = \"Debit Purchase\", Amount = -50.75m },\n                new Transaction { TransactionId = \"T002\", AccountId = \"ACC123\", Date = new DateTime(2023, 8, 15), Description = \"Credit Refund\", Amount = 20.00m },\n                new Transaction { TransactionId = \"T003\", AccountId = \"ACC123\", Date = new DateTime(2023, 8, 20), Description = \"Direct Deposit\", Amount = 1500.00m },\n                new Transaction { TransactionId = \"T004\", AccountId = \"ACC456\", Date = new DateTime(2023, 8, 10), Description = \"ATM Withdrawal\", Amount = -200.00m },\n                new Transaction { TransactionId = \"T005\", AccountId = \"ACC456\", Date = new DateTime(2023, 8, 22), Description = \"Salary Credit\", Amount = 2500.00m }\n            };\n        }\n\n        public IEnumerable<Transaction> GetTransactions(string accountId, int month, int year)\n        {\n            return _transactions.Where(t => t.AccountId == accountId && t.Date.Month == month && t.Date.Year == year);\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "cb8f9b4f-7017-47c0-8088-72dbd5518259",
                "Name": "Utils",
                "ParentId": "31116afa-4a91-4d86-8dce-15601955d226",
                "Type": 0,
                "Items": [
                    {
                        "Id": "f2ddbaf1-32ef-40c9-958e-32b63ffe23e8",
                        "Name": "StatementFormatter.cs",
                        "ParentId": "cb8f9b4f-7017-47c0-8088-72dbd5518259",
                        "Type": 1,
                        "Text": "using ElectronicStatementGenerator.Models;\nusing System;\nusing System.Globalization;\nusing System.Text;\n\nnamespace ElectronicStatementGenerator.Utils\n{\n    public static class StatementFormatter\n    {\n        public static string FormatStatement(Statement statement)\n        {\n            if (statement == null)\n                throw new ArgumentNullException(nameof(statement));\n\n            StringBuilder sb = new StringBuilder();\n            sb.AppendLine(\"==============================\");\n            sb.AppendLine(\"Electronic Account Statement\");\n            sb.AppendLine(\"==============================\");\n            sb.AppendLine($\"Account ID: {statement.AccountId}\");\n            sb.AppendLine($\"Statement Period: {CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(statement.Month)} {statement.Year}\");\n            sb.AppendLine(\"------------------------------\");\n            sb.AppendLine(\"Transactions:\");\n            sb.AppendLine(\"ID\\tDate\\t\\tDescription\\tAmount\");\n\n            foreach (var txn in statement.Transactions)\n            {\n                sb.AppendLine($\"{txn.TransactionId}\\t{txn.Date.ToString(\"d\")}\\t{txn.Description}\\t{txn.Amount.ToString(\"C\")}\");\n            }\n\n            sb.AppendLine(\"------------------------------\");\n            sb.AppendLine($\"Total Amount: {statement.TotalAmount.ToString(\"C\")}\");\n            sb.AppendLine(\"==============================\");\n            return sb.ToString();\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
        "Name": "ATMIntegrationService",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "5ca9ffac-c6a4-4b55-a57d-7ba50c5e47f0",
                "Name": "Program.cs",
                "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ATMIntegrationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "3cd90610-4a3b-460b-8945-4fb9edfcd8d7",
                "Name": "Startup.cs",
                "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ATMIntegrationService.Services;\nusing ATMIntegrationService.Infrastructure;\n\nnamespace ATMIntegrationService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddSingleton<IATMService, ATMService>();\n            services.AddSingleton<ICoreBankingAdapter, CoreBankingAdapter>();\n            services.AddSingleton<IATMLogger, ATMLogger>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "ee2d6bd2-bc2e-4d43-a209-c31f11d79af2",
                "Name": "Controllers",
                "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
                "Type": 0,
                "Items": [
                    {
                        "Id": "95859cb6-d92e-45b9-b125-575549fac238",
                        "Name": "ATMController.cs",
                        "ParentId": "ee2d6bd2-bc2e-4d43-a209-c31f11d79af2",
                        "Type": 1,
                        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing ATMIntegrationService.Services;\nusing ATMIntegrationService.Models;\n\nnamespace ATMIntegrationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ATMController : ControllerBase\n    {\n        private readonly IATMService _atmService;\n\n        public ATMController(IATMService atmService)\n        {\n            _atmService = atmService;\n        }\n\n        [HttpPost(\"transaction\")]\n        public async Task<IActionResult> ProcessTransaction([FromBody] ATMTransactionRequest request)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            ATMTransactionResponse response = await _atmService.ProcessTransaction(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            else\n            {\n                return BadRequest(response);\n            }\n        }\n\n        [HttpGet(\"status/{atmId}\")]\n        public async Task<IActionResult> GetATMStatus(string atmId)\n        {\n            ATMStatus status = await _atmService.GetATMStatus(atmId);\n            return Ok(status);\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "09ee253d-1706-457d-8e3f-12f2efae0893",
                "Name": "Services",
                "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
                "Type": 0,
                "Items": [
                    {
                        "Id": "fbf7cd2d-781d-487a-98bb-77bca4d7257b",
                        "Name": "IATMService.cs",
                        "ParentId": "09ee253d-1706-457d-8e3f-12f2efae0893",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing ATMIntegrationService.Models;\n\nnamespace ATMIntegrationService.Services\n{\n    public interface IATMService\n    {\n        Task<ATMTransactionResponse> ProcessTransaction(ATMTransactionRequest request);\n        Task<ATMStatus> GetATMStatus(string atmId);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "dc4cc020-0cac-4393-aead-78205cd491b2",
                        "Name": "ATMService.cs",
                        "ParentId": "09ee253d-1706-457d-8e3f-12f2efae0893",
                        "Type": 1,
                        "Text": "using System;\nusing System.Threading.Tasks;\nusing ATMIntegrationService.Models;\nusing ATMIntegrationService.Infrastructure;\n\nnamespace ATMIntegrationService.Services\n{\n    public class ATMService : IATMService\n    {\n        private readonly ICoreBankingAdapter _bankingAdapter;\n        private readonly IATMLogger _logger;\n\n        public ATMService(ICoreBankingAdapter bankingAdapter, IATMLogger logger)\n        {\n            _bankingAdapter = bankingAdapter;\n            _logger = logger;\n        }\n\n        public async Task<ATMTransactionResponse> ProcessTransaction(ATMTransactionRequest request)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(request.ATMId) || string.IsNullOrEmpty(request.TransactionType))\n                {\n                    return new ATMTransactionResponse { Success = false, Message = \"Invalid request parameters\" };\n                }\n\n                var transactionResult = await _bankingAdapter.SendTransactionRequest(request);\n                _logger.LogInfo($\"Processed transaction for ATM {request.ATMId} with type {request.TransactionType}\");\n\n                return new ATMTransactionResponse\n                {\n                    Success = transactionResult.Success,\n                    Message = transactionResult.Message,\n                    TransactionId = transactionResult.TransactionId\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error processing transaction\", ex);\n                return new ATMTransactionResponse { Success = false, Message = $\"Error: {ex.Message}\" };\n            }\n        }\n\n        public async Task<ATMStatus> GetATMStatus(string atmId)\n        {\n            var status = await _bankingAdapter.GetATMStatus(atmId);\n            _logger.LogInfo($\"Retrieved status for ATM {atmId}\");\n            return status;\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "af9adb57-570d-4b54-8f5a-fc49d95f06b3",
                "Name": "Models",
                "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
                "Type": 0,
                "Items": [
                    {
                        "Id": "c1f137fd-12ff-4a25-a31a-de6f6e9ef187",
                        "Name": "ATMTransactionRequest.cs",
                        "ParentId": "af9adb57-570d-4b54-8f5a-fc49d95f06b3",
                        "Type": 1,
                        "Text": "namespace ATMIntegrationService.Models\n{\n    public class ATMTransactionRequest\n    {\n        public string ATMId { get; set; }\n        public string TransactionType { get; set; } // e.g., \"Withdrawal\", \"Deposit\", \"BalanceInquiry\"\n        public decimal Amount { get; set; }\n        public string AccountNumber { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "47a0ba66-7325-42e3-b39d-4d6c6f41e4a7",
                        "Name": "ATMTransactionResponse.cs",
                        "ParentId": "af9adb57-570d-4b54-8f5a-fc49d95f06b3",
                        "Type": 1,
                        "Text": "namespace ATMIntegrationService.Models\n{\n    public class ATMTransactionResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public string TransactionId { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "56b64483-54b7-48e2-9288-c8fcaf17da3e",
                        "Name": "ATMStatus.cs",
                        "ParentId": "af9adb57-570d-4b54-8f5a-fc49d95f06b3",
                        "Type": 1,
                        "Text": "namespace ATMIntegrationService.Models\n{\n    public class ATMStatus\n    {\n        public string ATMId { get; set; }\n        public bool IsOperational { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
                "Name": "Infrastructure",
                "ParentId": "faf4d3fe-43f9-4f77-b27d-f3bd4b551abd",
                "Type": 0,
                "Items": [
                    {
                        "Id": "a9c3e0cc-0258-4987-8fd2-99f9eb1d5ad5",
                        "Name": "ICoreBankingAdapter.cs",
                        "ParentId": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing ATMIntegrationService.Models;\n\nnamespace ATMIntegrationService.Infrastructure\n{\n    public interface ICoreBankingAdapter\n    {\n        Task<ATMTransactionResponse> SendTransactionRequest(ATMTransactionRequest request);\n        Task<ATMStatus> GetATMStatus(string atmId);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "03f87f47-86b5-4609-89c7-2ae540ddf83d",
                        "Name": "CoreBankingAdapter.cs",
                        "ParentId": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
                        "Type": 1,
                        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ATMIntegrationService.Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace ATMIntegrationService.Infrastructure\n{\n    public class CoreBankingAdapter : ICoreBankingAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _configuration;\n\n        public CoreBankingAdapter(IHttpClientFactory httpClientFactory, IConfiguration configuration)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _configuration = configuration;\n        }\n\n        public async Task<ATMTransactionResponse> SendTransactionRequest(ATMTransactionRequest request)\n        {\n            string endpoint = _configuration[\"CoreBanking:TransactionEndpoint\"];\n            if (string.IsNullOrEmpty(endpoint))\n            {\n                throw new Exception(\"Core Banking Transaction Endpoint not configured\");\n            }\n\n            var jsonRequest = JsonSerializer.Serialize(request);\n            var content = new StringContent(jsonRequest, Encoding.UTF8, \"application/json\");\n            HttpResponseMessage response = await _httpClient.PostAsync(endpoint, content);\n            response.EnsureSuccessStatusCode();\n            string jsonResponse = await response.Content.ReadAsStringAsync();\n            var result = JsonSerializer.Deserialize<ATMTransactionResponse>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            return result;\n        }\n\n        public async Task<ATMStatus> GetATMStatus(string atmId)\n        {\n            string endpoint = _configuration[\"CoreBanking:StatusEndpoint\"];\n            if (string.IsNullOrEmpty(endpoint))\n            {\n                throw new Exception(\"Core Banking Status Endpoint not configured\");\n            }\n\n            string requestUrl = $\"{endpoint}?atmId={atmId}\";\n            HttpResponseMessage response = await _httpClient.GetAsync(requestUrl);\n            response.EnsureSuccessStatusCode();\n            string jsonResponse = await response.Content.ReadAsStringAsync();\n            var status = JsonSerializer.Deserialize<ATMStatus>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            return status;\n        }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "b489225b-b193-494b-8564-da9686b9f683",
                        "Name": "IATMLogger.cs",
                        "ParentId": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace ATMIntegrationService.Infrastructure\n{\n    public interface IATMLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "eafa2d54-76ab-41f8-947b-3bc4c713ab54",
                        "Name": "ATMLogger.cs",
                        "ParentId": "6d5b7477-7544-416e-9646-80e2f2a0ca5b",
                        "Type": 1,
                        "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace ATMIntegrationService.Infrastructure\n{\n    public class ATMLogger : IATMLogger\n    {\n        private readonly ILogger<ATMLogger> _logger;\n\n        public ATMLogger(ILogger<ATMLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "44ee7283-732e-4208-9e9b-22768dafe350",
        "Name": "UserLoginService",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "a9a67b77-f05b-47bd-8677-66d76ea421f6",
                "Name": "Program.cs",
                "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing UserLoginService.Services;\nusing UserLoginService.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<IUserRepository, UserRepository>();\nbuilder.Services.AddScoped<IAuthService, AuthService>();\n\nbuilder.Services.AddLogging();\n// Authentication middleware configuration can be added here if needed\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
                "Language": 0
            },
            {
                "Id": "964ba7bb-7090-48aa-b00e-7e865da4c99c",
                "Name": "Controllers",
                "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
                "Type": 0,
                "Items": [
                    {
                        "Id": "23b7dd3a-a8c9-43f1-a8f4-3801ccc01628",
                        "Name": "AuthController.cs",
                        "ParentId": "964ba7bb-7090-48aa-b00e-7e865da4c99c",
                        "Type": 1,
                        "Text": "using Microsoft.AspNetCore.Mvc;\nusing UserLoginService.Models;\nusing UserLoginService.Services;\n\nnamespace UserLoginService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AuthController : ControllerBase\n    {\n        private readonly IAuthService _authService;\n\n        public AuthController(IAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        [HttpPost(\"login\")]\n        public IActionResult Login([FromBody] LoginRequest request)\n        {\n            try\n            {\n                var response = _authService.Login(request);\n                return Ok(response);\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new { Error = ex.Message });\n            }\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "b2d3f337-3f6e-4442-8d27-f47d03fc2682",
                "Name": "Services",
                "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
                "Type": 0,
                "Items": [
                    {
                        "Id": "47b48cf7-43c4-4f13-9d3d-5026a60dfde7",
                        "Name": "IAuthService.cs",
                        "ParentId": "b2d3f337-3f6e-4442-8d27-f47d03fc2682",
                        "Type": 1,
                        "Text": "using UserLoginService.Models;\n\nnamespace UserLoginService.Services\n{\n    public interface IAuthService\n    {\n        LoginResponse Login(LoginRequest request);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "e07bd352-d785-429c-af62-d3e5bcee5ccf",
                        "Name": "AuthService.cs",
                        "ParentId": "b2d3f337-3f6e-4442-8d27-f47d03fc2682",
                        "Type": 1,
                        "Text": "using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Text;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.IdentityModel.Tokens;\nusing UserLoginService.Data;\nusing UserLoginService.Models;\nusing UserLoginService.Utils;\n\nnamespace UserLoginService.Services\n{\n    public class AuthService : IAuthService\n    {\n        private readonly IUserRepository _userRepository;\n        private readonly IConfiguration _configuration;\n\n        public AuthService(IUserRepository userRepository, IConfiguration configuration)\n        {\n            _userRepository = userRepository;\n            _configuration = configuration;\n        }\n\n        public LoginResponse Login(LoginRequest request)\n        {\n            var user = _userRepository.GetUserByUsername(request.Username);\n            if (user == null || !user.IsActive)\n            {\n                throw new Exception(\"Invalid username or account is inactive.\");\n            }\n\n            if (!PasswordHelper.VerifyPassword(request.Password, user.HashedPassword))\n            {\n                throw new Exception(\"Invalid password.\");\n            }\n\n            // Generate JWT token\n            var tokenHandler = new JwtSecurityTokenHandler();\n            var secretKey = _configuration[\"Jwt:Secret\"];\n            if (string.IsNullOrEmpty(secretKey))\n            {\n                throw new Exception(\"JWT secret key is not configured.\");\n            }\n            var key = Encoding.ASCII.GetBytes(secretKey);\n            var tokenDescriptor = new SecurityTokenDescriptor\n            {\n                Subject = new ClaimsIdentity(new Claim[]\n                {\n                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n                    new Claim(ClaimTypes.Name, user.Username)\n                }),\n                Expires = DateTime.UtcNow.AddHours(1),\n                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)\n            };\n\n            var token = tokenHandler.CreateToken(tokenDescriptor);\n            var jwtToken = tokenHandler.WriteToken(token);\n\n            return new LoginResponse\n            {\n                Token = jwtToken,\n                Expiration = tokenDescriptor.Expires.Value\n            };\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "b1b222a4-b1a3-439f-a650-78a2a49e188d",
                "Name": "Data",
                "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
                "Type": 0,
                "Items": [
                    {
                        "Id": "d67be11c-3594-4d2f-bde1-cb6206635351",
                        "Name": "IUserRepository.cs",
                        "ParentId": "b1b222a4-b1a3-439f-a650-78a2a49e188d",
                        "Type": 1,
                        "Text": "using UserLoginService.Models;\n\nnamespace UserLoginService.Data\n{\n    public interface IUserRepository\n    {\n        User GetUserByUsername(string username);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "7bd85513-d555-454a-996c-84734d1e2589",
                        "Name": "UserRepository.cs",
                        "ParentId": "b1b222a4-b1a3-439f-a650-78a2a49e188d",
                        "Type": 1,
                        "Text": "using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing Microsoft.Extensions.Configuration;\nusing UserLoginService.Models;\n\nnamespace UserLoginService.Data\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly string _connectionString;\n\n        public UserRepository(IConfiguration configuration)\n        {\n            _connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n            if (string.IsNullOrEmpty(_connectionString))\n            {\n                throw new Exception(\"Database connection string is not configured.\");\n            }\n        }\n\n        public User GetUserByUsername(string username)\n        {\n            using (SqlConnection connection = new SqlConnection(_connectionString))\n            {\n                string query = \"SELECT Id, Username, HashedPassword, IsActive FROM Users WHERE Username = @Username\";\n                using (SqlCommand command = new SqlCommand(query, connection))\n                {\n                    command.Parameters.Add(\"@Username\", SqlDbType.NVarChar).Value = username;\n                    connection.Open();\n                    using (SqlDataReader reader = command.ExecuteReader())\n                    {\n                        if (reader.Read())\n                        {\n                            return new User\n                            {\n                                Id = reader.GetGuid(reader.GetOrdinal(\"Id\")),\n                                Username = reader.GetString(reader.GetOrdinal(\"Username\")),\n                                HashedPassword = reader.GetString(reader.GetOrdinal(\"HashedPassword\")),\n                                IsActive = reader.GetBoolean(reader.GetOrdinal(\"IsActive\"))\n                            };\n                        }\n                    }\n                }\n            }\n            return null;\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "8490c091-5c8d-40a7-a4ad-91b9f83453d6",
                "Name": "Models",
                "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
                "Type": 0,
                "Items": [
                    {
                        "Id": "10a0735a-42c0-456e-8a22-a6614c7e400d",
                        "Name": "User.cs",
                        "ParentId": "8490c091-5c8d-40a7-a4ad-91b9f83453d6",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace UserLoginService.Models\n{\n    public class User\n    {\n        public Guid Id { get; set; }\n        public string Username { get; set; }\n        public string HashedPassword { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "1065f3db-530d-424e-910b-2545cfed7299",
                        "Name": "LoginRequest.cs",
                        "ParentId": "8490c091-5c8d-40a7-a4ad-91b9f83453d6",
                        "Type": 1,
                        "Text": "namespace UserLoginService.Models\n{\n    public class LoginRequest\n    {\n        public string Username { get; set; }\n        public string Password { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "3e69b1ca-2a67-4a9e-a75c-458020719578",
                        "Name": "LoginResponse.cs",
                        "ParentId": "8490c091-5c8d-40a7-a4ad-91b9f83453d6",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace UserLoginService.Models\n{\n    public class LoginResponse\n    {\n        public string Token { get; set; }\n        public DateTime Expiration { get; set; }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "e6b9771a-8622-4cb3-868f-d4e8681c105b",
                "Name": "Utils",
                "ParentId": "44ee7283-732e-4208-9e9b-22768dafe350",
                "Type": 0,
                "Items": [
                    {
                        "Id": "6bda7b0b-85c6-49f2-b468-1c44289d876c",
                        "Name": "PasswordHelper.cs",
                        "ParentId": "e6b9771a-8622-4cb3-868f-d4e8681c105b",
                        "Type": 1,
                        "Text": "using System;\nusing System.Security.Cryptography;\n\nnamespace UserLoginService.Utils\n{\n    public static class PasswordHelper\n    {\n        private const int SaltSize = 16; // 128 bit\n        private const int KeySize = 32; // 256 bit\n        private const int Iterations = 10000;\n\n        public static string HashPassword(string password)\n        {\n            using (var algorithm = new Rfc2898DeriveBytes(password, SaltSize, Iterations, HashAlgorithmName.SHA256))\n            {\n                var salt = algorithm.Salt;\n                var key = algorithm.GetBytes(KeySize);\n                return $\"{Convert.ToBase64String(salt)}:{Convert.ToBase64String(key)}\";\n            }\n        }\n\n        public static bool VerifyPassword(string password, string hashedPassword)\n        {\n            var parts = hashedPassword.Split(':');\n            if (parts.Length != 2)\n            {\n                return false;\n            }\n\n            var salt = Convert.FromBase64String(parts[0]);\n            var key = Convert.FromBase64String(parts[1]);\n\n            using (var algorithm = new Rfc2898DeriveBytes(password, salt, Iterations, HashAlgorithmName.SHA256))\n            {\n                var keyToCheck = algorithm.GetBytes(KeySize);\n                return CryptographicOperations.FixedTimeEquals(key, keyToCheck);\n            }\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
        "Name": "TokenManagementSystem",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "d02b533e-398e-4b1d-a3c1-9af286566a83",
                "Name": "Program.cs",
                "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing TokenManagementSystem.Services;\nusing TokenManagementSystem.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ITokenService, TokenService>();\nbuilder.Services.AddSingleton<ITokenRepository, TokenRepository>();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
                "Language": 0
            },
            {
                "Id": "b77eeb92-bc20-41c1-af82-620d4eb9b389",
                "Name": "Controllers",
                "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
                "Type": 0,
                "Items": [
                    {
                        "Id": "1ce9669d-0c37-4a76-820a-d053d64d40c1",
                        "Name": "TokenController.cs",
                        "ParentId": "b77eeb92-bc20-41c1-af82-620d4eb9b389",
                        "Type": 1,
                        "Text": "using Microsoft.AspNetCore.Mvc;\nusing TokenManagementSystem.Models;\nusing TokenManagementSystem.Services;\n\nnamespace TokenManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TokenController : ControllerBase\n    {\n        private readonly ITokenService _tokenService;\n\n        public TokenController(ITokenService tokenService)\n        {\n            _tokenService = tokenService;\n        }\n\n        [HttpPost(\"create\")]\n        public IActionResult CreateToken([FromBody] TokenRequest request)\n        {\n            try\n            {\n                var token = _tokenService.CreateToken(request);\n                return Ok(new TokenResponse { Success = true, Token = token });\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new { Success = false, Error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"validate\")]\n        public IActionResult ValidateToken([FromBody] TokenValidationRequest request)\n        {\n            var isValid = _tokenService.ValidateToken(request.Token);\n            return Ok(new { Success = isValid });\n        }\n    }\n}",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "8db2c768-fe33-4619-8a6c-7db85699b909",
                "Name": "Services",
                "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
                "Type": 0,
                "Items": [
                    {
                        "Id": "d3d72022-5033-4fb9-8054-a52be630e121",
                        "Name": "ITokenService.cs",
                        "ParentId": "8db2c768-fe33-4619-8a6c-7db85699b909",
                        "Type": 1,
                        "Text": "namespace TokenManagementSystem.Services\n{\n    public interface ITokenService\n    {\n        string CreateToken(Models.TokenRequest request);\n        bool ValidateToken(string token);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "ff1c2e5c-03b2-40f5-aa79-1fc6a1492021",
                        "Name": "TokenService.cs",
                        "ParentId": "8db2c768-fe33-4619-8a6c-7db85699b909",
                        "Type": 1,
                        "Text": "using System;\nusing TokenManagementSystem.Models;\nusing TokenManagementSystem.Data;\nusing TokenManagementSystem.Utils;\n\nnamespace TokenManagementSystem.Services\n{\n    public class TokenService : ITokenService\n    {\n        private readonly ITokenRepository _repository;\n\n        public TokenService(ITokenRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public string CreateToken(TokenRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request?.UserId))\n            {\n                throw new ArgumentException(\"UserId is required.\");\n            }\n            var payload = $\"{request.UserId}:{DateTime.UtcNow.Ticks}\";\n            var token = SecurityHelper.Encrypt(payload);\n            var tokenModel = new Token\n            {\n                TokenValue = token,\n                UserId = request.UserId,\n                CreatedAt = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.AddHours(1)\n            };\n            _repository.StoreToken(tokenModel);\n            return token;\n        }\n\n        public bool ValidateToken(string token)\n        {\n            var tokenModel = _repository.GetToken(token);\n            if (tokenModel == null || DateTime.UtcNow > tokenModel.ExpiresAt)\n            {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
                "Name": "Models",
                "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
                "Type": 0,
                "Items": [
                    {
                        "Id": "8edbc148-4423-4cd2-a992-78716f4617e1",
                        "Name": "Token.cs",
                        "ParentId": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace TokenManagementSystem.Models\n{\n    public class Token\n    {\n        public string TokenValue { get; set; }\n        public string UserId { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime ExpiresAt { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "7b620c64-7d6d-4709-879c-f559dda6cdd4",
                        "Name": "TokenRequest.cs",
                        "ParentId": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
                        "Type": 1,
                        "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenRequest\n    {\n        public string UserId { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "1af12ad1-37d7-44bf-975b-60f7f2888560",
                        "Name": "TokenResponse.cs",
                        "ParentId": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
                        "Type": 1,
                        "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenResponse\n    {\n        public bool Success { get; set; }\n        public string Token { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "5f390a95-b54b-42ef-93a7-e30aa4a12ebf",
                        "Name": "TokenValidationRequest.cs",
                        "ParentId": "da2b9c3b-1cfe-450e-8c0c-8142eefec7be",
                        "Type": 1,
                        "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenValidationRequest\n    {\n        public string Token { get; set; }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "a7ed159a-c782-4cae-87b8-8537ac55597c",
                "Name": "Data",
                "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
                "Type": 0,
                "Items": [
                    {
                        "Id": "bdc58ea4-798d-4ad4-9ac2-a920c7184dea",
                        "Name": "ITokenRepository.cs",
                        "ParentId": "a7ed159a-c782-4cae-87b8-8537ac55597c",
                        "Type": 1,
                        "Text": "using TokenManagementSystem.Models;\n\nnamespace TokenManagementSystem.Data\n{\n    public interface ITokenRepository\n    {\n        void StoreToken(Token token);\n        Token GetToken(string tokenValue);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "d54bcfbd-6f54-4c9b-9d4b-8002b03ba264",
                        "Name": "TokenRepository.cs",
                        "ParentId": "a7ed159a-c782-4cae-87b8-8537ac55597c",
                        "Type": 1,
                        "Text": "using System.Collections.Concurrent;\nusing TokenManagementSystem.Models;\n\nnamespace TokenManagementSystem.Data\n{\n    public class TokenRepository : ITokenRepository\n    {\n        private readonly ConcurrentDictionary<string, Token> _tokens = new ConcurrentDictionary<string, Token>();\n\n        public void StoreToken(Token token)\n        {\n            _tokens[token.TokenValue] = token;\n        }\n\n        public Token GetToken(string tokenValue)\n        {\n            _tokens.TryGetValue(tokenValue, out Token token);\n            return token;\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "29fa894a-3ff5-4b04-b9d2-df856aa8393f",
                "Name": "Utils",
                "ParentId": "e2b518aa-f7b1-4c69-aafb-fec2ffece993",
                "Type": 0,
                "Items": [
                    {
                        "Id": "47671794-086f-47c6-97cf-1956ba6220a6",
                        "Name": "SecurityHelper.cs",
                        "ParentId": "29fa894a-3ff5-4b04-b9d2-df856aa8393f",
                        "Type": 1,
                        "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace TokenManagementSystem.Utils\n{\n    public static class SecurityHelper\n    {\n        private static readonly string SecretKey = \"YourStrongSecretKeyHere\";\n\n        public static string Encrypt(string plainText)\n        {\n            using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(SecretKey));\n            var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(plainText));\n            return BitConverter.ToString(hash).Replace(\"-\", \"\").ToLowerInvariant();\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "31ecad81-7526-4ba5-bb51-3f1af045a793",
        "Name": "TwoFactorAuthenticationService",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "9536cc0a-1d03-47a4-a0c2-a0485811f205",
                "Name": "Program.cs",
                "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace TwoFactorAuthenticationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
                "Language": 0
            },
            {
                "Id": "3b54412c-3a28-43a6-8148-683699a03d31",
                "Name": "Startup.cs",
                "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing TwoFactorAuthenticationService.Services;\nusing TwoFactorAuthenticationService.Infrastructure;\n\nnamespace TwoFactorAuthenticationService\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ITwoFactorAuthService, TwoFactorAuthService>();\n            services.AddSingleton<SmsSender>();\n            services.AddSingleton<EmailSender>();\n            services.AddSingleton<AppNotificationSender>();\n            services.AddSingleton<IMessageSenderFactory, MessageSenderFactory>();\n            services.AddHttpClient();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
                "Language": 0
            },
            {
                "Id": "91408d90-12a8-4364-bfea-51191a9b157d",
                "Name": "Controllers",
                "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
                "Type": 0,
                "Items": [
                    {
                        "Id": "afd46856-7b8c-432b-a407-90a92142bb54",
                        "Name": "TwoFactorAuthController.cs",
                        "ParentId": "91408d90-12a8-4364-bfea-51191a9b157d",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing TwoFactorAuthenticationService.Models;\nusing TwoFactorAuthenticationService.Services;\n\nnamespace TwoFactorAuthenticationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TwoFactorAuthController : ControllerBase\n    {\n        private readonly ITwoFactorAuthService _authService;\n\n        public TwoFactorAuthController(ITwoFactorAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        [HttpPost(\"request\")]\n        public async Task<IActionResult> RequestCode([FromBody] TwoFactorAuthRequest request)\n        {\n            var response = await _authService.RequestCodeAsync(request);\n            if (response.Success)\n                return Ok(response);\n            return BadRequest(response);\n        }\n\n        [HttpPost(\"verify\")]\n        public async Task<IActionResult> VerifyCode([FromBody] VerificationRequest request)\n        {\n            var response = await _authService.VerifyCodeAsync(request);\n            if (response.Success)\n                return Ok(response);\n            return BadRequest(response);\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "aea3a03e-5703-4f29-ae4f-750c8b3fb542",
                "Name": "Services",
                "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
                "Type": 0,
                "Items": [
                    {
                        "Id": "c749d5de-5eba-4e20-a36f-47185acfc1a1",
                        "Name": "ITwoFactorAuthService.cs",
                        "ParentId": "aea3a03e-5703-4f29-ae4f-750c8b3fb542",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing TwoFactorAuthenticationService.Models;\n\nnamespace TwoFactorAuthenticationService.Services\n{\n    public interface ITwoFactorAuthService\n    {\n        Task<TwoFactorAuthResponse> RequestCodeAsync(TwoFactorAuthRequest request);\n        Task<VerificationResponse> VerifyCodeAsync(VerificationRequest request);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "4b7119b4-4c55-4e34-ab00-639bff5c6848",
                        "Name": "TwoFactorAuthService.cs",
                        "ParentId": "aea3a03e-5703-4f29-ae4f-750c8b3fb542",
                        "Type": 1,
                        "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Security.Cryptography;\nusing System.Threading.Tasks;\nusing TwoFactorAuthenticationService.Models;\nusing TwoFactorAuthenticationService.Infrastructure;\n\nnamespace TwoFactorAuthenticationService.Services\n{\n    public class TwoFactorAuthService : ITwoFactorAuthService\n    {\n        private readonly IMessageSenderFactory _senderFactory;\n        // In-memory storage; production implementation should use persistent storage\n        private static readonly ConcurrentDictionary<string, CodeRecord> _codeStore = new ConcurrentDictionary<string, CodeRecord>();\n\n        public TwoFactorAuthService(IMessageSenderFactory senderFactory)\n        {\n            _senderFactory = senderFactory;\n        }\n\n        public async Task<TwoFactorAuthResponse> RequestCodeAsync(TwoFactorAuthRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.UserId) || string.IsNullOrWhiteSpace(request.Channel) || string.IsNullOrWhiteSpace(request.Destination))\n            {\n                return new TwoFactorAuthResponse { Success = false, Message = \"Invalid request parameters.\" };\n            }\n\n            // Generate a secure random 6-digit verification code\n            var code = GenerateVerificationCode();\n            var expiry = DateTime.UtcNow.AddMinutes(5);\n            var record = new CodeRecord { Code = code, Expiry = expiry };\n            _codeStore.AddOrUpdate(request.UserId, record, (key, old) => record);\n\n            var sender = _senderFactory.GetSender(request.Channel);\n            if (sender == null)\n            {\n                return new TwoFactorAuthResponse { Success = false, Message = \"Unsupported verification channel.\" };\n            }\n\n            var message = $\"Your verification code is {code}. It expires in 5 minutes.\";\n            await sender.SendAsync(request.Destination, message);\n            return new TwoFactorAuthResponse { Success = true, Message = \"Verification code sent successfully.\" };\n        }\n\n        public async Task<VerificationResponse> VerifyCodeAsync(VerificationRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.UserId) || string.IsNullOrWhiteSpace(request.Code))\n            {\n                return new VerificationResponse { Success = false, Message = \"Invalid verification request.\" };\n            }\n\n            if (_codeStore.TryGetValue(request.UserId, out CodeRecord record))\n            {\n                if (DateTime.UtcNow > record.Expiry)\n                {\n                    _codeStore.TryRemove(request.UserId, out _);\n                    return new VerificationResponse { Success = false, Message = \"Verification code expired.\" };\n                }\n                if (record.Code == request.Code)\n                {\n                    _codeStore.TryRemove(request.UserId, out _);\n                    return new VerificationResponse { Success = true, Message = \"Verification successful.\" };\n                }\n                return new VerificationResponse { Success = false, Message = \"Incorrect verification code.\" };\n            }\n            return new VerificationResponse { Success = false, Message = \"No verification code requested.\" };\n        }\n\n        private string GenerateVerificationCode()\n        {\n            using (var rng = new RNGCryptoServiceProvider())\n            {\n                byte[] randomNumber = new byte[4];\n                rng.GetBytes(randomNumber);\n                uint value = BitConverter.ToUInt32(randomNumber, 0) % 1000000;\n                return value.ToString(\"D6\");\n            }\n        }\n\n        // Internal record to store verification code and its expiration\n        private class CodeRecord\n        {\n            public string Code { get; set; }\n            public DateTime Expiry { get; set; }\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "d80605d6-6483-49cc-825e-e9e92637779c",
                "Name": "Models",
                "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
                "Type": 0,
                "Items": [
                    {
                        "Id": "d8c8350b-31f8-44cd-aa5f-64db29292776",
                        "Name": "TwoFactorAuthRequest.cs",
                        "ParentId": "d80605d6-6483-49cc-825e-e9e92637779c",
                        "Type": 1,
                        "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class TwoFactorAuthRequest\n    {\n        public string UserId { get; set; }\n        // Channel can be \"SMS\", \"Email\", or \"App\"\n        public string Channel { get; set; }\n        // Destination phone number, email address, or device token\n        public string Destination { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "6e71fc5c-fe92-48f5-87b2-ce2e02c82dcf",
                        "Name": "VerificationRequest.cs",
                        "ParentId": "d80605d6-6483-49cc-825e-e9e92637779c",
                        "Type": 1,
                        "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class VerificationRequest\n    {\n        public string UserId { get; set; }\n        public string Code { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "5465e919-fd0e-4101-b302-acb547795eb2",
                        "Name": "TwoFactorAuthResponse.cs",
                        "ParentId": "d80605d6-6483-49cc-825e-e9e92637779c",
                        "Type": 1,
                        "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class TwoFactorAuthResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "a7514cca-6aa2-401b-9aed-151f3e8e8959",
                        "Name": "VerificationResponse.cs",
                        "ParentId": "d80605d6-6483-49cc-825e-e9e92637779c",
                        "Type": 1,
                        "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class VerificationResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
                "Name": "Infrastructure",
                "ParentId": "31ecad81-7526-4ba5-bb51-3f1af045a793",
                "Type": 0,
                "Items": [
                    {
                        "Id": "d30d1bd2-bdb0-4e57-a5b7-213f158c5ef3",
                        "Name": "IMessageSender.cs",
                        "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Infrastructure\n{\n    public interface IMessageSender\n    {\n        Task SendAsync(string destination, string message);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "6b3fd37b-2fca-46f6-aab6-2ca371edc62a",
                        "Name": "SmsSender.cs",
                        "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
                        "Type": 1,
                        "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Infrastructure\n{\n    public class SmsSender : IMessageSender\n    {\n        // In production, use secure configuration for API URL and credentials\n        private readonly string _smsApiUrl = \"https://api.smsprovider.com/send\";\n\n        public async Task SendAsync(string destination, string message)\n        {\n            using (var httpClient = new HttpClient())\n            {\n                var payload = new { phone = destination, text = message };\n                var json = JsonSerializer.Serialize(payload);\n                using (var content = new StringContent(json, Encoding.UTF8, \"application/json\"))\n                {\n                    var response = await httpClient.PostAsync(_smsApiUrl, content);\n                    response.EnsureSuccessStatusCode();\n                }\n            }\n        }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "d2ae470a-f3d5-4807-a735-97d08905d9ba",
                        "Name": "EmailSender.cs",
                        "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
                        "Type": 1,
                        "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Infrastructure\n{\n    public class EmailSender : IMessageSender\n    {\n        // In production, use secure configuration for API URL and credentials\n        private readonly string _emailApiUrl = \"https://api.emailprovider.com/send\";\n\n        public async Task SendAsync(string destination, string message)\n        {\n            using (var httpClient = new HttpClient())\n            {\n                var payload = new { email = destination, subject = \"Your Verification Code\", body = message };\n                var json = JsonSerializer.Serialize(payload);\n                using (var content = new StringContent(json, Encoding.UTF8, \"application/json\"))\n                {\n                    var response = await httpClient.PostAsync(_emailApiUrl, content);\n                    response.EnsureSuccessStatusCode();\n                }\n            }\n        }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "f5276216-314d-47ef-9d46-555b9490ecb0",
                        "Name": "AppNotificationSender.cs",
                        "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
                        "Type": 1,
                        "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Infrastructure\n{\n    public class AppNotificationSender : IMessageSender\n    {\n        // In production, use secure configuration for API URL and credentials\n        private readonly string _appNotificationApiUrl = \"https://api.appnotification.com/send\";\n\n        public async Task SendAsync(string destination, string message)\n        {\n            using (var httpClient = new HttpClient())\n            {\n                var payload = new { deviceToken = destination, title = \"Verification Code\", message = message };\n                var json = JsonSerializer.Serialize(payload);\n                using (var content = new StringContent(json, Encoding.UTF8, \"application/json\"))\n                {\n                    var response = await httpClient.PostAsync(_appNotificationApiUrl, content);\n                    response.EnsureSuccessStatusCode();\n                }\n            }\n        }\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "237ee9f9-ef2b-46e9-bdeb-84ddb0a9773b",
                        "Name": "IMessageSenderFactory.cs",
                        "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
                        "Type": 1,
                        "Text": "namespace TwoFactorAuthenticationService.Infrastructure\n{\n    public interface IMessageSenderFactory\n    {\n        IMessageSender GetSender(string channel);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "0db65c88-2bcf-427f-abc9-d2079e7ec59b",
                        "Name": "MessageSenderFactory.cs",
                        "ParentId": "a8e4fbc8-57da-47db-812f-cb26cc44c3af",
                        "Type": 1,
                        "Text": "namespace TwoFactorAuthenticationService.Infrastructure\n{\n    public class MessageSenderFactory : IMessageSenderFactory\n    {\n        private readonly SmsSender _smsSender;\n        private readonly EmailSender _emailSender;\n        private readonly AppNotificationSender _appNotificationSender;\n\n        public MessageSenderFactory(SmsSender smsSender, EmailSender emailSender, AppNotificationSender appNotificationSender)\n        {\n            _smsSender = smsSender;\n            _emailSender = emailSender;\n            _appNotificationSender = appNotificationSender;\n        }\n\n        public IMessageSender GetSender(string channel)\n        {\n            if (string.IsNullOrWhiteSpace(channel))\n                return null;\n            switch (channel.Trim().ToLower())\n            {\n                case \"sms\":\n                    return _smsSender;\n                case \"email\":\n                    return _emailSender;\n                case \"app\":\n                    return _appNotificationSender;\n                default:\n                    return null;\n            }\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
        "Name": "PaymentGatewayConnector",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "17fdbddc-8850-4505-9a9c-81c2d7103511",
                "Name": "Program.cs",
                "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing PaymentGatewayConnector.Services;\nusing PaymentGatewayConnector.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddScoped<IPaymentProviderAdapter, PaymentProviderAdapter>();\nbuilder.Services.AddScoped<IGatewayConnectorService, GatewayConnectorService>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
                "Language": 0
            },
            {
                "Id": "5c862bf3-4e90-40cf-8820-b4cf69ad6601",
                "Name": "Controllers",
                "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
                "Type": 0,
                "Items": [
                    {
                        "Id": "9df26558-6f11-4ecc-9ed9-8b3095f329d1",
                        "Name": "PaymentGatewayController.cs",
                        "ParentId": "5c862bf3-4e90-40cf-8820-b4cf69ad6601",
                        "Type": 1,
                        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\nusing PaymentGatewayConnector.Services;\n\nnamespace PaymentGatewayConnector.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class PaymentGatewayController : ControllerBase\n    {\n        private readonly IGatewayConnectorService _gatewayService;\n\n        public PaymentGatewayController(IGatewayConnectorService gatewayService)\n        {\n            _gatewayService = gatewayService;\n        }\n\n        [HttpPost(\"process\")]\n        public async Task<IActionResult> ProcessPayment([FromBody] PaymentRequest request)\n        {\n            PaymentResponse response = await _gatewayService.ProcessPaymentAsync(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            return BadRequest(response);\n        }\n\n        [HttpPost(\"refund\")]\n        public async Task<IActionResult> RefundPayment([FromBody] PaymentRequest request)\n        {\n            PaymentResponse response = await _gatewayService.RefundPaymentAsync(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            return BadRequest(response);\n        }\n    }\n}",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "73aa3534-6a4d-4a30-96dc-c2ff651718a2",
                "Name": "Services",
                "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
                "Type": 0,
                "Items": [
                    {
                        "Id": "18f9e009-a448-42c3-9ee6-160f909cffdd",
                        "Name": "IGatewayConnectorService.cs",
                        "ParentId": "73aa3534-6a4d-4a30-96dc-c2ff651718a2",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\n\nnamespace PaymentGatewayConnector.Services\n{\n    public interface IGatewayConnectorService\n    {\n        Task<PaymentResponse> ProcessPaymentAsync(PaymentRequest request);\n        Task<PaymentResponse> RefundPaymentAsync(PaymentRequest request);\n    }\n}",
                        "Language": 0
                    },
                    {
                        "Id": "48a66363-f7dc-4bb4-9260-578ae1d7f4ad",
                        "Name": "GatewayConnectorService.cs",
                        "ParentId": "73aa3534-6a4d-4a30-96dc-c2ff651718a2",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\nusing PaymentGatewayConnector.Infrastructure;\n\nnamespace PaymentGatewayConnector.Services\n{\n    public class GatewayConnectorService : IGatewayConnectorService\n    {\n        private readonly IPaymentProviderAdapter _providerAdapter;\n\n        public GatewayConnectorService(IPaymentProviderAdapter providerAdapter)\n        {\n            _providerAdapter = providerAdapter;\n        }\n\n        public async Task<PaymentResponse> ProcessPaymentAsync(PaymentRequest request)\n        {\n            return await _providerAdapter.SendPaymentRequestAsync(request);\n        }\n\n        public async Task<PaymentResponse> RefundPaymentAsync(PaymentRequest request)\n        {\n            return await _providerAdapter.SendRefundRequestAsync(request);\n        }\n    }\n}",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "7b81c139-7e99-4ea4-8f2d-716f24cdf4ed",
                "Name": "Infrastructure",
                "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
                "Type": 0,
                "Items": [
                    {
                        "Id": "ec5712a4-b387-48a2-9362-91b2481c6442",
                        "Name": "IPaymentProviderAdapter.cs",
                        "ParentId": "7b81c139-7e99-4ea4-8f2d-716f24cdf4ed",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\n\nnamespace PaymentGatewayConnector.Infrastructure\n{\n    public interface IPaymentProviderAdapter\n    {\n        Task<PaymentResponse> SendPaymentRequestAsync(PaymentRequest request);\n        Task<PaymentResponse> SendRefundRequestAsync(PaymentRequest request);\n    }\n}",
                        "Language": 0
                    },
                    {
                        "Id": "f2ace655-2730-4a6d-a0b8-356cf2808af5",
                        "Name": "PaymentProviderAdapter.cs",
                        "ParentId": "7b81c139-7e99-4ea4-8f2d-716f24cdf4ed",
                        "Type": 1,
                        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing PaymentGatewayConnector.Models;\n\nnamespace PaymentGatewayConnector.Infrastructure\n{\n    public class PaymentProviderAdapter : IPaymentProviderAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public PaymentProviderAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<PaymentResponse> SendPaymentRequestAsync(PaymentRequest request)\n        {\n            string endpoint = \"https://api.externalpaymentgateway.com/process\";\n            string jsonContent = JsonSerializer.Serialize(request);\n            using var content = new StringContent(jsonContent, Encoding.UTF8, \"application/json\");\n            using var httpResponse = await _httpClient.PostAsync(endpoint, content);\n            httpResponse.EnsureSuccessStatusCode();\n            string responseContent = await httpResponse.Content.ReadAsStringAsync();\n            PaymentResponse paymentResponse = JsonSerializer.Deserialize<PaymentResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            if (paymentResponse == null)\n            {\n                throw new Exception(\"Invalid response from payment gateway.\");\n            }\n            return paymentResponse;\n        }\n\n        public async Task<PaymentResponse> SendRefundRequestAsync(PaymentRequest request)\n        {\n            string endpoint = \"https://api.externalpaymentgateway.com/refund\";\n            string jsonContent = JsonSerializer.Serialize(request);\n            using var content = new StringContent(jsonContent, Encoding.UTF8, \"application/json\");\n            using var httpResponse = await _httpClient.PostAsync(endpoint, content);\n            httpResponse.EnsureSuccessStatusCode();\n            string responseContent = await httpResponse.Content.ReadAsStringAsync();\n            PaymentResponse refundResponse = JsonSerializer.Deserialize<PaymentResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            if (refundResponse == null)\n            {\n                throw new Exception(\"Invalid response from refund endpoint.\");\n            }\n            return refundResponse;\n        }\n    }\n}",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "f9f3e9f0-9f39-42a4-b133-b7c604dd3c95",
                "Name": "Models",
                "ParentId": "eef2ceef-4e71-47b5-9d8f-b2fe80357b0b",
                "Type": 0,
                "Items": [
                    {
                        "Id": "afe6e18a-2066-418e-b78f-7d78e6e5e26f",
                        "Name": "PaymentRequest.cs",
                        "ParentId": "f9f3e9f0-9f39-42a4-b133-b7c604dd3c95",
                        "Type": 1,
                        "Text": "namespace PaymentGatewayConnector.Models\n{\n    public class PaymentRequest\n    {\n        public string PaymentId { get; set; }\n        public string OrderId { get; set; }\n        public string CardNumber { get; set; }\n        public string CardHolderName { get; set; }\n        public string ExpirationDate { get; set; }\n        public string CVV { get; set; }\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n    }\n}",
                        "Language": 0
                    },
                    {
                        "Id": "3931845a-f59f-47f2-b0a9-bd3514defa64",
                        "Name": "PaymentResponse.cs",
                        "ParentId": "f9f3e9f0-9f39-42a4-b133-b7c604dd3c95",
                        "Type": 1,
                        "Text": "namespace PaymentGatewayConnector.Models\n{\n    public class PaymentResponse\n    {\n        public bool Success { get; set; }\n        public string TransactionId { get; set; }\n        public string Message { get; set; }\n    }\n}",
                        "Language": 0
                    }
                ]
            }
        ]
    },
    {
        "Id": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
        "Name": "FraudDetectionSystem",
        "ParentId": null,
        "Type": 0,
        "Items": [
            {
                "Id": "31d404fa-b865-4553-998a-406ace4777c3",
                "Name": "Program.cs",
                "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace FraudDetectionSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
                "Language": 0
            },
            {
                "Id": "71c94c46-fba0-4584-849e-90f76375ea95",
                "Name": "Startup.cs",
                "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
                "Type": 1,
                "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing FraudDetectionSystem.Services;\nusing FraudDetectionSystem.Infrastructure;\n\nnamespace FraudDetectionSystem\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IFraudDetectionService, FraudDetectionService>();\n            services.AddSingleton<IFraudRepository, FraudRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
                "Language": 0
            },
            {
                "Id": "942e8ce2-ef31-4229-ae57-bcfa3088588c",
                "Name": "Controllers",
                "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
                "Type": 0,
                "Items": [
                    {
                        "Id": "0a14fb12-cbb2-46ef-a209-2d865d6c185a",
                        "Name": "FraudDetectionController.cs",
                        "ParentId": "942e8ce2-ef31-4229-ae57-bcfa3088588c",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing FraudDetectionSystem.Models;\nusing FraudDetectionSystem.Services;\n\nnamespace FraudDetectionSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class FraudDetectionController : ControllerBase\n    {\n        private readonly IFraudDetectionService _fraudDetectionService;\n\n        public FraudDetectionController(IFraudDetectionService fraudDetectionService)\n        {\n            _fraudDetectionService = fraudDetectionService;\n        }\n\n        [HttpPost(\"analyze\")]\n        public async Task<ActionResult<FraudAlert>> AnalyzeTransaction([FromBody] Transaction transaction)\n        {\n            var alert = await _fraudDetectionService.AnalyzeTransactionAsync(transaction);\n            return Ok(alert);\n        }\n    }\n}",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "983575b6-6d67-4895-aee3-c177d753bff2",
                "Name": "Services",
                "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
                "Type": 0,
                "Items": [
                    {
                        "Id": "3bf691da-15f3-4027-a14d-e94612ae9f9c",
                        "Name": "IFraudDetectionService.cs",
                        "ParentId": "983575b6-6d67-4895-aee3-c177d753bff2",
                        "Type": 1,
                        "Text": "using System.Threading.Tasks;\nusing FraudDetectionSystem.Models;\n\nnamespace FraudDetectionSystem.Services\n{\n    public interface IFraudDetectionService\n    {\n        Task<FraudAlert> AnalyzeTransactionAsync(Transaction transaction);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "37638a85-7fb5-4d35-939f-900855d04f31",
                        "Name": "FraudDetectionService.cs",
                        "ParentId": "983575b6-6d67-4895-aee3-c177d753bff2",
                        "Type": 1,
                        "Text": "using System;\nusing System.Threading.Tasks;\nusing FraudDetectionSystem.Models;\nusing FraudDetectionSystem.Infrastructure;\nusing FraudDetectionSystem.Utils;\n\nnamespace FraudDetectionSystem.Services\n{\n    public class FraudDetectionService : IFraudDetectionService\n    {\n        private readonly IFraudRepository _fraudRepository;\n\n        public FraudDetectionService(IFraudRepository fraudRepository)\n        {\n            _fraudRepository = fraudRepository;\n        }\n\n        public async Task<FraudAlert> AnalyzeTransactionAsync(Transaction transaction)\n        {\n            // Calculate risk score using a robust algorithm based on transaction amount\n            double riskScore = RiskScoringHelper.CalculateRiskScore(transaction.Amount);\n\n            // Determine if transaction is fraudulent based on risk score threshold\n            bool isFraud = riskScore > 2.5;\n            string alertMessage = isFraud ? \"Transaction flagged as high risk due to abnormal activity.\" : \"Transaction appears normal.\";\n\n            var alert = new FraudAlert\n            {\n                AlertId = Guid.NewGuid().ToString(),\n                TransactionId = transaction.TransactionId,\n                IsFraud = isFraud,\n                RiskScore = riskScore,\n                AlertMessage = alertMessage,\n                AlertTime = DateTime.UtcNow\n            };\n\n            // Save the alert in the repository for further processing or auditing\n            _fraudRepository.SaveAlert(alert);\n\n            return await Task.FromResult(alert);\n        }\n    }\n}",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "99252b82-b747-4ecf-85c3-606f26123112",
                "Name": "Models",
                "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
                "Type": 0,
                "Items": [
                    {
                        "Id": "40691bda-b997-4688-921c-ff39dea4537e",
                        "Name": "Transaction.cs",
                        "ParentId": "99252b82-b747-4ecf-85c3-606f26123112",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace FraudDetectionSystem.Models\n{\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public string FromAccount { get; set; }\n        public string ToAccount { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}",
                        "Language": 0
                    },
                    {
                        "Id": "39a9e4a3-5dc8-4521-bda0-563a481d2376",
                        "Name": "FraudAlert.cs",
                        "ParentId": "99252b82-b747-4ecf-85c3-606f26123112",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace FraudDetectionSystem.Models\n{\n    public class FraudAlert\n    {\n        public string AlertId { get; set; }\n        public string TransactionId { get; set; }\n        public bool IsFraud { get; set; }\n        public double RiskScore { get; set; }\n        public string AlertMessage { get; set; }\n        public DateTime AlertTime { get; set; }\n    }\n}",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "7ef8afe0-a543-4883-acf7-c924087c0cbe",
                "Name": "Infrastructure",
                "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
                "Type": 0,
                "Items": [
                    {
                        "Id": "16ece3e9-9331-45c5-a684-773cc67ce880",
                        "Name": "IFraudRepository.cs",
                        "ParentId": "7ef8afe0-a543-4883-acf7-c924087c0cbe",
                        "Type": 1,
                        "Text": "using FraudDetectionSystem.Models;\n\nnamespace FraudDetectionSystem.Infrastructure\n{\n    public interface IFraudRepository\n    {\n        void SaveAlert(FraudAlert alert);\n    }\n}\n",
                        "Language": 0
                    },
                    {
                        "Id": "fe329ea4-13af-4af8-8c04-81e7ac7afdb0",
                        "Name": "FraudRepository.cs",
                        "ParentId": "7ef8afe0-a543-4883-acf7-c924087c0cbe",
                        "Type": 1,
                        "Text": "using System.Collections.Concurrent;\nusing FraudDetectionSystem.Models;\n\nnamespace FraudDetectionSystem.Infrastructure\n{\n    public class FraudRepository : IFraudRepository\n    {\n        private readonly ConcurrentDictionary<string, FraudAlert> _alerts = new ConcurrentDictionary<string, FraudAlert>();\n\n        public void SaveAlert(FraudAlert alert)\n        {\n            _alerts[alert.AlertId] = alert;\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            },
            {
                "Id": "84d81fdd-d16a-481f-9cfe-950eb3d7ea7d",
                "Name": "Utils",
                "ParentId": "e7242e38-062d-4a0f-8344-4a481d6c4a4f",
                "Type": 0,
                "Items": [
                    {
                        "Id": "1797dc72-ac03-4817-94b7-827e334f69cc",
                        "Name": "RiskScoringHelper.cs",
                        "ParentId": "84d81fdd-d16a-481f-9cfe-950eb3d7ea7d",
                        "Type": 1,
                        "Text": "using System;\n\nnamespace FraudDetectionSystem.Utils\n{\n    public static class RiskScoringHelper\n    {\n        public static double CalculateRiskScore(decimal amount)\n        {\n            // Implement a production-ready risk scoring algorithm\n            // The risk score is derived based on transaction amount and can be adjusted with additional factors\n            double baseScore = (double)amount / 10000.0;\n            // Additional logic can be integrated here for a more complex risk assessment\n            return baseScore;\n        }\n    }\n}\n",
                        "Language": 0
                    }
                ]
            }
        ]
    }
]