trigger:
- master

pr:
  branches:
    include:
    - master

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

stages:
# Build Stage
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifact'

# Test Stage
- stage: Test
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: TestJob
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
      displayName: 'Run Unit Tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/TestResults/*.trx'
        mergeTestResults: true
      displayName: 'Publish Test Results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/**/CodeCoverageReport'
        additionalCodeCoverageFiles: ''
      displayName: 'Publish Code Coverage Results'

# Development Stage
- stage: Dev
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
  - job: DeployToDev
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        artifact: 'drop'
        path: '$(Pipeline.Workspace)'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'Azure subscription 1(41a8d72c-b0d9-45ef-b78c-12163a697ed0)'
        appType: 'webAppLinux'
        appName: 'assets-manager-api-dev'
        package: '$(Pipeline.Workspace)/**/*.zip'
      displayName: 'Deploy to Development environment'

# Production Stage with Approval
- stage: Prod
  dependsOn: Dev
  condition: succeeded()
  jobs:
  - deployment: DeployToProd
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure subscription 1(41a8d72c-b0d9-45ef-b78c-12163a697ed0)'
              appType: 'webAppLinux'
              appName: 'assets-manager-api'
              package: '$(Pipeline.Workspace)/**/*.zip'
            displayName: 'Deploy to Production environment'
