trigger:
- master

pr:
  branches:
    include:
    - master

pool:
  vmImage: ubuntu-latest

variables:
  - group: ApiTests

stages:
# Build Stage
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifact'

# Test Stage (Unit + Integration)
- stage: Test
  dependsOn: Build
  condition: succeeded()
  jobs:
  # Unit tests job
  - job: UnitTests
    displayName: 'Run Unit Tests'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests with Coverage'
      inputs:
        command: test
        projects: |
          **/AssetsManagerApi.UnitTests/*.csproj
        arguments: >
          --configuration $(buildConfiguration)
          --collect "Code coverage"
          --logger "trx;LogFileName=unit_test_results.trx"
    - task: PublishTestResults@2
      displayName: 'Publish Unit Test Results'
      inputs:
        testResultsFiles: '**/TestResults/unit_test_results.trx'
        mergeTestResults: true
    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Unit Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/TestResults/**/coverage.cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverageReportUnit'

  # Integration tests job
  - job: IntegrationTests
    displayName: 'Run Integration Tests'
    dependsOn: UnitTests
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Run Integration Tests with Coverage'
      inputs:
        command: test
        projects: |
          **/AssetsManagerApi.IntegrationTests/*.csproj
        arguments: >
          --configuration $(buildConfiguration)
          --collect "Code coverage"
          --logger "trx;LogFileName=integration_test_results.trx"
    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results'
      inputs:
        testResultsFiles: '**/TestResults/integration_test_results.trx'
        mergeTestResults: true
    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Integration Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/TestResults/**/coverage.cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverageReportIntegration'

# Development Stage
- stage: Dev
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
  - job: DeployToDev
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        artifact: 'drop'
        path: '$(Pipeline.Workspace)'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'Azure subscription 1(41a8d72c-b0d9-45ef-b78c-12163a697ed0)'
        appType: 'webAppLinux'
        appName: 'assets-manager-api-dev'
        package: '$(Pipeline.Workspace)/**/*.zip'
      displayName: 'Deploy to Development environment'

# Production Stage with Approval
- stage: Prod
  dependsOn: Dev
  condition: succeeded()
  jobs:
  - deployment: DeployToProd
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure subscription 1(41a8d72c-b0d9-45ef-b78c-12163a697ed0)'
              appType: 'webAppLinux'
              appName: 'assets-manager-api'
              package: '$(Pipeline.Workspace)/**/*.zip'
            displayName: 'Deploy to Production environment'
