[
  {
    "Id": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
    "Name": "UserLoginService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "803239f1-7ee7-48cb-949d-78838cd30be9",
        "Name": "Program.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace UserLoginService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8c78364d-03c7-42c3-a743-34003c86dfae",
        "Name": "Startup.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing UserLoginService.Interfaces;\nusing UserLoginService.Services;\nusing UserLoginService.Repositories;\nusing UserLoginService.Data;\nusing UserLoginService.Utilities;\n\nnamespace UserLoginService\n{\n    public class Startup\n    {\n        private readonly IConfiguration _configuration;\n\n        public Startup(IConfiguration configuration)\n        {\n            _configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<UserDbContext>(options =>\n                options.UseSqlServer(_configuration.GetConnectionString(\"DefaultConnection\")));\n\n            services.AddScoped<IAuthenticationService, AuthenticationService>();\n            services.AddScoped<IUserRepository, UserRepository>();\n            services.AddSingleton<JwtTokenGenerator>();\n\n            services.AddAuthentication(options =>\n            {\n                options.DefaultAuthenticateScheme = \"JwtBearer\";\n                options.DefaultChallengeScheme = \"JwtBearer\";\n            }).AddJwtBearer(\"JwtBearer\", options =>\n            {\n                options.TokenValidationParameters = JwtTokenGenerator.GetTokenValidationParameters(_configuration);\n            });\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ee88f430-ddc3-465b-b78e-57737afcad29",
        "Name": "Controllers",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ecedc81f-d2c3-45f8-a4ba-dec829a8fa27",
        "Name": "UserController.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing UserLoginService.Models;\nusing UserLoginService.Interfaces;\n\nnamespace UserLoginService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class UserController : ControllerBase\n    {\n        private readonly IAuthenticationService _authenticationService;\n\n        public UserController(IAuthenticationService authenticationService)\n        {\n            _authenticationService = authenticationService;\n        }\n\n        [HttpPost(\"login\")]\n        public IActionResult Login([FromBody] LoginRequest loginRequest)\n        {\n            try\n            {\n                LoginResponse response = _authenticationService.Authenticate(loginRequest);\n                return Ok(response);\n            }\n            catch (UnauthorizedAccessException)\n            {\n                return Unauthorized(new { error = \"Invalid username or password.\" });\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "72d921fb-c77e-44af-91f8-227f3a7485d8",
        "Name": "Services",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ecedf7cc-dfa9-4cb2-8f8f-a6665ba60575",
        "Name": "AuthenticationService.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using System;\nusing UserLoginService.Interfaces;\nusing UserLoginService.Models;\nusing UserLoginService.Utilities;\n\nnamespace UserLoginService.Services\n{\n    public class AuthenticationService : IAuthenticationService\n    {\n        private readonly IUserRepository _userRepository;\n        private readonly JwtTokenGenerator _tokenGenerator;\n\n        public AuthenticationService(IUserRepository userRepository, JwtTokenGenerator tokenGenerator)\n        {\n            _userRepository = userRepository;\n            _tokenGenerator = tokenGenerator;\n        }\n\n        public LoginResponse Authenticate(LoginRequest loginRequest)\n        {\n            User user = _userRepository.GetUserByUsername(loginRequest.Username);\n            if (user == null || !VerifyPassword(loginRequest.Password, user.PasswordHash))\n            {\n                throw new UnauthorizedAccessException(\"Invalid credentials.\");\n            }\n\n            string token = _tokenGenerator.GenerateToken(user.Id.ToString(), user.Username);\n            return new LoginResponse\n            {\n                Token = token,\n                ExpiresAt = DateTime.UtcNow.AddMinutes(60)\n            };\n        }\n\n        private bool VerifyPassword(string password, string storedHash)\n        {\n            return BCrypt.Net.BCrypt.Verify(password, storedHash);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8f1d671b-d31b-49f8-85f8-af0342141a2d",
        "Name": "Interfaces",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "217eba05-9f51-4636-856e-d68ac328d004",
        "Name": "IAuthenticationService.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using UserLoginService.Models;\n\nnamespace UserLoginService.Interfaces\n{\n    public interface IAuthenticationService\n    {\n        LoginResponse Authenticate(LoginRequest loginRequest);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9fe537e0-eeca-4532-8252-cb16f1661197",
        "Name": "IUserRepository.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using UserLoginService.Models;\n\nnamespace UserLoginService.Interfaces\n{\n    public interface IUserRepository\n    {\n        User GetUserByUsername(string username);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f5ebfe1d-cd79-4194-b944-4ebc9bedc5c7",
        "Name": "Repositories",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "dc3c4d00-6969-436e-9ebe-20be5de77b29",
        "Name": "UserRepository.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using System.Linq;\nusing UserLoginService.Interfaces;\nusing UserLoginService.Models;\nusing UserLoginService.Data;\n\nnamespace UserLoginService.Repositories\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly UserDbContext _context;\n\n        public UserRepository(UserDbContext context)\n        {\n            _context = context;\n        }\n\n        public User GetUserByUsername(string username)\n        {\n            return _context.Users.FirstOrDefault(u => u.Username == username);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ea792777-f662-493e-a9cf-a014f71c19f8",
        "Name": "Models",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "bde521e8-7975-48b5-ba22-b4b048a382e8",
        "Name": "User.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "namespace UserLoginService.Models\n{\n    public class User\n    {\n        public int Id { get; set; }\n        public string Username { get; set; }\n        public string PasswordHash { get; set; }\n        public string Email { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "fcb16a93-eae4-4e7a-906c-c1fa546d518b",
        "Name": "LoginRequest.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "namespace UserLoginService.Models\n{\n    public class LoginRequest\n    {\n        public string Username { get; set; }\n        public string Password { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6b15abb2-a4f7-4625-a3c4-9b38dac86178",
        "Name": "LoginResponse.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using System;\n\nnamespace UserLoginService.Models\n{\n    public class LoginResponse\n    {\n        public string Token { get; set; }\n        public DateTime ExpiresAt { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "70514015-eadc-4e83-8dc6-166d58059c5e",
        "Name": "Utilities",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "61c3e1da-844d-405d-9349-fedbe1948285",
        "Name": "JwtTokenGenerator.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using System;\nusing System.Text;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace UserLoginService.Utilities\n{\n    public class JwtTokenGenerator\n    {\n        private readonly IConfiguration _configuration;\n\n        public JwtTokenGenerator(IConfiguration configuration)\n        {\n            _configuration = configuration;\n        }\n\n        public string GenerateToken(string userId, string username, int expireMinutes = 60)\n        {\n            byte[] key = Encoding.UTF8.GetBytes(_configuration[\"Jwt:Key\"]);\n            string issuer = _configuration[\"Jwt:Issuer\"];\n            string audience = _configuration[\"Jwt:Audience\"];\n\n            var claims = new[] {\n                new Claim(JwtRegisteredClaimNames.Sub, userId),\n                new Claim(\"username\", username),\n                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())\n            };\n\n            var tokenDescriptor = new SecurityTokenDescriptor\n            {\n                Subject = new ClaimsIdentity(claims),\n                Expires = DateTime.UtcNow.AddMinutes(expireMinutes),\n                Issuer = issuer,\n                Audience = audience,\n                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)\n            };\n\n            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();\n            SecurityToken token = tokenHandler.CreateToken(tokenDescriptor);\n            return tokenHandler.WriteToken(token);\n        }\n\n        public static TokenValidationParameters GetTokenValidationParameters(IConfiguration configuration)\n        {\n            byte[] key = Encoding.UTF8.GetBytes(configuration[\"Jwt:Key\"]);\n            return new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateLifetime = true,\n                ValidateIssuerSigningKey = true,\n                ValidIssuer = configuration[\"Jwt:Issuer\"],\n                ValidAudience = configuration[\"Jwt:Audience\"],\n                IssuerSigningKey = new SymmetricSecurityKey(key)\n            };\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "19dbed57-acd0-4f43-af1c-c9056a33ff72",
        "Name": "Data",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fc330dff-6733-488a-8299-c83d2a1b34aa",
        "Name": "UserDbContext.cs",
        "ParentId": "87020c8a-9874-4607-aebb-b67f6d02f9fb",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing UserLoginService.Models;\n\nnamespace UserLoginService.Data\n{\n    public class UserDbContext : DbContext\n    {\n        public UserDbContext(DbContextOptions<UserDbContext> options) : base(options)\n        {\n        }\n\n        public DbSet<User> Users { get; set; }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "905d4555-467f-4704-9df0-3c60c53576c2",
    "Name": "TokenManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "2e24ae34-e28a-4cb2-a0f0-bdf774458391",
        "Name": "Program.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing TokenManagementSystem.Services;\nusing TokenManagementSystem.Data;\n\nnamespace TokenManagementSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n            builder.Services.AddControllers();\n            builder.Services.AddSingleton<ITokenService, TokenService>();\n            builder.Services.AddSingleton<ITokenRepository, TokenRepository>();\n\n            var app = builder.Build();\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n\n            app.Run();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e9907769-70ac-400a-9896-8d5e3fce3c0f",
        "Name": "Controllers",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "bc20e5b7-0a20-473e-b4c0-e1b491cda777",
        "Name": "TokenController.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing TokenManagementSystem.Models;\nusing TokenManagementSystem.Services;\n\nnamespace TokenManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TokenController : ControllerBase\n    {\n        private readonly ITokenService _tokenService;\n\n        public TokenController(ITokenService tokenService)\n        {\n            _tokenService = tokenService;\n        }\n\n        [HttpPost(\"create\")]\n        public IActionResult CreateToken([FromBody] TokenRequest request)\n        {\n            try\n            {\n                var token = _tokenService.CreateToken(request);\n                return Ok(new TokenResponse { Token = token, Success = true });\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { Success = false, Error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"validate\")]\n        public IActionResult ValidateToken([FromBody] TokenValidationRequest request)\n        {\n            var isValid = _tokenService.ValidateToken(request.Token);\n            return Ok(new { Success = isValid });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0f039606-a5ba-4162-b05a-36e725603444",
        "Name": "Services",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0518fe8e-7ab8-480c-a1cf-fa73a2871540",
        "Name": "ITokenService.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "using TokenManagementSystem.Models;\n\nnamespace TokenManagementSystem.Services\n{\n    public interface ITokenService\n    {\n        string CreateToken(TokenRequest request);\n        bool ValidateToken(string token);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "fb0bafd6-bd4d-4c47-a67f-271a436d3676",
        "Name": "TokenService.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "using System;\nusing TokenManagementSystem.Models;\nusing TokenManagementSystem.Data;\nusing TokenManagementSystem.Utils;\n\nnamespace TokenManagementSystem.Services\n{\n    public class TokenService : ITokenService\n    {\n        private readonly ITokenRepository _repository;\n\n        public TokenService(ITokenRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public string CreateToken(TokenRequest request)\n        {\n            // Construct token payload with user ID and a timestamp\n            var tokenPayload = $\"{request.UserId}:{DateTime.UtcNow.Ticks}\";\n            var token = SecurityHelper.Encrypt(tokenPayload);\n\n            var tokenModel = new Token\n            {\n                TokenValue = token,\n                UserId = request.UserId,\n                CreatedAt = DateTime.UtcNow,\n                ExpiresAt = DateTime.UtcNow.AddHours(1)\n            };\n\n            _repository.StoreToken(tokenModel);\n            return token;\n        }\n\n        public bool ValidateToken(string token)\n        {\n            var tokenModel = _repository.GetToken(token);\n            if (tokenModel == null || DateTime.UtcNow > tokenModel.ExpiresAt)\n            {\n                return false;\n            }\n            // Additional token integrity validations can be added here.\n            return true;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "27ffd785-2dc3-4e54-87c2-5ed4022e5b45",
        "Name": "Models",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fc78da29-8068-4303-a9e8-706dda423a95",
        "Name": "Token.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "using System;\n\nnamespace TokenManagementSystem.Models\n{\n    public class Token\n    {\n        public string TokenValue { get; set; }\n        public string UserId { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime ExpiresAt { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c4c7b06b-69ee-4ed1-88ce-23da7f81c0ca",
        "Name": "TokenRequest.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenRequest\n    {\n        public string UserId { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ffc50bfb-1abb-4ca6-91d7-4fcdb80b577e",
        "Name": "TokenResponse.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenResponse\n    {\n        public bool Success { get; set; }\n        public string Token { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "971b26f9-eb26-4e0b-803f-86760c90de00",
        "Name": "TokenValidationRequest.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "namespace TokenManagementSystem.Models\n{\n    public class TokenValidationRequest\n    {\n        public string Token { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f2fcf3aa-34c8-4e9f-b1bf-2771979ba332",
        "Name": "Data",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a31b1a6f-77c5-4645-8c45-f5a8d881e9e5",
        "Name": "ITokenRepository.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "using TokenManagementSystem.Models;\n\nnamespace TokenManagementSystem.Data\n{\n    public interface ITokenRepository\n    {\n        void StoreToken(Token token);\n        Token GetToken(string tokenValue);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9cfc66be-a0c2-41a6-93a0-3977466a56e4",
        "Name": "TokenRepository.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "using System.Collections.Concurrent;\nusing TokenManagementSystem.Models;\n\nnamespace TokenManagementSystem.Data\n{\n    public class TokenRepository : ITokenRepository\n    {\n        private readonly ConcurrentDictionary<string, Token> _store = new ConcurrentDictionary<string, Token>();\n\n        public void StoreToken(Token token)\n        {\n            _store[token.TokenValue] = token;\n        }\n\n        public Token GetToken(string tokenValue)\n        {\n            _store.TryGetValue(tokenValue, out Token token);\n            return token;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "fae71e2c-45e9-4a30-a913-1281c6729db0",
        "Name": "Utils",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "66a0ba84-cd5c-484a-b068-eea311136a4c",
        "Name": "SecurityHelper.cs",
        "ParentId": "905d4555-467f-4704-9df0-3c60c53576c2",
        "Type": 1,
        "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace TokenManagementSystem.Utils\n{\n    public static class SecurityHelper\n    {\n        public static string Encrypt(string plainText)\n        {\n            using var sha256 = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(plainText);\n            var hashBytes = sha256.ComputeHash(bytes);\n            var sb = new StringBuilder();\n            foreach (var b in hashBytes)\n            {\n                sb.Append(b.ToString(\"x2\"));\n            }\n            return sb.ToString();\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "99307054-5c6c-4617-a64d-53a82ffc3a06",
    "Name": "TwoFactorAuthenticationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "cbce3d41-893c-4fc1-996e-647d49151d77",
        "Name": "Program.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Configuration;\nusing TwoFactorAuthenticationService.Services;\nusing TwoFactorAuthenticationService.Providers;\nusing TwoFactorAuthenticationService.Configurations;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddMemoryCache();\n\n// Configure TwoFactorSettings from configuration\nbuilder.Services.Configure<TwoFactorSettings>(builder.Configuration.GetSection(\"TwoFactorSettings\"));\n\n// Dependency Injection for application services\nbuilder.Services.AddSingleton<IAuthenticationService, TwoFactorAuthService>();\nbuilder.Services.AddSingleton<INotificationService, NotificationService>();\n\n// Dependency Injection for providers\nbuilder.Services.AddSingleton<ISmsProvider, SmsProvider>();\nbuilder.Services.AddSingleton<IEmailProvider, EmailProvider>();\nbuilder.Services.AddSingleton<IAppProvider, AppProvider>();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "42073d32-1fa6-46dc-87ed-f156d8d87f8a",
        "Name": "Controllers",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0fe11f8e-363b-4f65-a4da-2542467ba803",
        "Name": "TwoFactorAuthController.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing TwoFactorAuthenticationService.Models;\nusing TwoFactorAuthenticationService.Services;\n\nnamespace TwoFactorAuthenticationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TwoFactorAuthController : ControllerBase\n    {\n        private readonly IAuthenticationService _authenticationService;\n\n        public TwoFactorAuthController(IAuthenticationService authenticationService)\n        {\n            _authenticationService = authenticationService;\n        }\n\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendCode([FromBody] TwoFactorRequest request)\n        {\n            var response = await _authenticationService.SendTwoFactorCodeAsync(request);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            return BadRequest(response);\n        }\n\n        [HttpPost(\"verify\")]\n        public async Task<IActionResult> VerifyCode([FromQuery] string userId, [FromQuery] string code)\n        {\n            var response = await _authenticationService.VerifyTwoFactorCodeAsync(userId, code);\n            if (response.Success)\n            {\n                return Ok(response);\n            }\n            return BadRequest(response);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "bb73f4cc-6156-427d-877d-3d874281758d",
        "Name": "Services",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "be2710c1-16aa-45be-8905-91c8ac2dbca5",
        "Name": "IAuthenticationService.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing TwoFactorAuthenticationService.Models;\n\nnamespace TwoFactorAuthenticationService.Services\n{\n    public interface IAuthenticationService\n    {\n        Task<TwoFactorResponse> SendTwoFactorCodeAsync(TwoFactorRequest request);\n        Task<TwoFactorResponse> VerifyTwoFactorCodeAsync(string userId, string code);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "8f2366d9-fe89-412f-bb86-dec8e8918d1b",
        "Name": "TwoFactorAuthService.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\nusing TwoFactorAuthenticationService.Models;\nusing TwoFactorAuthenticationService.Configurations;\nusing TwoFactorAuthenticationService.Utilities;\n\nnamespace TwoFactorAuthenticationService.Services\n{\n    public class TwoFactorAuthService : IAuthenticationService\n    {\n        private readonly IMemoryCache _cache;\n        private readonly INotificationService _notificationService;\n        private readonly TwoFactorSettings _settings;\n\n        public TwoFactorAuthService(IMemoryCache cache, INotificationService notificationService, IOptions<TwoFactorSettings> settings)\n        {\n            _cache = cache;\n            _notificationService = notificationService;\n            _settings = settings.Value;\n        }\n\n        public async Task<TwoFactorResponse> SendTwoFactorCodeAsync(TwoFactorRequest request)\n        {\n            // Generate a secure random code\n            string code = TokenGenerator.GenerateNumericCode(_settings.CodeLength);\n\n            // Cache the code with expiration\n            _cache.Set(request.UserId, code, TimeSpan.FromSeconds(_settings.CodeExpirationSeconds));\n\n            // Dispatch the code using the notification service based on the method\n            await _notificationService.SendCodeAsync(request, code);\n\n            return new TwoFactorResponse\n            {\n                Success = true,\n                Message = \"Two-factor authentication code sent successfully.\"\n            };\n        }\n\n        public async Task<TwoFactorResponse> VerifyTwoFactorCodeAsync(string userId, string code)\n        {\n            if (_cache.TryGetValue(userId, out string cachedCode))\n            {\n                if (cachedCode == code)\n                {\n                    // Optionally remove the code after successful verification\n                    _cache.Remove(userId);\n                    return new TwoFactorResponse\n                    {\n                        Success = true,\n                        Message = \"Two-factor authentication verified successfully.\"\n                    };\n                }\n                return await Task.FromResult(new TwoFactorResponse\n                {\n                    Success = false,\n                    Message = \"Invalid authentication code.\"\n                });\n            }\n            return await Task.FromResult(new TwoFactorResponse\n            {\n                Success = false,\n                Message = \"Authentication code has expired or does not exist.\"\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "42f9b7cc-ff61-40d3-8ea2-b4b5a046554e",
        "Name": "INotificationService.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing TwoFactorAuthenticationService.Models;\n\nnamespace TwoFactorAuthenticationService.Services\n{\n    public interface INotificationService\n    {\n        Task SendCodeAsync(TwoFactorRequest request, string code);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d25405e7-fd6e-42eb-aa85-5c872f5807c4",
        "Name": "NotificationService.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing TwoFactorAuthenticationService.Models;\nusing TwoFactorAuthenticationService.Providers;\n\nnamespace TwoFactorAuthenticationService.Services\n{\n    public class NotificationService : INotificationService\n    {\n        private readonly ISmsProvider _smsProvider;\n        private readonly IEmailProvider _emailProvider;\n        private readonly IAppProvider _appProvider;\n\n        public NotificationService(ISmsProvider smsProvider, IEmailProvider emailProvider, IAppProvider appProvider)\n        {\n            _smsProvider = smsProvider;\n            _emailProvider = emailProvider;\n            _appProvider = appProvider;\n        }\n\n        public async Task SendCodeAsync(TwoFactorRequest request, string code)\n        {\n            string message = $\"Your authentication code is: {code}\";\n            switch (request.Method.ToLower())\n            {\n                case \"sms\":\n                    await _smsProvider.SendSmsAsync(request.Destination, message);\n                    break;\n                case \"email\":\n                    await _emailProvider.SendEmailAsync(request.Destination, \"Authentication Code\", message);\n                    break;\n                case \"app\":\n                    await _appProvider.SendAppNotificationAsync(request.UserId, message);\n                    break;\n                default:\n                    throw new ArgumentException(\"Unsupported notification method.\");\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "72b01e21-0ae5-4797-9ca1-fbbae75e22a9",
        "Name": "Providers",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "92286096-a31d-427d-bc35-868f2c5c052a",
        "Name": "ISmsProvider.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Providers\n{\n    public interface ISmsProvider\n    {\n        Task SendSmsAsync(string phoneNumber, string message);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "9f6b40af-d387-4523-baec-2f9577db74aa",
        "Name": "SmsProvider.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Providers\n{\n    public class SmsProvider : ISmsProvider\n    {\n        private readonly HttpClient _httpClient;\n\n        public SmsProvider()\n        {\n            // In production, configure HttpClient with proper settings\n            _httpClient = new HttpClient();\n        }\n\n        public async Task SendSmsAsync(string phoneNumber, string message)\n        {\n            // Implement integration with an SMS gateway using HttpClient\n            var payload = new { to = phoneNumber, text = message };\n            var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n            // Replace with actual SMS API endpoint URL\n            var response = await _httpClient.PostAsync(\"https://api.smsgateway.example.com/send\", content);\n            response.EnsureSuccessStatusCode();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "929f273f-82bf-4d62-88a5-da901a889ed5",
        "Name": "IEmailProvider.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Providers\n{\n    public interface IEmailProvider\n    {\n        Task SendEmailAsync(string email, string subject, string message);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f7911eea-eb12-4f73-a0ba-2a514bb57575",
        "Name": "EmailProvider.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Providers\n{\n    public class EmailProvider : IEmailProvider\n    {\n        private readonly HttpClient _httpClient;\n\n        public EmailProvider()\n        {\n            // In production, configure HttpClient with proper settings\n            _httpClient = new HttpClient();\n        }\n\n        public async Task SendEmailAsync(string email, string subject, string message)\n        {\n            // Implement integration with an Email service provider\n            var payload = new { to = email, subject = subject, body = message };\n            var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n            // Replace with actual Email API endpoint URL\n            var response = await _httpClient.PostAsync(\"https://api.emailservice.example.com/send\", content);\n            response.EnsureSuccessStatusCode();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "3d86b147-d678-4acc-9c6f-bdf95043d6af",
        "Name": "IAppProvider.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Providers\n{\n    public interface IAppProvider\n    {\n        Task SendAppNotificationAsync(string userId, string message);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f93246b2-ffeb-45ee-bc62-0f589527ffa9",
        "Name": "AppProvider.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace TwoFactorAuthenticationService.Providers\n{\n    public class AppProvider : IAppProvider\n    {\n        private readonly HttpClient _httpClient;\n\n        public AppProvider()\n        {\n            // In production, configure HttpClient with proper settings\n            _httpClient = new HttpClient();\n        }\n\n        public async Task SendAppNotificationAsync(string userId, string message)\n        {\n            // Implement integration with an in-app notification system\n            var payload = new { userId = userId, message = message };\n            var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n            // Replace with actual App Notification API endpoint URL\n            var response = await _httpClient.PostAsync(\"https://api.appnotification.example.com/send\", content);\n            response.EnsureSuccessStatusCode();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a8fde391-ac5a-4ecb-8788-95dd67fd52bf",
        "Name": "Models",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "27748f51-b1e3-4762-bcaa-403aea6b62a8",
        "Name": "TwoFactorRequest.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class TwoFactorRequest\n    {\n        public string UserId { get; set; }\n        public string Method { get; set; } // Expected values: \"sms\", \"email\", \"app\"\n        public string Destination { get; set; } // Phone number or email based on the method\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d742f841-563e-4e27-ad55-883f6ae7aab7",
        "Name": "TwoFactorResponse.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "namespace TwoFactorAuthenticationService.Models\n{\n    public class TwoFactorResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "8f59e92f-6ac5-455e-bd55-2d1bc158ff8d",
        "Name": "Configurations",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c879b8cd-4a9f-45a2-8b7f-91b9c4db6c7a",
        "Name": "TwoFactorSettings.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "namespace TwoFactorAuthenticationService.Configurations\n{\n    public class TwoFactorSettings\n    {\n        public int CodeLength { get; set; } = 6;\n        public int CodeExpirationSeconds { get; set; } = 300; // 5 minutes expiration\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f26180c5-b778-45ee-96ce-32f053fd7dbb",
        "Name": "Utilities",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e34f0ffd-d843-4ccc-bb16-6cc68916fb5c",
        "Name": "TokenGenerator.cs",
        "ParentId": "99307054-5c6c-4617-a64d-53a82ffc3a06",
        "Type": 1,
        "Text": "using System;\nusing System.Security.Cryptography;\n\nnamespace TwoFactorAuthenticationService.Utilities\n{\n    public static class TokenGenerator\n    {\n        public static string GenerateNumericCode(int length)\n        {\n            if (length <= 0) throw new ArgumentException(\"Code length must be positive.\");\n            var bytes = new byte[length];\n            using (var rng = RandomNumberGenerator.Create())\n            {\n                rng.GetBytes(bytes);\n            }\n\n            var code = \"\";\n            foreach (var b in bytes)\n            {\n                // Generate a digit between 0 and 9\n                code += (b % 10).ToString();\n            }\n            return code;\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "2d67aa0a-6642-47f9-972c-2e67a8199601",
    "Name": "UserRegistrationPortal",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "e20d4b52-0c60-4a70-8b4a-c90e32641461",
        "Name": "Program.cs",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing UserRegistrationPortal.Data;\n\nnamespace UserRegistrationPortal\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var host = CreateHostBuilder(args).Build();\n            \n            // Ensure the database is created\n            using (var scope = host.Services.CreateScope())\n            {\n                var services = scope.ServiceProvider;\n                var context = services.GetRequiredService<UserDbContext>();\n                context.Database.EnsureCreated();\n            }\n            \n            host.Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bde1b3a8-247f-40bc-b543-e0c11b17105c",
        "Name": "Startup.cs",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.OpenApi.Models;\nusing UserRegistrationPortal.Data;\nusing UserRegistrationPortal.Repositories;\nusing UserRegistrationPortal.Services;\n\nnamespace UserRegistrationPortal\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<UserDbContext>(options =>\n                options.UseInMemoryDatabase(\"UserDb\"));\n            services.AddScoped<IUserRepository, UserRepository>();\n            services.AddScoped<RegistrationService>();\n\n            services.AddSwaggerGen(c =>\n            {\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"User Registration API\", Version = \"v1\" });\n            });\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.UseRouting();\n\n            app.UseSwagger();\n            app.UseSwaggerUI(c =>\n            {\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"User Registration API V1\");\n            });\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8a584868-a5ee-4898-a463-1080906e7bda",
        "Name": "appsettings.json",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 1,
        "Text": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n",
        "Language": 0
      },
      {
        "Id": "f19714e6-9944-4b6d-8a25-a569fc551a18",
        "Name": "Controllers",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "76e4be7e-5e06-42bc-9f2c-97eeaca625b7",
        "Name": "RegistrationController.cs",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing UserRegistrationPortal.Services;\n\nnamespace UserRegistrationPortal.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RegistrationController : ControllerBase\n    {\n        private readonly RegistrationService _registrationService;\n\n        public RegistrationController(RegistrationService registrationService)\n        {\n            _registrationService = registrationService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Register([FromBody] RegistrationRequest request)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            try\n            {\n                var user = await _registrationService.RegisterUserAsync(request.FullName, request.Email, request.Password);\n                return Ok(new { UserId = user.Id, Message = \"Registration successful.\" });\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new { Error = ex.Message });\n            }\n        }\n    }\n\n    public class RegistrationRequest\n    {\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public string Password { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b4c80e38-4881-4d5f-ae55-7b611b1d82b2",
        "Name": "Models",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4f54f9f0-63b6-498e-a431-7b1a830ac03f",
        "Name": "User.cs",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 1,
        "Text": "using System;\n\nnamespace UserRegistrationPortal.Models\n{\n    public class User\n    {\n        public Guid Id { get; set; }\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public string PasswordHash { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f8256df4-8e18-4d86-a9a3-07b48909b9c4",
        "Name": "Services",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9ea0ec75-3952-4d1e-9354-fe7a88ea24ee",
        "Name": "RegistrationService.cs",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 1,
        "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UserRegistrationPortal.Models;\nusing UserRegistrationPortal.Repositories;\n\nnamespace UserRegistrationPortal.Services\n{\n    public class RegistrationService\n    {\n        private readonly IUserRepository _userRepository;\n\n        public RegistrationService(IUserRepository userRepository)\n        {\n            _userRepository = userRepository;\n        }\n\n        public async Task<User> RegisterUserAsync(string fullName, string email, string password)\n        {\n            var existingUser = await _userRepository.GetUserByEmailAsync(email);\n            if (existingUser != null)\n            {\n                throw new Exception(\"A user with this email already exists.\");\n            }\n\n            var user = new User\n            {\n                Id = Guid.NewGuid(),\n                FullName = fullName,\n                Email = email,\n                PasswordHash = ComputeSha256Hash(password),\n                CreatedAt = DateTime.UtcNow\n            };\n\n            await _userRepository.AddUserAsync(user);\n            return user;\n        }\n\n        private string ComputeSha256Hash(string rawData)\n        {\n            using (SHA256 sha256Hash = SHA256.Create())\n            {\n                var bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));\n                var builder = new StringBuilder();\n                for (int i = 0; i < bytes.Length; i++)\n                {\n                    builder.Append(bytes[i].ToString(\"x2\"));\n                }\n                return builder.ToString();\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c792dfc2-4702-4f29-a297-fe3622c30302",
        "Name": "Repositories",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f8e24a9f-501e-4830-8b69-4454c1c07478",
        "Name": "UserRepository.cs",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing UserRegistrationPortal.Data;\nusing UserRegistrationPortal.Models;\n\nnamespace UserRegistrationPortal.Repositories\n{\n    public interface IUserRepository\n    {\n        Task<User> GetUserByEmailAsync(string email);\n        Task AddUserAsync(User user);\n    }\n\n    public class UserRepository : IUserRepository\n    {\n        private readonly UserDbContext _context;\n\n        public UserRepository(UserDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<User> GetUserByEmailAsync(string email)\n        {\n            return await _context.Users.FirstOrDefaultAsync(u => u.Email == email);\n        }\n\n        public async Task AddUserAsync(User user)\n        {\n            await _context.Users.AddAsync(user);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9134feea-e543-4fd0-a9ac-2a051a2dbe57",
        "Name": "Data",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "be964d60-bb25-4bd4-807f-86483cb86e58",
        "Name": "UserDbContext.cs",
        "ParentId": "2d67aa0a-6642-47f9-972c-2e67a8199601",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing UserRegistrationPortal.Models;\n\nnamespace UserRegistrationPortal.Data\n{\n    public class UserDbContext : DbContext\n    {\n        public UserDbContext(DbContextOptions<UserDbContext> options) : base(options) { }\n\n        public DbSet<User> Users { get; set; }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "0c7e62fa-6162-47b8-ada5-5a6430a1c05f",
    "Name": "PasswordResetTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "87486768-586a-44c0-b33e-99f2b08771f5",
        "Name": "Program.cs",
        "ParentId": "0c7e62fa-6162-47b8-ada5-5a6430a1c05f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing PasswordResetTool.Services;\nusing PasswordResetTool.Data;\nusing PasswordResetTool.Configuration;\nusing Microsoft.EntityFrameworkCore;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddControllers();\nbuilder.Services.AddDbContext<PasswordResetDbContext>(options =>\n    options.UseInMemoryDatabase(\"PasswordResetDb\"));\n\nbuilder.Services.Configure<PasswordResetSettings>(builder.Configuration.GetSection(\"PasswordResetSettings\"));\n\nbuilder.Services.AddScoped<IPasswordResetRepository, PasswordResetRepository>();\nbuilder.Services.AddScoped<IPasswordResetService, PasswordResetService>();\nbuilder.Services.AddScoped<IEmailService, EmailService>();\n\nvar app = builder.Build();\n\napp.UseHttpsRedirection();\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "ec601ed5-5c7c-4c30-91a8-2a6a0a278013",
        "Name": "Configuration",
        "ParentId": "0c7e62fa-6162-47b8-ada5-5a6430a1c05f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f749acd4-eb49-45bc-b907-2fb3d1c05944",
        "Name": "Controllers",
        "ParentId": "0c7e62fa-6162-47b8-ada5-5a6430a1c05f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "164042f3-900a-4fea-a423-69055fbdd315",
        "Name": "Data",
        "ParentId": "0c7e62fa-6162-47b8-ada5-5a6430a1c05f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5a308170-8774-40cb-83ff-d28721ced9d3",
        "Name": "Models",
        "ParentId": "0c7e62fa-6162-47b8-ada5-5a6430a1c05f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "35334219-6acc-46d7-bca9-bfbc3c8df0f0",
        "Name": "Services",
        "ParentId": "0c7e62fa-6162-47b8-ada5-5a6430a1c05f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "aad1563d-dc8b-4c08-a98c-d21307382f17",
        "Name": "Utils",
        "ParentId": "0c7e62fa-6162-47b8-ada5-5a6430a1c05f",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
    "Name": "AccountOpeningService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "368e50e9-563d-4e32-be8c-f38edc194d11",
        "Name": "Program.cs",
        "ParentId": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace AccountOpeningService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "92c98256-923d-4e6e-862e-4d1d373758df",
        "Name": "Startup.cs",
        "ParentId": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing AccountOpeningService.Services;\nusing AccountOpeningService.Data;\nusing AccountOpeningService.Validators;\n\nnamespace AccountOpeningService\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddScoped<IAccountService, AccountService>();\n            services.AddScoped<IAccountRepository, AccountRepository>();\n            services.AddSingleton<AccountValidator>();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a5d9ce23-539a-4037-b25a-b0e83de5db6b",
        "Name": "Controllers",
        "ParentId": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "756165f6-0843-436c-b70e-830b2223378a",
        "Name": "Models",
        "ParentId": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5de09bb7-2d72-4cbe-8210-62cfd4679341",
        "Name": "Services",
        "ParentId": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5267be43-505c-4bef-91dc-5414dac9ad42",
        "Name": "Validators",
        "ParentId": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6bcf9ad3-63b7-4c97-bc27-9dd546981582",
        "Name": "Data",
        "ParentId": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "719834d9-17c0-4b66-8d23-f05490469024",
        "Name": "Infrastructure",
        "ParentId": "74cc661f-a78b-4caa-8863-83ab8ebcef69",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
    "Name": "CustomerProfileManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "309cb69a-3718-496d-824c-0496747295a6",
        "Name": "Program.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CustomerProfileManager\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "7e36b070-245b-4689-882e-264eaf2cee23",
        "Name": "Startup.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing CustomerProfileManager.Services;\nusing CustomerProfileManager.Data;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace CustomerProfileManager\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<CustomerProfileDbContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n            services.AddScoped<ICustomerProfileService, CustomerProfileService>();\n            services.AddScoped<CustomerProfileRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "15e8e699-4c36-4e8b-80a9-8ed8ef1588b5",
        "Name": "appsettings.json",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=.;Database=CustomerProfiles;Trusted_Connection=True;\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\"\n    }\n  }\n}",
        "Language": 0
      },
      {
        "Id": "eaaaa6ed-3db4-4e75-acda-f8f0c40825b6",
        "Name": "Controllers",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ecb715e8-43c2-478f-9f65-ff99de511e33",
        "Name": "CustomerProfileController.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing CustomerProfileManager.Services;\nusing CustomerProfileManager.Models;\nusing System.Threading.Tasks;\n\nnamespace CustomerProfileManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CustomerProfileController : ControllerBase\n    {\n        private readonly ICustomerProfileService _service;\n\n        public CustomerProfileController(ICustomerProfileService service)\n        {\n            _service = service;\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CustomerProfile>> GetCustomerProfile(int id)\n        {\n            var profile = await _service.GetProfileByIdAsync(id);\n            if (profile == null)\n                return NotFound(new ErrorResponse { Message = \"Customer profile not found.\" });\n            return Ok(profile);\n        }\n\n        [HttpPost]\n        public async Task<ActionResult<CustomerProfile>> CreateCustomerProfile([FromBody] CustomerProfile profile)\n        {\n            var created = await _service.CreateProfileAsync(profile);\n            return CreatedAtAction(nameof(GetCustomerProfile), new { id = created.Id }, created);\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<ActionResult> UpdateCustomerProfile(int id, [FromBody] CustomerProfile profile)\n        {\n            var updated = await _service.UpdateProfileAsync(id, profile);\n            if (!updated)\n                return NotFound(new ErrorResponse { Message = \"Customer profile not found.\" });\n            return NoContent();\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<ActionResult> DeleteCustomerProfile(int id)\n        {\n            var deleted = await _service.DeleteProfileAsync(id);\n            if (!deleted)\n                return NotFound(new ErrorResponse { Message = \"Customer profile not found.\" });\n            return NoContent();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "9d730c8d-250a-46ed-8060-4dc73d11e2b3",
        "Name": "Models",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "10f030b5-958e-4cc4-8a1b-68a3bbbf9554",
        "Name": "CustomerProfile.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "namespace CustomerProfileManager.Models\n{\n    public class CustomerProfile\n    {\n        public int Id { get; set; }\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public string PhoneNumber { get; set; }\n        public string Address { get; set; }\n        public string EncryptedPersonalData { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "54c4f23b-347d-4b34-b4a7-59dff89a3118",
        "Name": "ErrorResponse.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "namespace CustomerProfileManager.Models\n{\n    public class ErrorResponse\n    {\n        public string Message { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a8f7f77b-23b0-49d7-ae0d-4957a5efc5f8",
        "Name": "Services",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "863ea3c9-2215-423e-9268-e8dbe4aeff68",
        "Name": "ICustomerProfileService.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "using CustomerProfileManager.Models;\nusing System.Threading.Tasks;\n\nnamespace CustomerProfileManager.Services\n{\n    public interface ICustomerProfileService\n    {\n        Task<CustomerProfile> GetProfileByIdAsync(int id);\n        Task<CustomerProfile> CreateProfileAsync(CustomerProfile profile);\n        Task<bool> UpdateProfileAsync(int id, CustomerProfile profile);\n        Task<bool> DeleteProfileAsync(int id);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "0878d161-113b-40f4-ad17-73a1b107e05e",
        "Name": "CustomerProfileService.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing CustomerProfileManager.Models;\nusing CustomerProfileManager.Data;\nusing CustomerProfileManager.Helpers;\n\nnamespace CustomerProfileManager.Services\n{\n    public class CustomerProfileService : ICustomerProfileService\n    {\n        private readonly CustomerProfileRepository _repository;\n\n        public CustomerProfileService(CustomerProfileRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<CustomerProfile> GetProfileByIdAsync(int id)\n        {\n            return await _repository.GetByIdAsync(id);\n        }\n\n        public async Task<CustomerProfile> CreateProfileAsync(CustomerProfile profile)\n        {\n            if (!string.IsNullOrEmpty(profile.EncryptedPersonalData))\n            {\n                profile.EncryptedPersonalData = EncryptionHelper.Encrypt(profile.EncryptedPersonalData);\n            }\n            return await _repository.CreateAsync(profile);\n        }\n\n        public async Task<bool> UpdateProfileAsync(int id, CustomerProfile profile)\n        {\n            if (!string.IsNullOrEmpty(profile.EncryptedPersonalData))\n            {\n                profile.EncryptedPersonalData = EncryptionHelper.Encrypt(profile.EncryptedPersonalData);\n            }\n            return await _repository.UpdateAsync(id, profile);\n        }\n\n        public async Task<bool> DeleteProfileAsync(int id)\n        {\n            return await _repository.DeleteAsync(id);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "fa20d5b5-fb89-4336-a6ad-ebc8f8c3155f",
        "Name": "Data",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d124d6c2-a5db-464c-9f0c-76f24927ac96",
        "Name": "CustomerProfileRepository.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing CustomerProfileManager.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace CustomerProfileManager.Data\n{\n    public class CustomerProfileRepository\n    {\n        private readonly CustomerProfileDbContext _context;\n\n        public CustomerProfileRepository(CustomerProfileDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<CustomerProfile> GetByIdAsync(int id)\n        {\n            return await _context.CustomerProfiles.FirstOrDefaultAsync(p => p.Id == id);\n        }\n\n        public async Task<CustomerProfile> CreateAsync(CustomerProfile profile)\n        {\n            _context.CustomerProfiles.Add(profile);\n            await _context.SaveChangesAsync();\n            return profile;\n        }\n\n        public async Task<bool> UpdateAsync(int id, CustomerProfile profile)\n        {\n            var existing = await _context.CustomerProfiles.FindAsync(id);\n            if (existing == null) return false;\n\n            existing.FullName = profile.FullName;\n            existing.Email = profile.Email;\n            existing.PhoneNumber = profile.PhoneNumber;\n            existing.Address = profile.Address;\n            existing.EncryptedPersonalData = profile.EncryptedPersonalData;\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteAsync(int id)\n        {\n            var profile = await _context.CustomerProfiles.FindAsync(id);\n            if (profile == null) return false;\n            _context.CustomerProfiles.Remove(profile);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "8e98d4d9-dd0b-47ed-af44-62d8f8d57630",
        "Name": "CustomerProfileDbContext.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing CustomerProfileManager.Models;\n\nnamespace CustomerProfileManager.Data\n{\n    public class CustomerProfileDbContext : DbContext\n    {\n        public CustomerProfileDbContext(DbContextOptions<CustomerProfileDbContext> options) : base(options)\n        {\n        }\n\n        public DbSet<CustomerProfile> CustomerProfiles { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c9a0d1ab-dcfc-479a-9c75-424e5ca7a3c6",
        "Name": "Helpers",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1eea33fd-2cc1-4bed-a42f-06db10c33ac6",
        "Name": "EncryptionHelper.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace CustomerProfileManager.Helpers\n{\n    public static class EncryptionHelper\n    {\n        private static readonly byte[] Key = Encoding.UTF8.GetBytes(\"A3F256789B1C57D9\");\n        private static readonly byte[] IV = Encoding.UTF8.GetBytes(\"1A2B3C4D5E6F7890\");\n\n        public static string Encrypt(string plainText)\n        {\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Key;\n                aesAlg.IV = IV;\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n                using (MemoryStream msEncrypt = new MemoryStream())\n                {\n                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n\n        public static string Decrypt(string cipherText)\n        {\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Key;\n                aesAlg.IV = IV;\n                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n                byte[] buffer = Convert.FromBase64String(cipherText);\n                using (MemoryStream msDecrypt = new MemoryStream(buffer))\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                {\n                    return srDecrypt.ReadToEnd();\n                }\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "23fabdb0-a309-41a6-8c10-aa3a9c89d949",
        "Name": "Configurations",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "960a5599-bf40-4a4e-be93-7f6484087b91",
        "Name": "CustomerProfileConfig.cs",
        "ParentId": "4500dbd4-0fca-4c6d-b15a-25639b3a0587",
        "Type": 1,
        "Text": "namespace CustomerProfileManager.Configurations\n{\n    public class CustomerProfileConfig\n    {\n        public int MaxProfileUpdateAttempts { get; set; }\n        public bool EnableAuditLogging { get; set; }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "57b1ee11-7741-460c-8006-68bc883bbeda",
    "Name": "KYCVerificationSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "3d4a0eac-a1ea-459d-8596-a0fd8aebc9f6",
        "Name": "Program.cs",
        "ParentId": "57b1ee11-7741-460c-8006-68bc883bbeda",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing KYCVerificationSystem.Services;\nusing KYCVerificationSystem.Repositories;\nusing KYCVerificationSystem.Infrastructure;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<IKycService, KycService>();\nbuilder.Services.AddScoped<ICustomerRepository, CustomerRepository>();\nbuilder.Services.AddSingleton<DocumentValidator>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "c20783c9-1f14-4707-aef1-d045a7958f87",
        "Name": "Controllers",
        "ParentId": "57b1ee11-7741-460c-8006-68bc883bbeda",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9ababc60-d9f9-4ab5-9d51-096e1e2c18ec",
        "Name": "Models",
        "ParentId": "57b1ee11-7741-460c-8006-68bc883bbeda",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d8259506-7dc1-4426-bcb3-42915d0c05e8",
        "Name": "Services",
        "ParentId": "57b1ee11-7741-460c-8006-68bc883bbeda",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fd8c1239-cf03-47f8-a941-1c034f52720a",
        "Name": "Repositories",
        "ParentId": "57b1ee11-7741-460c-8006-68bc883bbeda",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3e85c1cd-68e9-431b-a768-5965ac483c51",
        "Name": "Infrastructure",
        "ParentId": "57b1ee11-7741-460c-8006-68bc883bbeda",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "66c93de6-8de2-4ee6-b230-9b1671f3d397",
    "Name": "AMLComplianceChecker",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "1ab804ed-511c-4801-a68d-eaed6deb189c",
        "Name": "Program.cs",
        "ParentId": "66c93de6-8de2-4ee6-b230-9b1671f3d397",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing AMLComplianceChecker.Data;\nusing AMLComplianceChecker.Services;\nusing AMLComplianceChecker.Configurations;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddDbContext<AMLDbContext>(options =>\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"AMLDatabase\")));\n\nbuilder.Services.Configure<AMLSettings>(builder.Configuration.GetSection(\"AMLSettings\"));\nbuilder.Services.AddScoped<IAMLComplianceService, AMLComplianceService>();\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure middlewares\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "158bdbec-ea07-433e-85a0-5dffc55b9d36",
        "Name": "appsettings.json",
        "ParentId": "66c93de6-8de2-4ee6-b230-9b1671f3d397",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"AMLDatabase\": \"Server=.;Database=AMLComplianceDB;Trusted_Connection=True;\"\n  },\n  \"AMLSettings\": {\n    \"TransactionThreshold\": 10000,\n    \"SuspiciousCountryCodes\": [ \"XYZ\" ]\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  }\n}",
        "Language": 0
      },
      {
        "Id": "b119e855-cc0e-4dae-a0b3-50c2be710b72",
        "Name": "Controllers",
        "ParentId": "66c93de6-8de2-4ee6-b230-9b1671f3d397",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c72626ab-a440-4b02-add3-d47f9faa8f64",
        "Name": "Services",
        "ParentId": "66c93de6-8de2-4ee6-b230-9b1671f3d397",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "75e0df29-82b2-47d4-a5c5-1ed58d2e2233",
        "Name": "Data",
        "ParentId": "66c93de6-8de2-4ee6-b230-9b1671f3d397",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "54a518c7-7318-4e85-80cc-c2713425e690",
        "Name": "Configurations",
        "ParentId": "66c93de6-8de2-4ee6-b230-9b1671f3d397",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "cba05d7a-7762-49b8-9de1-b5abc1dc8b0c",
        "Name": "Models",
        "ParentId": "66c93de6-8de2-4ee6-b230-9b1671f3d397",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
    "Name": "AccountAggregationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "c179b7ef-951b-444f-a5d0-b7811884a6f2",
        "Name": "Program.cs",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace AccountAggregationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseStartup<Startup>();\n    }\n}",
        "Language": 0
      },
      {
        "Id": "2a78d4cf-2d7b-407f-9295-26ee41b6b2a2",
        "Name": "Startup.cs",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing AccountAggregationService.Interfaces;\nusing AccountAggregationService.Services;\nusing AccountAggregationService.Configurations;\nusing AccountAggregationService.Infrastructure;\n\nnamespace AccountAggregationService\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n\n            // Bind configuration settings\n            services.Configure<AggregationConfig>(Configuration.GetSection(\"AggregationConfig\"));\n\n            // Register the account aggregation service and HTTP client for data source integration\n            services.AddHttpClient<DataSourceClient>();\n            services.AddSingleton<IAccountAggregationService, AccountAggregationService.Services.AccountAggregationService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseRouting();\n            app.UseEndpoints(endpoints => { endpoints.MapControllers(); });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "09a90c88-74e5-48b7-bac7-8257264b07aa",
        "Name": "Controllers",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e4a4b6ca-a521-44c5-bc15-b836699b8886",
        "Name": "Interfaces",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7c55e72c-85b7-481b-ad62-d60d385b69a8",
        "Name": "Services",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0f46159f-a65f-45c0-a98b-33e931e4e9fc",
        "Name": "Models",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1103e7fd-ab8a-469a-afb5-4e509203623b",
        "Name": "Infrastructure",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "bd86cdda-85d1-49b4-9da9-3fed58ff020d",
        "Name": "Configurations",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5a58be03-b35a-4699-b1ce-cd75dba99fdc",
        "Name": "Logging",
        "ParentId": "9d9cd038-c25a-4ce8-9678-9bd5912c50c0",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
    "Name": "TransactionProcessingEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "96102ae3-63f1-4b9e-b9c0-5ffcc56566b5",
        "Name": "Program.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace TransactionProcessingEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c4b84d67-8b59-4601-9acc-c5954990872f",
        "Name": "Startup.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing TransactionProcessingEngine.Services;\nusing TransactionProcessingEngine.Repositories;\n\nnamespace TransactionProcessingEngine\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ITransactionRepository, TransactionRepository>();\n            services.AddScoped<ITransactionService, TransactionService>();\n            services.AddScoped<IAuditService, AuditService>();\n            services.AddScoped<IRiskAssessmentService, RiskAssessmentService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5f11e4d7-04a8-453e-9bc1-63ba7c866d58",
        "Name": "Controllers",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "703b5a9c-52c2-4da2-ab63-ee20149645d3",
        "Name": "TransactionController.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing TransactionProcessingEngine.Models;\nusing TransactionProcessingEngine.Services;\n\nnamespace TransactionProcessingEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TransactionController : ControllerBase\n    {\n        private readonly ITransactionService _transactionService;\n\n        public TransactionController(ITransactionService transactionService)\n        {\n            _transactionService = transactionService;\n        }\n\n        [HttpPost(\"process\")]\n        public IActionResult ProcessTransaction([FromBody] Transaction transaction)\n        {\n            bool result = _transactionService.ProcessTransaction(transaction);\n            if(result)\n            {\n                return Ok(new { Message = \"Transaction processed successfully\" });\n            }\n            return BadRequest(new { Message = \"Transaction processing failed\" });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "56ab0d34-9a3b-4003-8e20-b9c1af907f39",
        "Name": "Models",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3dfad48e-621e-4798-9d42-5d41dff8e1e5",
        "Name": "Transaction.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using System;\n\nnamespace TransactionProcessingEngine.Models\n{\n    public class Transaction\n    {\n        public Guid TransactionId { get; set; }\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n        public DateTime Date { get; set; }\n        public string FromAccount { get; set; }\n        public string ToAccount { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9420c8b5-332d-43da-b73b-8d9a317e3e93",
        "Name": "Account.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "namespace TransactionProcessingEngine.Models\n{\n    public class Account\n    {\n        public string AccountNumber { get; set; }\n        public decimal Balance { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6d8600d1-62f8-4d31-a708-670e623fa56a",
        "Name": "Customer.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "namespace TransactionProcessingEngine.Models\n{\n    public class Customer\n    {\n        public string CustomerId { get; set; }\n        public string Name { get; set; }\n        public string Email { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "acd2192f-832c-42c7-b01e-dfde4bd273d1",
        "Name": "Services",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a6a4ffc3-c580-471b-bb03-9e31eedbd3ad",
        "Name": "TransactionService.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using TransactionProcessingEngine.Models;\nusing TransactionProcessingEngine.Repositories;\n\nnamespace TransactionProcessingEngine.Services\n{\n    public interface ITransactionService\n    {\n        bool ProcessTransaction(Transaction transaction);\n    }\n\n    public class TransactionService : ITransactionService\n    {\n        private readonly ITransactionRepository _transactionRepository;\n        private readonly IAuditService _auditService;\n        private readonly IRiskAssessmentService _riskService;\n\n        public TransactionService(ITransactionRepository transactionRepository, IAuditService auditService, IRiskAssessmentService riskService)\n        {\n            _transactionRepository = transactionRepository;\n            _auditService = auditService;\n            _riskService = riskService;\n        }\n\n        public bool ProcessTransaction(Transaction transaction)\n        {\n            if (_riskService.AssessRisk(transaction))\n            {\n                bool saved = _transactionRepository.Save(transaction);\n                if (saved)\n                {\n                    _auditService.LogTransaction(transaction);\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "78e9020e-8e8c-4034-abef-e25204faa5dc",
        "Name": "AuditService.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using TransactionProcessingEngine.Models;\n\nnamespace TransactionProcessingEngine.Services\n{\n    public interface IAuditService\n    {\n        void LogTransaction(Transaction transaction);\n    }\n\n    public class AuditService : IAuditService\n    {\n        public void LogTransaction(Transaction transaction)\n        {\n            // Production-level audit logging implementation\n            System.Console.WriteLine($\"Audit Log: Transaction {transaction.TransactionId} processed with status {transaction.Status}\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a4909b59-e5ef-4c97-82b6-2e21c770ef78",
        "Name": "RiskAssessmentService.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using TransactionProcessingEngine.Models;\n\nnamespace TransactionProcessingEngine.Services\n{\n    public interface IRiskAssessmentService\n    {\n        bool AssessRisk(Transaction transaction);\n    }\n\n    public class RiskAssessmentService : IRiskAssessmentService\n    {\n        public bool AssessRisk(Transaction transaction)\n        {\n            // Implement production risk assessment logic\n            decimal threshold = 10000m;\n            return transaction.Amount <= threshold;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0a15e731-2e52-434f-a888-d98609ff0594",
        "Name": "Repositories",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a7ed4bb8-9d57-4edd-9996-2d978c1add7e",
        "Name": "TransactionRepository.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using TransactionProcessingEngine.Models;\nusing System.Collections.Generic;\n\nnamespace TransactionProcessingEngine.Repositories\n{\n    public interface ITransactionRepository\n    {\n        bool Save(Transaction transaction);\n    }\n\n    public class TransactionRepository : ITransactionRepository\n    {\n        private static readonly List<Transaction> _transactions = new List<Transaction>();\n\n        public bool Save(Transaction transaction)\n        {\n            _transactions.Add(transaction);\n            return true;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "98b78e87-a5a5-46ee-a174-e6d335ddb95a",
        "Name": "AccountRepository.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using TransactionProcessingEngine.Models;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace TransactionProcessingEngine.Repositories\n{\n    public interface IAccountRepository\n    {\n        Account GetAccount(string accountNumber);\n        bool UpdateAccount(Account account);\n    }\n\n    public class AccountRepository : IAccountRepository\n    {\n        private static readonly List<Account> _accounts = new List<Account>\n        {\n            new Account { AccountNumber = \"1234567890\", Balance = 100000m },\n            new Account { AccountNumber = \"0987654321\", Balance = 50000m }\n        };\n\n        public Account GetAccount(string accountNumber)\n        {\n            return _accounts.FirstOrDefault(a => a.AccountNumber == accountNumber);\n        }\n\n        public bool UpdateAccount(Account account)\n        {\n            var existing = _accounts.FirstOrDefault(a => a.AccountNumber == account.AccountNumber);\n            if (existing != null)\n            {\n                existing.Balance = account.Balance;\n                return true;\n            }\n            return false;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c5451750-9288-429c-8606-2bce32a53322",
        "Name": "Configurations",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6ea76b9c-c2f2-4f28-8462-81bf937267de",
        "Name": "AppSettings.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "namespace TransactionProcessingEngine.Configurations\n{\n    public class AppSettings\n    {\n        public string DatabaseConnectionString { get; set; }\n        public string AuditLogFile { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "893ff009-2049-4a2c-b7bd-4f8bbdc3bc19",
        "Name": "LoggingConfiguration.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "namespace TransactionProcessingEngine.Configurations\n{\n    public class LoggingConfiguration\n    {\n        public bool EnableLogging { get; set; }\n        public string LogLevel { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "769aebae-186b-4770-a450-92badd723532",
        "Name": "Utilities",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0fbb4b52-c641-48e2-815b-ef3bf87d6d11",
        "Name": "EncryptionHelper.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace TransactionProcessingEngine.Utilities\n{\n    public static class EncryptionHelper\n    {\n        public static string Encrypt(string plainText, string key)\n        {\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Encoding.UTF8.GetBytes(key.PadRight(32).Substring(0, 32));\n                aesAlg.GenerateIV();\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n                using (var ms = new System.IO.MemoryStream())\n                {\n                    ms.Write(aesAlg.IV, 0, aesAlg.IV.Length);\n                    using (var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    using (var sw = new System.IO.StreamWriter(cs))\n                    {\n                        sw.Write(plainText);\n                    }\n                    return Convert.ToBase64String(ms.ToArray());\n                }\n            }\n        }\n\n        public static string Decrypt(string cipherText, string key)\n        {\n            byte[] fullCipher = Convert.FromBase64String(cipherText);\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = Encoding.UTF8.GetBytes(key.PadRight(32).Substring(0, 32));\n                byte[] iv = new byte[aesAlg.BlockSize / 8];\n                Array.Copy(fullCipher, iv, iv.Length);\n                aesAlg.IV = iv;\n                int cipherTextLength = fullCipher.Length - iv.Length;\n                using (var ms = new System.IO.MemoryStream(fullCipher, iv.Length, cipherTextLength))\n                {\n                    ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n                    using (var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\n                    using (var sr = new System.IO.StreamReader(cs))\n                    {\n                        return sr.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b8f95ce2-b036-465c-aadf-8f84a76a1298",
        "Name": "NotificationService.cs",
        "ParentId": "27bfb3e8-a133-4e82-a51b-c71c627147fa",
        "Type": 1,
        "Text": "using System.Net;\nusing System.Net.Mail;\n\nnamespace TransactionProcessingEngine.Utilities\n{\n    public interface INotificationService\n    {\n        void SendNotification(string toEmail, string subject, string message);\n    }\n\n    public class NotificationService : INotificationService\n    {\n        public void SendNotification(string toEmail, string subject, string message)\n        {\n            var smtpClient = new SmtpClient(\"smtp.example.com\")\n            {\n                Port = 587,\n                Credentials = new NetworkCredential(\"noreply@example.com\", \"password\"),\n                EnableSsl = true,\n            };\n\n            var mailMessage = new MailMessage\n            {\n                From = new MailAddress(\"noreply@example.com\"),\n                Subject = subject,\n                Body = message,\n                IsBodyHtml = false,\n            };\n\n            mailMessage.To.Add(toEmail);\n            smtpClient.Send(mailMessage);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
    "Name": "TransactionHistoryViewer",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "7d296e24-29b9-4974-a097-520446a0dd3d",
        "Name": "Program.cs",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing TransactionHistoryViewer.Data;\nusing TransactionHistoryViewer.Repositories;\nusing TransactionHistoryViewer.Services;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace TransactionHistoryViewer\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var host = CreateHostBuilder(args).Build();\n            // Ensure database is created and migrated\n            using (var scope = host.Services.CreateScope())\n            {\n                var services = scope.ServiceProvider;\n                try\n                {\n                    var context = services.GetRequiredService<TransactionDbContext>();\n                    context.Database.Migrate();\n                }\n                catch (Exception ex)\n                {\n                    var logger = services.GetRequiredService<ILogger<Program>>();\n                    logger.LogError(ex, \"An error occurred during migration\");\n                    throw;\n                }\n            }\n            host.Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.ConfigureServices((context, services) =>\n                    {\n                        // Configure DbContext with connection string\n                        services.AddDbContext<TransactionDbContext>(options =>\n                            options.UseSqlServer(context.Configuration.GetConnectionString(\"DefaultConnection\")));\n\n                        // Register repository and service\n                        services.AddScoped<ITransactionRepository, TransactionRepository>();\n                        services.AddScoped<ITransactionService, TransactionService>();\n\n                        services.AddControllers();\n                        services.AddSwaggerGen();\n                    });\n                    webBuilder.Configure((context, app) =>\n                    {\n                        var env = context.HostingEnvironment;\n                        if (env.IsDevelopment())\n                        {\n                            app.UseDeveloperExceptionPage();\n                        }\n\n                        app.UseSwagger();\n                        app.UseSwaggerUI(c => { c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"TransactionHistoryViewer API V1\"); });\n\n                        app.UseRouting();\n\n                        app.UseAuthorization();\n\n                        app.UseEndpoints(endpoints =>\n                        {\n                            endpoints.MapControllers();\n                        });\n                    });\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1d1a0d33-da52-4a70-b4aa-775c72f61087",
        "Name": "appsettings.json",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=(localdb)\\\\MSSQLLocalDB;Database=TransactionHistoryDB;Trusted_Connection=True;MultipleActiveResultSets=true\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n",
        "Language": 0
      },
      {
        "Id": "ee3e0de3-982c-482c-a948-84cfe7723fbd",
        "Name": "Controllers",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f76f8f44-477c-4584-9a1e-b054862c864e",
        "Name": "TransactionHistoryController.cs",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing TransactionHistoryViewer.Services;\n\nnamespace TransactionHistoryViewer.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TransactionHistoryController : ControllerBase\n    {\n        private readonly ITransactionService _transactionService;\n        private readonly ILogger<TransactionHistoryController> _logger;\n\n        public TransactionHistoryController(ITransactionService transactionService, ILogger<TransactionHistoryController> logger)\n        {\n            _transactionService = transactionService;\n            _logger = logger;\n        }\n\n        [HttpGet(\"{userId}\")]\n        public async Task<IActionResult> GetTransactionHistory(Guid userId)\n        {\n            try\n            {\n                var transactions = await _transactionService.GetTransactionsByUserAsync(userId);\n                if (transactions == null || !transactions.Any())\n                {\n                    return NotFound($\"No transactions found for user {userId}\");\n                }\n                return Ok(transactions);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error retrieving transaction history for user {UserId}\", userId);\n                return StatusCode(500, \"An error occurred while retrieving transaction history.\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e56ef3a9-9282-4bc8-a3a6-f55ded663601",
        "Name": "Models",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e0e3b8f1-f199-4a14-bddd-a0e6f195a18c",
        "Name": "Transaction.cs",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "using System;\n\nnamespace TransactionHistoryViewer.Models\n{\n    public class Transaction\n    {\n        public Guid TransactionId { get; set; }\n        public Guid UserId { get; set; }\n        public DateTime TransactionDate { get; set; }\n        public decimal Amount { get; set; }\n        public string Description { get; set; }\n        public string TransactionType { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "2bac2ffb-a8e4-4d09-97d3-9f4b89905bd7",
        "Name": "Data",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3633aba5-8bd7-4b5f-94ea-93cf6df4a1b0",
        "Name": "TransactionDbContext.cs",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing TransactionHistoryViewer.Models;\n\nnamespace TransactionHistoryViewer.Data\n{\n    public class TransactionDbContext : DbContext\n    {\n        public TransactionDbContext(DbContextOptions<TransactionDbContext> options) : base(options) { }\n\n        public DbSet<Transaction> Transactions { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Transaction>(entity =>\n            {\n                entity.HasKey(t => t.TransactionId);\n                entity.Property(t => t.Description).HasMaxLength(500);\n                entity.Property(t => t.TransactionType).IsRequired();\n                entity.Property(t => t.Amount).HasColumnType(\"decimal(18,2)\");\n                entity.Property(t => t.TransactionDate).IsRequired();\n            });\n            base.OnModelCreating(modelBuilder);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "93512310-27ea-474e-83d3-63b92b2cd5fc",
        "Name": "Repositories",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d8ced9a9-de85-4489-b3b8-c9c938d597d2",
        "Name": "ITransactionRepository.cs",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing TransactionHistoryViewer.Models;\n\nnamespace TransactionHistoryViewer.Repositories\n{\n    public interface ITransactionRepository\n    {\n        Task<IEnumerable<Transaction>> GetTransactionsByUserAsync(Guid userId);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9fb639b9-93da-48a2-b181-f7089bee516a",
        "Name": "TransactionRepository.cs",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing TransactionHistoryViewer.Data;\nusing TransactionHistoryViewer.Models;\n\nnamespace TransactionHistoryViewer.Repositories\n{\n    public class TransactionRepository : ITransactionRepository\n    {\n        private readonly TransactionDbContext _context;\n\n        public TransactionRepository(TransactionDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<IEnumerable<Transaction>> GetTransactionsByUserAsync(Guid userId)\n        {\n            return await _context.Transactions\n                .Where(t => t.UserId == userId)\n                .OrderByDescending(t => t.TransactionDate)\n                .ToListAsync();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a60bb15c-d1e8-47fc-ba9c-69c1d70b258c",
        "Name": "Services",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1c8ea6c6-47b6-4aa5-8385-b8b9419773c7",
        "Name": "ITransactionService.cs",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing TransactionHistoryViewer.Models;\n\nnamespace TransactionHistoryViewer.Services\n{\n    public interface ITransactionService\n    {\n        Task<IEnumerable<Transaction>> GetTransactionsByUserAsync(Guid userId);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a0c289df-62e6-4b50-8055-fa3292f01f7f",
        "Name": "TransactionService.cs",
        "ParentId": "3fab1161-58e9-4a53-a362-ce2c9b8bacf6",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing TransactionHistoryViewer.Models;\nusing TransactionHistoryViewer.Repositories;\n\nnamespace TransactionHistoryViewer.Services\n{\n    public class TransactionService : ITransactionService\n    {\n        private readonly ITransactionRepository _transactionRepository;\n\n        public TransactionService(ITransactionRepository transactionRepository)\n        {\n            _transactionRepository = transactionRepository;\n        }\n\n        public async Task<IEnumerable<Transaction>> GetTransactionsByUserAsync(Guid userId)\n        {\n            // Additional business logic can be implemented here if necessary\n            return await _transactionRepository.GetTransactionsByUserAsync(userId);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
    "Name": "PaymentGatewayConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "386332bd-66dd-4cbb-a5c9-97593d960ef1",
        "Name": "PaymentGatewayConnector.csproj",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />\n  </ItemGroup>\n</Project>\n",
        "Language": 0
      },
      {
        "Id": "30f9750b-1329-4a02-b48f-2fa7d9e1b904",
        "Name": "Program.cs",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing PaymentGatewayConnector.Interfaces;\nusing PaymentGatewayConnector.Adapters;\nusing PaymentGatewayConnector.Services;\nusing PaymentGatewayConnector.Configuration;\nusing PaymentGatewayConnector.Utilities;\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        var host = Host.CreateDefaultBuilder(args)\n            .ConfigureServices((context, services) =>\n            {\n                // Configure Payment Gateway settings\n                var config = new PaymentGatewayConfiguration\n                {\n                    ApiKey = \"YourApiKey\",\n                    Endpoint = \"https://api.stripe.com\"\n                };\n                services.AddSingleton(config);\n                services.AddHttpClient();\n                services.AddSingleton<IHttpClientFactoryWrapper, HttpClientFactoryWrapper>();\n                services.AddTransient<IPaymentGatewayAdapter, StripePaymentGatewayAdapter>();\n                services.AddTransient<PaymentService>();\n            })\n            .Build();\n\n        var paymentService = host.Services.GetRequiredService<PaymentService>();\n\n        var paymentRequest = new PaymentGatewayConnector.Models.PaymentRequest\n        {\n            Amount = 100.00m,\n            Currency = \"USD\",\n            PaymentMethod = \"card\",\n            CardNumber = \"4242424242424242\",\n            CardExpiry = \"12/25\",\n            CardCvv = \"123\"\n        };\n\n        try\n        {\n            var response = await paymentService.ProcessPaymentAsync(paymentRequest);\n            Console.WriteLine(response.IsSuccessful\n                ? $\"Payment succeeded. Transaction ID: {response.TransactionId}\"\n                : $\"Payment failed. Error: {response.ErrorMessage}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Payment processing exception: {ex.Message}\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "59f00071-c58b-45d3-b599-cc155f27076e",
        "Name": "Interfaces",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "63e5d269-8cd6-4091-adc0-cdda9a993687",
        "Name": "Adapters",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c9f53cfc-bde2-4507-88a2-a7b7b14bfd98",
        "Name": "Models",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3e221d74-b494-4505-91d8-607a8e928aa1",
        "Name": "Services",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d2d37081-4b2d-41ab-9dc4-c37a1afaad17",
        "Name": "Configuration",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6de8938e-12aa-46d3-93fe-004310c96f65",
        "Name": "Exceptions",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b8aa893a-d556-4bc2-9b58-297c65860ed0",
        "Name": "Utilities",
        "ParentId": "51c01c4a-c550-4acf-98cd-4fc2546f25dc",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
    "Name": "RefundProcessingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "f3d76268-6aea-4b73-95ed-b298f6b2cc93",
        "Name": "Controllers",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f4eeaf7e-e59c-4b81-9021-b5b23c0c7dd0",
        "Name": "RefundController.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing RefundProcessingService.Services;\nusing RefundProcessingService.Domain.Entities;\n\nnamespace RefundProcessingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RefundController : ControllerBase\n    {\n        private readonly IRefundService _refundService;\n        public RefundController(IRefundService refundService)\n        {\n            _refundService = refundService;\n        }\n\n        [HttpPost(\"initiate\")]\n        public ActionResult<Refund> InitiateRefund([FromBody] Refund refund)\n        {\n            var result = _refundService.ProcessRefund(refund);\n            return Ok(result);\n        }\n\n        [HttpGet(\"{refundId}\")]\n        public ActionResult<Refund> GetRefundDetails(Guid refundId)\n        {\n            var refund = _refundService.GetRefund(refundId);\n            if (refund == null)\n            {\n                return NotFound();\n            }\n            return Ok(refund);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3240cbb7-4f70-48df-a08f-0cd3bb8557b5",
        "Name": "Domain",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "74da869c-2926-4ca9-86cc-cd28cff721b9",
        "Name": "Entities",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "50d4aaa2-b178-4acb-b132-9cf7edbfa80a",
        "Name": "Refund.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using System;\n\nnamespace RefundProcessingService.Domain.Entities\n{\n    public class Refund\n    {\n        public Guid RefundId { get; set; }\n        public Guid TransactionId { get; set; }\n        public Money Amount { get; set; }\n        public DateTime InitiatedAt { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1462f417-3387-4940-b2ea-d4a2939ee7a8",
        "Name": "Money.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "namespace RefundProcessingService.Domain.Entities\n{\n    public class Money\n    {\n        public decimal Amount { get; set; }\n        public string Currency { get; set; } = \"USD\";\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "627b7425-b775-4d14-a14d-434e86453df3",
        "Name": "Services",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "83178af5-7d3e-4f0e-b5ff-9c5390cbcaeb",
        "Name": "IRefundService.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using System;\nusing RefundProcessingService.Domain.Entities;\n\nnamespace RefundProcessingService.Services\n{\n    public interface IRefundService\n    {\n        Refund ProcessRefund(Refund refund);\n        Refund GetRefund(Guid refundId);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "21cfefcf-911f-4d91-a19e-dc74e5b6de07",
        "Name": "RefundService.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using System;\nusing RefundProcessingService.Domain.Entities;\nusing RefundProcessingService.Repositories;\nusing RefundProcessingService.Integration;\nusing RefundProcessingService.Infrastructure;\n\nnamespace RefundProcessingService.Services\n{\n    public class RefundService : IRefundService\n    {\n        private readonly IRefundRepository _refundRepository;\n        private readonly IPaymentGatewayClient _paymentGatewayClient;\n        private readonly Logger _logger;\n        \n        public RefundService(IRefundRepository refundRepository, IPaymentGatewayClient paymentGatewayClient, Logger logger)\n        {\n            _refundRepository = refundRepository;\n            _paymentGatewayClient = paymentGatewayClient;\n            _logger = logger;\n        }\n        \n        public Refund ProcessRefund(Refund refund)\n        {\n            refund.RefundId = Guid.NewGuid();\n            refund.InitiatedAt = DateTime.UtcNow;\n            refund.Status = \"Pending\";\n            \n            // Integrate with external payment gateway to process the refund\n            bool success = _paymentGatewayClient.InitiateRefund(refund.TransactionId, refund.Amount.Amount, refund.Amount.Currency);\n            refund.Status = success ? \"Processed\" : \"Failed\";\n            \n            _refundRepository.SaveRefund(refund);\n            _logger.LogInfo($\"Refund processed: {refund.RefundId}, Status: {refund.Status}\");\n            return refund;\n        }\n        \n        public Refund GetRefund(Guid refundId)\n        {\n            return _refundRepository.GetRefundById(refundId);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "10382bd1-df00-4fe7-b621-d214dee3b695",
        "Name": "Repositories",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fe98c259-a099-40e1-a3fc-48595278a291",
        "Name": "IRefundRepository.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using System;\nusing RefundProcessingService.Domain.Entities;\n\nnamespace RefundProcessingService.Repositories\n{\n    public interface IRefundRepository\n    {\n        void SaveRefund(Refund refund);\n        Refund GetRefundById(Guid refundId);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "45bc2566-b331-41d0-8c6c-482c5bac1c89",
        "Name": "Infrastructure",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "39dc9aa6-1404-4310-90d0-5c3646bc47e4",
        "Name": "RefundRepository.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Concurrent;\nusing RefundProcessingService.Domain.Entities;\n\nnamespace RefundProcessingService.Repositories\n{\n    public class RefundRepository : IRefundRepository\n    {\n        private static readonly ConcurrentDictionary<Guid, Refund> _refundStore = new ConcurrentDictionary<Guid, Refund>();\n        \n        public void SaveRefund(Refund refund)\n        {\n            _refundStore[refund.RefundId] = refund;\n        }\n        \n        public Refund GetRefundById(Guid refundId)\n        {\n            _refundStore.TryGetValue(refundId, out var refund);\n            return refund;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3fbb8597-8bba-4060-aece-cc0f7b2d71f1",
        "Name": "Logger.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace RefundProcessingService.Infrastructure\n{\n    public class Logger\n    {\n        private readonly ILogger<Logger> _logger;\n        \n        public Logger(ILogger<Logger> logger)\n        {\n            _logger = logger;\n        }\n        \n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n        \n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8c98151c-7ff3-4d74-a45d-009c81ae6c30",
        "Name": "Integration",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7e28922f-5c86-4be1-9d36-29dcd3086e58",
        "Name": "PaymentGatewayClient.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using System;\nusing RefundProcessingService.Domain.Entities;\n\nnamespace RefundProcessingService.Integration\n{\n    public interface IPaymentGatewayClient\n    {\n        bool InitiateRefund(Guid transactionId, decimal amount, string currency);\n    }\n    \n    public class PaymentGatewayClient : IPaymentGatewayClient\n    {\n        public bool InitiateRefund(Guid transactionId, decimal amount, string currency)\n        {\n            // In a production environment, this method would perform a secure API call to the external payment processor\n            // and handle responses and error conditions appropriately.\n            if (amount > 0)\n            {\n                return true;\n            }\n            return false;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8b8a54a6-08df-416f-9f81-a4f2996b6a2a",
        "Name": "Program.cs",
        "ParentId": "286b6570-49b3-41ea-a1cc-6ec5c3a7b7fa",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing RefundProcessingService.Services;\nusing RefundProcessingService.Repositories;\nusing RefundProcessingService.Infrastructure;\nusing RefundProcessingService.Integration;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the DI container\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<IRefundService, RefundService>();\nbuilder.Services.AddScoped<IRefundRepository, RefundRepository>();\nbuilder.Services.AddScoped<IPaymentGatewayClient, PaymentGatewayClient>();\nbuilder.Services.AddScoped<Logger>();\n\nbuilder.Services.AddLogging(loggingBuilder => {\n    loggingBuilder.AddConsole();\n    loggingBuilder.AddDebug();\n});\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => {\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "ce408232-5c0f-43ef-9036-84dce37ab89a",
    "Name": "FraudDetectionSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b81db76e-5733-42aa-b128-3ed6b27a9754",
        "Name": "Program.cs",
        "ParentId": "ce408232-5c0f-43ef-9036-84dce37ab89a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing FraudDetectionSystem.Infrastructure.Data;\nusing FraudDetectionSystem.Core.Interfaces;\nusing FraudDetectionSystem.Infrastructure.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Register controllers\nbuilder.Services.AddControllers();\n\n// Configure Entity Framework with SQL Server\nbuilder.Services.AddDbContext<FraudDetectionDbContext>(options =>\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\")));\n\n// Register application services\nbuilder.Services.AddScoped<IFraudDetector, FraudDetectorService>();\nbuilder.Services.AddScoped<ITransactionAnalyzer, TransactionAnalyzerService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "e4cd5e42-989c-4c5e-baf2-050b6ad4186b",
        "Name": "Core",
        "ParentId": "ce408232-5c0f-43ef-9036-84dce37ab89a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "23dd2ed6-64eb-4577-9435-d64ae272389a",
        "Name": "Infrastructure",
        "ParentId": "ce408232-5c0f-43ef-9036-84dce37ab89a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1f75d909-5feb-4728-abe6-7da4fd7f0b53",
        "Name": "API",
        "ParentId": "ce408232-5c0f-43ef-9036-84dce37ab89a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "46ffb5f6-e355-4640-ae8a-d5740e8bfb83",
        "Name": "Utils",
        "ParentId": "ce408232-5c0f-43ef-9036-84dce37ab89a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "379accf1-fc7b-465d-9a1e-a5669d26a08c",
        "Name": "Config",
        "ParentId": "ce408232-5c0f-43ef-9036-84dce37ab89a",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
    "Name": "RiskAssessmentEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "95eb2fa7-67e9-4dab-9b56-5e3fea2828a5",
        "Name": "RiskAssessmentEngine.csproj",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n</Project>",
        "Language": 0
      },
      {
        "Id": "19050c96-7655-4c84-b408-d14c8a4e37bf",
        "Name": "Program.cs",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "38d84885-522d-4d2b-8c35-2a24521666a7",
        "Name": "Models",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fc83bd24-82a3-4bc2-b253-4100aa498bfc",
        "Name": "Transaction.cs",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 1,
        "Text": "using System;\n\nnamespace RiskAssessmentEngine.Models\n{\n    public class Transaction\n    {\n        public Guid Id { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Type { get; set; } = string.Empty;\n    }\n}",
        "Language": 0
      },
      {
        "Id": "394e09d5-97a3-4921-ab76-c764eb3674bf",
        "Name": "Customer.cs",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 1,
        "Text": "using System;\n\nnamespace RiskAssessmentEngine.Models\n{\n    public class Customer\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public string AccountStatus { get; set; } = string.Empty;\n        public DateTime DateOfBirth { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b63d2267-1e21-4ba8-b754-8103e34a826d",
        "Name": "RiskScore.cs",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 1,
        "Text": "namespace RiskAssessmentEngine.Models\n{\n    public class RiskScore\n    {\n        public decimal Score { get; }\n        public string RiskCategory { get; }\n\n        public RiskScore(decimal score, string riskCategory)\n        {\n            Score = score;\n            RiskCategory = riskCategory;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "0f90288a-94c0-4144-b15c-af7fe91e31c4",
        "Name": "Services",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d71d2fc6-05e3-474a-ad30-45b23e58515c",
        "Name": "RiskAssessmentService.cs",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 1,
        "Text": "using System;\nusing RiskAssessmentEngine.Models;\nusing RiskAssessmentEngine.Utilities;\n\nnamespace RiskAssessmentEngine.Services\n{\n    public class RiskAssessmentService\n    {\n        public RiskScore EvaluateTransactionRisk(Transaction transaction)\n        {\n            if (transaction == null)\n                throw new ArgumentNullException(nameof(transaction));\n\n            decimal score = 0m;\n            // Evaluate risk based on transaction amount\n            if (transaction.Amount > 10000m)\n                score += 50m;\n            else if (transaction.Amount > 5000m)\n                score += 30m;\n            else\n                score += 10m;\n\n            // Additional weighting if transaction type is considered higher risk\n            if (!string.IsNullOrWhiteSpace(transaction.Type) && transaction.Type.Equals(\"international transfer\", StringComparison.OrdinalIgnoreCase))\n                score += 20m;\n\n            // Ensure score does not exceed 100\n            if (score > 100m)\n                score = 100m;\n\n            string category = score >= 75m ? \"High\" : score >= 40m ? \"Medium\" : \"Low\";\n\n            // Log the assessment\n            RiskLogger.Log($\"Transaction {transaction.Id} assessed with risk category '{category}' and score {score}.\");\n\n            return new RiskScore(score, category);\n        }\n\n        public RiskScore EvaluateCustomerRisk(Customer customer)\n        {\n            if (customer == null)\n                throw new ArgumentNullException(nameof(customer));\n\n            decimal score = 0m;\n            // Account status impact\n            if (!string.IsNullOrWhiteSpace(customer.AccountStatus) && customer.AccountStatus.Equals(\"new\", StringComparison.OrdinalIgnoreCase))\n                score += 30m;\n\n            // Age-based risk factor\n            int age = DateTime.Today.Year - customer.DateOfBirth.Year;\n            if (customer.DateOfBirth > DateTime.Today.AddYears(-age))\n                age--;\n            if (age < 25 || age > 65)\n                score += 20m;\n\n            if (score > 100m)\n                score = 100m;\n\n            string category = score >= 75m ? \"High\" : score >= 40m ? \"Medium\" : \"Low\";\n\n            // Log the assessment\n            RiskLogger.Log($\"Customer {customer.Id} assessed with risk category '{category}' and score {score}.\");\n\n            return new RiskScore(score, category);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "97c8b735-6b5f-452a-a7ab-478038ce1325",
        "Name": "Controllers",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ed503760-c44e-4304-a372-3047695c1719",
        "Name": "RiskController.cs",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing RiskAssessmentEngine.Models;\nusing RiskAssessmentEngine.Services;\n\nnamespace RiskAssessmentEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RiskController : ControllerBase\n    {\n        private readonly RiskAssessmentService _riskService;\n\n        public RiskController()\n        {\n            _riskService = new RiskAssessmentService();\n        }\n\n        [HttpPost(\"transaction\")]\n        public IActionResult AssessTransactionRisk([FromBody] Transaction transaction)\n        {\n            try\n            {\n                var riskScore = _riskService.EvaluateTransactionRisk(transaction);\n                return Ok(riskScore);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"customer\")]\n        public IActionResult AssessCustomerRisk([FromBody] Customer customer)\n        {\n            try\n            {\n                var riskScore = _riskService.EvaluateCustomerRisk(customer);\n                return Ok(riskScore);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(new { error = ex.Message });\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "36fb9ec7-8f5e-423b-9b1b-1b663bb00593",
        "Name": "Utilities",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4a2f50b1-9343-4689-b3e4-da8ccc1a9ebc",
        "Name": "RiskLogger.cs",
        "ParentId": "6be9a360-07c6-4cf4-8ee4-4e723a4b9915",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\n\nnamespace RiskAssessmentEngine.Utilities\n{\n    public static class RiskLogger\n    {\n        private static readonly string LogFilePath = \"riskassessment.log\";\n\n        public static void Log(string message)\n        {\n            string logEntry = $\"{DateTime.UtcNow:O} - {message}\";\n            try\n            {\n                File.AppendAllText(LogFilePath, logEntry + Environment.NewLine);\n            }\n            catch (IOException)\n            {\n                // In production, handle logging failures appropriately\n                // by possibly writing to an alternate store or alerting.\n            }\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
    "Name": "AuditLoggingSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "10f9ca31-8836-4064-a9d2-1b75b0fdeee1",
        "Name": "AuditLoggingSystem.sln",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 1,
        "Text": "",
        "Language": 0
      },
      {
        "Id": "5199d444-61e0-4203-8846-45fcb569273e",
        "Name": "AuditLoggingSystem.API",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c0e5da5c-1922-4840-9fda-14a8cd281fd3",
        "Name": "Program.cs",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace AuditLoggingSystem.API\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a90f00dd-45d7-424a-b794-26816cd671e6",
        "Name": "Startup.cs",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing AuditLoggingSystem.Data;\nusing AuditLoggingSystem.Services;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace AuditLoggingSystem.API\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<AuditContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"AuditDatabase\")));\n            services.AddScoped<IAuditRepository, AuditRepository>();\n            services.AddScoped<IAuditService, AuditService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "ead5a747-93f8-4642-8b6d-1de6ef5e7687",
        "Name": "AuditLoggingSystem.Domain",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "17e92def-209a-49b8-95b7-789f1b845492",
        "Name": "AuditRecord.cs",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 1,
        "Text": "using System;\n\nnamespace AuditLoggingSystem.Domain\n{\n    public class AuditRecord\n    {\n        public int Id { get; set; }\n        public string Event { get; set; }\n        public string Actor { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Details { get; set; }\n        public string IpAddress { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e43eff0d-527e-467a-ac50-d78ca3ab11a0",
        "Name": "AuditLoggingSystem.Data",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1915231e-f2dc-4a0e-a941-1ab42cf0e20d",
        "Name": "AuditContext.cs",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing AuditLoggingSystem.Domain;\n\nnamespace AuditLoggingSystem.Data\n{\n    public class AuditContext : DbContext\n    {\n        public AuditContext(DbContextOptions<AuditContext> options) : base(options)\n        {\n        }\n\n        public DbSet<AuditRecord> AuditRecords { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<AuditRecord>(entity =>\n            {\n                entity.HasKey(e => e.Id);\n                entity.Property(e => e.Event).IsRequired().HasMaxLength(100);\n                entity.Property(e => e.Actor).IsRequired().HasMaxLength(50);\n                entity.Property(e => e.Timestamp).IsRequired();\n                entity.Property(e => e.Details).HasMaxLength(1000);\n                entity.Property(e => e.IpAddress).HasMaxLength(45);\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "1e3634b0-818b-4bac-9d78-85f08abf7163",
        "Name": "AuditRepository.cs",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AuditLoggingSystem.Domain;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace AuditLoggingSystem.Data\n{\n    public interface IAuditRepository\n    {\n        Task AddAuditRecordAsync(AuditRecord record);\n        Task<List<AuditRecord>> GetAuditRecordsAsync();\n    }\n\n    public class AuditRepository : IAuditRepository\n    {\n        private readonly AuditContext _context;\n\n        public AuditRepository(AuditContext context)\n        {\n            _context = context;\n        }\n\n        public async Task AddAuditRecordAsync(AuditRecord record)\n        {\n            await _context.AuditRecords.AddAsync(record);\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<List<AuditRecord>> GetAuditRecordsAsync()\n        {\n            return await _context.AuditRecords.ToListAsync();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b4c53fc5-8c3c-4b8d-97ad-479450a291c8",
        "Name": "AuditLoggingSystem.Services",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d31f8a18-65ad-4087-8a65-3bf32c4e159f",
        "Name": "AuditService.cs",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AuditLoggingSystem.Data;\nusing AuditLoggingSystem.Domain;\n\nnamespace AuditLoggingSystem.Services\n{\n    public interface IAuditService\n    {\n        Task RecordEventAsync(string eventName, string actor, string details, string ipAddress);\n        Task<List<AuditRecord>> GetAllAuditRecordsAsync();\n    }\n\n    public class AuditService : IAuditService\n    {\n        private readonly IAuditRepository _auditRepository;\n\n        public AuditService(IAuditRepository auditRepository)\n        {\n            _auditRepository = auditRepository;\n        }\n\n        public async Task RecordEventAsync(string eventName, string actor, string details, string ipAddress)\n        {\n            var auditRecord = new AuditRecord\n            {\n                Event = eventName,\n                Actor = actor,\n                Timestamp = DateTime.UtcNow,\n                Details = details,\n                IpAddress = ipAddress\n            };\n            await _auditRepository.AddAuditRecordAsync(auditRecord);\n        }\n\n        public async Task<List<AuditRecord>> GetAllAuditRecordsAsync()\n        {\n            return await _auditRepository.GetAuditRecordsAsync();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0ee4f06d-1a26-4221-9e50-0a01d84e5756",
        "Name": "AuditLoggingSystem.Tests",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4031af8a-a50e-4909-9b76-76e4e6dc8115",
        "Name": "AuditServiceTests.cs",
        "ParentId": "9be9a74e-ad76-4e11-a6e7-0e4d066fafbb",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AuditLoggingSystem.Domain;\nusing AuditLoggingSystem.Services;\nusing AuditLoggingSystem.Data;\nusing Moq;\nusing Xunit;\n\nnamespace AuditLoggingSystem.Tests\n{\n    public class AuditServiceTests\n    {\n        [Fact]\n        public async Task RecordEventAsync_ShouldAddAuditRecord()\n        {\n            // Arrange\n            var repositoryMock = new Mock<IAuditRepository>();\n            var auditService = new AuditService(repositoryMock.Object);\n            string eventName = \"TransactionProcessed\";\n            string actor = \"User123\";\n            string details = \"Processed a transaction of $1000.\";\n            string ipAddress = \"192.168.1.1\";\n\n            // Act\n            await auditService.RecordEventAsync(eventName, actor, details, ipAddress);\n\n            // Assert\n            repositoryMock.Verify(r => r.AddAuditRecordAsync(It.Is<AuditRecord>(a => \n                a.Event == eventName && \n                a.Actor == actor && \n                a.Details == details && \n                a.IpAddress == ipAddress)), Times.Once);\n        }\n\n        [Fact]\n        public async Task GetAllAuditRecordsAsync_ShouldReturnRecords()\n        {\n            // Arrange\n            var repositoryMock = new Mock<IAuditRepository>();\n            var auditRecords = new List<AuditRecord>\n            {\n                new AuditRecord { Id = 1, Event = \"Login\", Actor = \"UserA\", Timestamp = DateTime.UtcNow, Details = \"User login successful.\", IpAddress = \"127.0.0.1\" }\n            };\n            repositoryMock.Setup(r => r.GetAuditRecordsAsync()).ReturnsAsync(auditRecords);\n            var auditService = new AuditService(repositoryMock.Object);\n\n            // Act\n            var result = await auditService.GetAllAuditRecordsAsync();\n\n            // Assert\n            Assert.Single(result);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "7252af88-0619-4399-804a-b728d39fa682",
    "Name": "RegulatoryReportingTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "ce58a46f-679c-4de3-baa8-8b8d8649f899",
        "Name": "RegulatoryReportingTool.sln",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 1,
        "Text": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.31903.59\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"RegulatoryReportingTool\", \"src\\RegulatoryReportingTool\\RegulatoryReportingTool.csproj\", \"{D3C3B7D0-9F4D-4C0C-A3C7-B89D3E5E7A1B}\"\nEndProject\nGlobal\n    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n        Debug|Any CPU = Debug|Any CPU\n        Release|Any CPU = Release|Any CPU\n    EndGlobalSection\nEndGlobal",
        "Language": 0
      },
      {
        "Id": "0389b813-88ac-4526-aa47-4e839e63679a",
        "Name": "Program.cs",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 1,
        "Text": "using System;\nusing RegulatoryReportingTool.Controllers;\nusing RegulatoryReportingTool.Services;\nusing RegulatoryReportingTool.Models;\n\nnamespace RegulatoryReportingTool\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            IReportService reportService = new ReportService();\n            ReportController controller = new ReportController(reportService);\n            Report report = controller.GenerateReport();\n            Console.WriteLine(\"Report Summary: \" + report.Summary);\n            Console.WriteLine(\"Report Details: \" + report.Details);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "8c5055c5-cf54-495f-8a4c-0436981b64b3",
        "Name": "src",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2dc47921-c202-4013-8fb0-266647011bb6",
        "Name": "src/RegulatoryReportingTool",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "cf2aa0f5-74d7-4fad-8b4a-d6bd0c53ce0c",
        "Name": "src/RegulatoryReportingTool/Controllers",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9b793c8d-66eb-493a-877e-2712cd63ee9f",
        "Name": "ReportController.cs",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 1,
        "Text": "using RegulatoryReportingTool.Services;\nusing RegulatoryReportingTool.Models;\n\nnamespace RegulatoryReportingTool.Controllers\n{\n    public class ReportController\n    {\n        private readonly IReportService _reportService;\n\n        public ReportController(IReportService reportService)\n        {\n            _reportService = reportService;\n        }\n\n        public Report GenerateReport()\n        {\n            return _reportService.CreateRegulatoryReport();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a737bf7e-40a7-471b-8e67-0ec36ce40937",
        "Name": "src/RegulatoryReportingTool/Services",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8ae6d3e3-0619-4610-b7ce-6369f9a396f6",
        "Name": "IReportService.cs",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 1,
        "Text": "using RegulatoryReportingTool.Models;\n\nnamespace RegulatoryReportingTool.Services\n{\n    public interface IReportService\n    {\n        Report CreateRegulatoryReport();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a2ffb08f-e8da-4369-808a-d00fea9ac177",
        "Name": "ReportService.cs",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 1,
        "Text": "using RegulatoryReportingTool.Models;\nusing RegulatoryReportingTool.Utilities;\n\nnamespace RegulatoryReportingTool.Services\n{\n    public class ReportService : IReportService\n    {\n        public Report CreateRegulatoryReport()\n        {\n            // Utilize the ReportGenerator to produce a regulatory report\n            Report report = ReportGenerator.Generate();\n            return report;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "217328d4-39cd-4c53-9cd2-fedaf043350d",
        "Name": "src/RegulatoryReportingTool/Models",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0fbafeb5-6c19-4d62-8ea1-ef9bcc3ca4e8",
        "Name": "Report.cs",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 1,
        "Text": "namespace RegulatoryReportingTool.Models\n{\n    public class Report\n    {\n        public string Summary { get; set; }\n        public string Details { get; set; }\n\n        public Report(string summary, string details)\n        {\n            Summary = summary;\n            Details = details;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "42c1189c-c77e-4a49-ad5f-c3f46478236b",
        "Name": "src/RegulatoryReportingTool/Utilities",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b480484e-15a3-4e0f-9c6e-2890043d162b",
        "Name": "ReportGenerator.cs",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 1,
        "Text": "using System;\nusing RegulatoryReportingTool.Models;\n\nnamespace RegulatoryReportingTool.Utilities\n{\n    public static class ReportGenerator\n    {\n        public static Report Generate()\n        {\n            // Generate a comprehensive report for regulatory compliance\n            string summary = \"Regulatory Compliance Report - Summary\";\n            string details = $\"Report generated at {DateTime.UtcNow} with detailed compliance metrics.\";\n            return new Report(summary, details);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "985d5e8f-4b3a-4ff2-85db-f721830142e4",
        "Name": "Tests",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a7b10253-9894-4f32-8273-2b8fbfcd120c",
        "Name": "ReportServiceTests.cs",
        "ParentId": "7252af88-0619-4399-804a-b728d39fa682",
        "Type": 1,
        "Text": "using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing RegulatoryReportingTool.Services;\nusing RegulatoryReportingTool.Models;\n\nnamespace RegulatoryReportingTool.Tests\n{\n    [TestClass]\n    public class ReportServiceTests\n    {\n        [TestMethod]\n        public void CreateRegulatoryReport_ReturnsReportWithContent()\n        {\n            IReportService reportService = new ReportService();\n            Report report = reportService.CreateRegulatoryReport();\n\n            Assert.IsNotNull(report);\n            Assert.IsFalse(string.IsNullOrEmpty(report.Summary));\n            Assert.IsFalse(string.IsNullOrEmpty(report.Details));\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "7ab70f5f-704a-457a-afd1-5881b782ce38",
    "Name": "CreditScoreIntegrationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "d8124614-5b4c-4c7b-aaa4-d38fb5ad3cbf",
        "Name": "Program.cs",
        "ParentId": "7ab70f5f-704a-457a-afd1-5881b782ce38",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CreditScoreIntegrationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "98808266-1f12-4862-bfc8-4392177220d5",
        "Name": "Startup.cs",
        "ParentId": "7ab70f5f-704a-457a-afd1-5881b782ce38",
        "Type": 1,
        "Text": "using CreditScoreIntegrationService.Clients;\nusing CreditScoreIntegrationService.Configurations;\nusing CreditScoreIntegrationService.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CreditScoreIntegrationService\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.Configure<CreditBureauSettings>(Configuration.GetSection(\"CreditBureauSettings\"));\n            services.AddHttpClient();\n            services.AddScoped<CreditBureauClient>();\n            services.AddScoped<ICreditScoreService, CreditScoreService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c9027a9a-3155-4e8a-8e16-5b5b9a707a4d",
        "Name": "Controllers",
        "ParentId": "7ab70f5f-704a-457a-afd1-5881b782ce38",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "14ef0cda-0bb5-42d3-afb9-2a04455b7370",
        "Name": "Services",
        "ParentId": "7ab70f5f-704a-457a-afd1-5881b782ce38",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b77e6a98-8eb3-44b6-9836-78bb916a82e9",
        "Name": "Clients",
        "ParentId": "7ab70f5f-704a-457a-afd1-5881b782ce38",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6ff6d963-0a72-412c-bebb-99e2c25cb6ac",
        "Name": "Models",
        "ParentId": "7ab70f5f-704a-457a-afd1-5881b782ce38",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b0545866-b9fb-4768-90f5-6fb76f00eb56",
        "Name": "Configurations",
        "ParentId": "7ab70f5f-704a-457a-afd1-5881b782ce38",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "77084790-d8dc-475b-b265-6f0e943c5e52",
        "Name": "Exceptions",
        "ParentId": "7ab70f5f-704a-457a-afd1-5881b782ce38",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
    "Name": "ExternalPaymentConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "36815e30-ceaa-4b5c-9b9b-542f1de5c148",
        "Name": "Program.cs",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ExternalPaymentConnector\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "910e9db3-d2de-437f-96d4-06328a9720a9",
        "Name": "Startup.cs",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ExternalPaymentConnector.Services;\nusing ExternalPaymentConnector.Integration;\nusing ExternalPaymentConnector.Infrastructure;\nusing ExternalPaymentConnector.Config;\n\nnamespace ExternalPaymentConnector\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddTransient<PaymentService>();\n            services.AddTransient<PayPalConnector>();\n            services.AddTransient<StripeConnector>();\n            services.AddSingleton<LoggingService>();\n            services.Configure<PaymentSettings>(Configuration.GetSection(\"PaymentSettings\"));\n            services.AddOptions();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b337af58-73ac-4217-83af-e00b0f0278ec",
        "Name": "appsettings.json",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 1,
        "Text": "{\n  \"PaymentSettings\": {\n    \"PayPalApiUrl\": \"https://api.paypal.com\",\n    \"PayPalClientId\": \"your-paypal-client-id\",\n    \"PayPalClientSecret\": \"your-paypal-client-secret\",\n    \"StripeApiUrl\": \"https://api.stripe.com\",\n    \"StripeSecretKey\": \"your-stripe-secret-key\"\n  }\n}",
        "Language": 0
      },
      {
        "Id": "f06f2081-1691-4973-a3b4-ec2ca8572a55",
        "Name": "API",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "341f0abd-ec5c-4953-ae02-361e69df4575",
        "Name": "Config",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b6fecb39-1efa-4839-8f40-de4c1f891865",
        "Name": "Domain",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "99202632-d18f-437e-bf12-f2435e3f234e",
        "Name": "Integration",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6bd0b5a1-3f42-4e6f-a1bc-7ddd4f13bb9f",
        "Name": "Services",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f4293cf2-8020-4572-84d2-496043a158ba",
        "Name": "Infrastructure",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2c0e53fc-b343-4a2d-8f92-16a34881bf83",
        "Name": "Extensions",
        "ParentId": "e0bde6f0-c6c8-4e3e-9c89-0131a9b415de",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "693098d1-aa72-4669-b3fc-c566f1e86a81",
    "Name": "FinancialDataAggregator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "d29ee9f3-da93-49f6-9ebc-40c6f7a4d9eb",
        "Name": "Program.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using System;\nusing FinancialDataAggregator.Services;\nusing FinancialDataAggregator.Utils;\n\nnamespace FinancialDataAggregator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Initialize configuration and logger\n            var config = ConfigurationManager.LoadConfiguration(\"AppSettings.json\");\n            Logger.Initialize(config.Logging);\n            \n            // Create and run the data aggregation service\n            var aggregationService = new DataAggregationService();\n            aggregationService.AggregateMarketData();\n            \n            Console.WriteLine(\"Market data aggregation process completed.\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "9da064dc-c2cb-4134-9688-e26203e18303",
        "Name": "Configurations",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "225831b7-2635-4a85-a932-4e5e05a2367c",
        "Name": "AppSettings.json",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "{\n  \"Logging\": {\n    \"LogFilePath\": \"/var/log/financialaggregator.log\",\n    \"LogLevel\": \"Info\"\n  },\n  \"DataSources\": {\n    \"YahooFinance\": \"https://finance.yahoo.com\",\n    \"Bloomberg\": \"https://www.bloomberg.com\"\n  }\n}",
        "Language": 0
      },
      {
        "Id": "d94d8214-21f8-4ea7-b783-3999f54a5d61",
        "Name": "Models",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1797699e-1408-4cec-966d-023c9863d70d",
        "Name": "MarketData.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using System;\n\nnamespace FinancialDataAggregator.Models\n{\n    public class MarketData\n    {\n        public string Symbol { get; set; }\n        public decimal Price { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "9f6f8044-2a07-47e8-93bf-47d0d75105fe",
        "Name": "Aggregators",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1306a844-7178-4eef-b7c9-9638986214fd",
        "Name": "IExternalDataAggregator.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using FinancialDataAggregator.Models;\n\nnamespace FinancialDataAggregator.Aggregators\n{\n    public interface IExternalDataAggregator\n    {\n        MarketData GetMarketData();\n    }\n}",
        "Language": 0
      },
      {
        "Id": "edab7530-a5ae-44b5-94c0-c779b099d693",
        "Name": "YahooFinanceAggregator.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using FinancialDataAggregator.Models;\nusing FinancialDataAggregator.Utils;\nusing System;\n\nnamespace FinancialDataAggregator.Aggregators\n{\n    public class YahooFinanceAggregator : IExternalDataAggregator\n    {\n        public MarketData GetMarketData()\n        {\n            // Production implementation would include HTTP calls and deserialization\n            Logger.Log(\"Fetching market data from Yahoo Finance\", \"Info\");\n            \n            return new MarketData\n            {\n                Symbol = \"YHOO\",\n                Price = 120.50m,\n                Timestamp = DateTime.UtcNow\n            };\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "14b26160-3719-4170-97ef-c5583738cb2b",
        "Name": "BloombergAggregator.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using FinancialDataAggregator.Models;\nusing FinancialDataAggregator.Utils;\nusing System;\n\nnamespace FinancialDataAggregator.Aggregators\n{\n    public class BloombergAggregator : IExternalDataAggregator\n    {\n        public MarketData GetMarketData()\n        {\n            // Production implementation would include secure API calls and data handling\n            Logger.Log(\"Fetching market data from Bloomberg\", \"Info\");\n            \n            return new MarketData\n            {\n                Symbol = \"BBG\",\n                Price = 230.75m,\n                Timestamp = DateTime.UtcNow\n            };\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c5e1754a-88f9-4b59-8050-b665bf6c33fc",
        "Name": "Services",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "af1c08d7-0342-4077-a2e5-519aae0b25e9",
        "Name": "DataAggregationService.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using FinancialDataAggregator.Aggregators;\nusing FinancialDataAggregator.Models;\nusing FinancialDataAggregator.Utils;\nusing System.Collections.Generic;\n\nnamespace FinancialDataAggregator.Services\n{\n    public class DataAggregationService\n    {\n        private readonly List<IExternalDataAggregator> aggregators;\n\n        public DataAggregationService()\n        {\n            // Initialize the list of external data aggregators\n            aggregators = new List<IExternalDataAggregator>\n            {\n                new YahooFinanceAggregator(),\n                new BloombergAggregator()\n            };\n        }\n\n        public void AggregateMarketData()\n        {\n            var marketDataList = new List<MarketData>();\n            \n            foreach (var aggregator in aggregators)\n            {\n                var data = aggregator.GetMarketData();\n                if (data != null)\n                {\n                    marketDataList.Add(data);\n                    Logger.Log($\"Aggregated data for symbol {data.Symbol} at {data.Timestamp}\", \"Info\");\n                }\n            }\n            \n            // Process the aggregated market data\n            ProcessMarketData(marketDataList);\n        }\n\n        private void ProcessMarketData(List<MarketData> dataList)\n        {\n            foreach (var data in dataList)\n            {\n                DataProcessingService.Process(data);\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "3d8d9b31-50f3-4cc3-abcd-473cc6ad3e72",
        "Name": "DataProcessingService.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using FinancialDataAggregator.Models;\nusing FinancialDataAggregator.Utils;\n\nnamespace FinancialDataAggregator.Services\n{\n    public static class DataProcessingService\n    {\n        public static void Process(MarketData data)\n        {\n            // Implement robust data processing logic here\n            Logger.Log($\"Processing market data for symbol {data.Symbol} with price {data.Price}\", \"Info\");\n            \n            // Additional production processing, such as validation and persistence, would occur here\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "db838094-cd87-4bee-8304-f52414a27206",
        "Name": "Utils",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "36a7b1d5-d151-4c7d-af70-888e2c4170fd",
        "Name": "Logger.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\n\nnamespace FinancialDataAggregator.Utils\n{\n    public static class Logger\n    {\n        private static string logFilePath;\n        private static string logLevel;\n\n        public static void Initialize(LoggingSettings settings)\n        {\n            logFilePath = settings.LogFilePath;\n            logLevel = settings.LogLevel;\n        }\n\n        public static void Log(string message, string level = \"Info\")\n        {\n            if (ShouldLog(level))\n            {\n                string logMessage = $\"{DateTime.Now:yyyy-MM-dd HH:mm:ss} [{level}] {message}\";\n                File.AppendAllText(logFilePath, logMessage + Environment.NewLine);\n            }\n        }\n\n        private static bool ShouldLog(string level)\n        {\n            // Simplified log level filtering for production scenarios\n            if (logLevel == \"Info\") return true;\n            return true;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "875c1589-226d-4278-95c9-f1f93b5aad0b",
        "Name": "ConfigurationManager.cs",
        "ParentId": "693098d1-aa72-4669-b3fc-c566f1e86a81",
        "Type": 1,
        "Text": "using System.IO;\nusing System.Text.Json;\n\nnamespace FinancialDataAggregator.Utils\n{\n    public class LoggingSettings\n    {\n        public string LogFilePath { get; set; }\n        public string LogLevel { get; set; }\n    }\n\n    public class DataSourcesSettings\n    {\n        public string YahooFinance { get; set; }\n        public string Bloomberg { get; set; }\n    }\n\n    public class AppConfig\n    {\n        public LoggingSettings Logging { get; set; }\n        public DataSourcesSettings DataSources { get; set; }\n    }\n\n    public static class ConfigurationManager\n    {\n        public static AppConfig LoadConfiguration(string filename)\n        {\n            var jsonString = File.ReadAllText(filename);\n            var config = JsonSerializer.Deserialize<AppConfig>(jsonString);\n            return config;\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "e227be46-5163-4ef1-8677-0a16af21647f",
    "Name": "SMSNotificationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "1ad4ebb0-41fc-4392-bb7e-5701328d4eec",
        "Name": "Program.cs",
        "ParentId": "e227be46-5163-4ef1-8677-0a16af21647f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SMSNotificationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d1818673-46b5-4357-ba52-f20c8823b1a7",
        "Name": "Startup.cs",
        "ParentId": "e227be46-5163-4ef1-8677-0a16af21647f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SMSNotificationService.Services;\n\nnamespace SMSNotificationService\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddScoped<ISmsService, SmsService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "64eccca0-351f-4935-a1c7-ed7943b1a1f9",
        "Name": "Models",
        "ParentId": "e227be46-5163-4ef1-8677-0a16af21647f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "54b98592-3523-4604-9476-2f1f73ab0ea3",
        "Name": "Services",
        "ParentId": "e227be46-5163-4ef1-8677-0a16af21647f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f99a8ecf-b468-4034-8954-ade7f340593c",
        "Name": "Controllers",
        "ParentId": "e227be46-5163-4ef1-8677-0a16af21647f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "830464eb-a6da-4201-85c4-344f066b4ab4",
        "Name": "Utilities",
        "ParentId": "e227be46-5163-4ef1-8677-0a16af21647f",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
    "Name": "EmailNotificationSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "99469f8b-dad3-4e4a-aea2-f3ac66a33a78",
        "Name": "Program.cs",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing EmailNotificationSystem.Config;\nusing EmailNotificationSystem.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Load configuration from appsettings.json\nbuilder.Configuration.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true);\n\n// Configure services\nbuilder.Services.Configure<EmailSettings>(builder.Configuration.GetSection(\"EmailSettings\"));\nbuilder.Services.AddTransient<IEmailService, SmtpEmailService>();\nbuilder.Services.AddTransient<EmailTemplateService>();\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "a6ac362b-150d-42b4-a467-ac0aaf4eb724",
        "Name": "appsettings.json",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "{\n  \"EmailSettings\": {\n    \"SmtpServer\": \"smtp.example.com\",\n    \"SmtpPort\": 587,\n    \"SenderEmail\": \"no-reply@example.com\",\n    \"SenderName\": \"Digital Bank\",\n    \"Username\": \"smtp_username\",\n    \"Password\": \"smtp_password\",\n    \"EnableSsl\": true\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}",
        "Language": 0
      },
      {
        "Id": "0b4b3fed-6933-4e65-91db-654e928f8f03",
        "Name": "Controllers",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "23d6c47c-02ca-424e-aec8-e65881a332d4",
        "Name": "EmailNotificationController.cs",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "using EmailNotificationSystem.Models;\nusing EmailNotificationSystem.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\n\nnamespace EmailNotificationSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class EmailNotificationController : ControllerBase\n    {\n        private readonly IEmailService _emailService;\n        private readonly EmailTemplateService _templateService;\n\n        public EmailNotificationController(IEmailService emailService, EmailTemplateService templateService)\n        {\n            _emailService = emailService;\n            _templateService = templateService;\n        }\n\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendEmail([FromBody] EmailNotification notification)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ModelState);\n\n            // Generate email body using template service\n            notification.Body = _templateService.GenerateNotificationEmail(notification);\n            \n            await _emailService.SendEmailAsync(notification);\n            return Ok(new { message = \"Email sent successfully\" });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "11a6619a-02ed-46f4-ad83-4eeecae7d25c",
        "Name": "Services",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "63335a1f-ef8b-4ba4-b6bb-184465b6fe65",
        "Name": "IEmailService.cs",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing EmailNotificationSystem.Models;\n\nnamespace EmailNotificationSystem.Services\n{\n    public interface IEmailService\n    {\n        Task SendEmailAsync(EmailNotification emailNotification);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "7861c0da-9d21-4267-a677-cb0cbeb861f9",
        "Name": "SmtpEmailService.cs",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "using System.Net.Mail;\nusing System.Threading.Tasks;\nusing EmailNotificationSystem.Models;\nusing EmailNotificationSystem.Config;\nusing Microsoft.Extensions.Options;\n\nnamespace EmailNotificationSystem.Services\n{\n    public class SmtpEmailService : IEmailService\n    {\n        private readonly EmailSettings _emailSettings;\n\n        public SmtpEmailService(IOptions<EmailSettings> emailSettings)\n        {\n            _emailSettings = emailSettings.Value;\n        }\n\n        public async Task SendEmailAsync(EmailNotification emailNotification)\n        {\n            using (var client = new SmtpClient(_emailSettings.SmtpServer, _emailSettings.SmtpPort))\n            {\n                client.EnableSsl = _emailSettings.EnableSsl;\n                client.Credentials = new System.Net.NetworkCredential(_emailSettings.Username, _emailSettings.Password);\n\n                var mailMessage = new MailMessage\n                {\n                    From = new MailAddress(_emailSettings.SenderEmail, _emailSettings.SenderName),\n                    Subject = emailNotification.Subject,\n                    Body = emailNotification.Body,\n                    IsBodyHtml = true\n                };\n                mailMessage.To.Add(emailNotification.RecipientEmail);\n\n                await client.SendMailAsync(mailMessage);\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f0130668-fcc3-4445-b009-6eb0e34aa494",
        "Name": "EmailTemplateService.cs",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "using System;\nusing EmailNotificationSystem.Models;\n\nnamespace EmailNotificationSystem.Services\n{\n    public class EmailTemplateService\n    {\n        public string GenerateNotificationEmail(EmailNotification notification)\n        {\n            return $\"<html><body><h1>{notification.Subject}</h1><p>{notification.Body}</p><footer><p>{DateTime.UtcNow:O}</p></footer></body></html>\";\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "0be5e99c-a980-45c6-8c5d-001e5bcdbc51",
        "Name": "Models",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0292635c-c433-40f3-8bea-11b8c4fe8cc9",
        "Name": "EmailNotification.cs",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "namespace EmailNotificationSystem.Models\n{\n    public class EmailNotification\n    {\n        public string RecipientEmail { get; set; }\n        public string Subject { get; set; }\n        public string Body { get; set; }\n        public string NotificationType { get; set; } // e.g., Alert, Operational\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b3716fa7-a874-4163-b346-4a07e4205eb3",
        "Name": "Config",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "cbc3d289-fcd7-4c53-bafa-5257afa0cfd2",
        "Name": "EmailSettings.cs",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "namespace EmailNotificationSystem.Config\n{\n    public class EmailSettings\n    {\n        public string SmtpServer { get; set; }\n        public int SmtpPort { get; set; }\n        public string SenderEmail { get; set; }\n        public string SenderName { get; set; }\n        public string Username { get; set; }\n        public string Password { get; set; }\n        public bool EnableSsl { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "295ffff1-63c2-468b-bbf9-547694a2e256",
        "Name": "Utilities",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "492b7112-a331-41ac-a081-746008102b9a",
        "Name": "Logger.cs",
        "ParentId": "efb78f83-9b99-46ed-a906-c7ae16e9e12d",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\n\nnamespace EmailNotificationSystem.Utilities\n{\n    public static class Logger\n    {\n        private static readonly string logFilePath = \"logs/application.log\";\n\n        static Logger()\n        {\n            Directory.CreateDirectory(\"logs\");\n        }\n\n        public static void LogInfo(string message)\n        {\n            var logMessage = $\"{DateTime.UtcNow:O} [INFO] {message}\";\n            File.AppendAllText(logFilePath, logMessage + Environment.NewLine);\n        }\n\n        public static void LogError(string message, Exception ex)\n        {\n            var logMessage = $\"{DateTime.UtcNow:O} [ERROR] {message} Exception: {ex.Message}\";\n            File.AppendAllText(logFilePath, logMessage + Environment.NewLine);\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
    "Name": "PushNotificationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "5b0fb3b3-0a14-422c-a3a6-3372d3f4e860",
        "Name": "Program.cs",
        "ParentId": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace PushNotificationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0b2764d8-cdaa-4aa4-ac56-b0dfdb8f16c1",
        "Name": "Startup.cs",
        "ParentId": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing PushNotificationService.Configuration;\nusing PushNotificationService.Services;\nusing PushNotificationService.Infrastructure;\nusing PushNotificationService.Notifications;\n\nnamespace PushNotificationService\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.Configure<NotificationSettings>(Configuration.GetSection(\"NotificationSettings\"));\n            \n            // Register notification related services\n            services.AddSingleton<IPushNotificationProvider, FirebasePushNotificationProvider>();\n            services.AddSingleton<PushNotificationManager>();\n            services.AddSingleton<IPushNotificationService, PushNotificationServiceImpl>();\n\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "94ef1f15-da93-483d-85a3-ba6b4552b908",
        "Name": "Controllers",
        "ParentId": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3781cc44-cff8-45f9-b8fd-dc5abec46f3e",
        "Name": "Services",
        "ParentId": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6052ab9f-8fb5-42f9-a5c7-624c8b0c7a73",
        "Name": "Models",
        "ParentId": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "be2ab54b-5fdc-44d6-8cb2-aff41151b7ea",
        "Name": "Infrastructure",
        "ParentId": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8d6b06a5-098b-45da-82e2-352a40783e7d",
        "Name": "Configuration",
        "ParentId": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "187d5a81-49b5-4f7c-bf27-08475167f153",
        "Name": "Notifications",
        "ParentId": "4da0bd12-64f4-43f9-8c97-eb1aefc0fa84",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
    "Name": "CentralizedLoggingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "48611723-867e-48ae-b7f9-38264ff8ac1d",
        "Name": "Program.cs",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing CentralizedLoggingService.Repositories;\nusing CentralizedLoggingService.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ILogRepository, LogRepository>();\nbuilder.Services.AddSingleton<ILogAggregatorService, LogAggregatorService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => {\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "ce0a3742-be8a-4b23-8640-38a6b373f770",
        "Name": "Models",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e4d0f9b9-926b-4adf-ae7b-fe244cec1b62",
        "Name": "LogEntry.cs",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 1,
        "Text": "using System;\n\nnamespace CentralizedLoggingService.Models\n{\n    public enum LogLevel\n    {\n        Trace,\n        Debug,\n        Information,\n        Warning,\n        Error,\n        Critical\n    }\n\n    public class LogEntry\n    {\n        public Guid Id { get; set; }\n        public DateTime Timestamp { get; set; }\n        public LogLevel Level { get; set; }\n        public string ServiceName { get; set; }\n        public string Message { get; set; }\n        public string Details { get; set; }\n\n        public LogEntry()\n        {\n            Id = Guid.NewGuid();\n            Timestamp = DateTime.UtcNow;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a1eda2a4-7551-45e1-9a65-9d2e978a5d26",
        "Name": "Services",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3511cce1-10b8-496a-b3b4-d8b8edb10eb9",
        "Name": "LogAggregatorService.cs",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing CentralizedLoggingService.Models;\nusing CentralizedLoggingService.Repositories;\n\nnamespace CentralizedLoggingService.Services\n{\n    public interface ILogAggregatorService\n    {\n        void AddLog(LogEntry log);\n        IEnumerable<LogEntry> GetLogs();\n        IEnumerable<LogEntry> GetLogsByService(string serviceName);\n        IDictionary<string, int> GetLogSummary();\n    }\n\n    public class LogAggregatorService : ILogAggregatorService\n    {\n        private readonly ILogRepository _logRepository;\n\n        public LogAggregatorService(ILogRepository logRepository)\n        {\n            _logRepository = logRepository;\n        }\n\n        public void AddLog(LogEntry log)\n        {\n            if (log == null)\n                throw new ArgumentNullException(nameof(log));\n            \n            _logRepository.Save(log);\n        }\n\n        public IEnumerable<LogEntry> GetLogs()\n        {\n            return _logRepository.GetAll();\n        }\n\n        public IEnumerable<LogEntry> GetLogsByService(string serviceName)\n        {\n            if (string.IsNullOrWhiteSpace(serviceName))\n                throw new ArgumentException(\"Service name cannot be null or empty.\", nameof(serviceName));\n            \n            return _logRepository.GetAll().Where(l => l.ServiceName.Equals(serviceName, StringComparison.OrdinalIgnoreCase));\n        }\n\n        public IDictionary<string, int> GetLogSummary()\n        {\n            return _logRepository.GetAll()\n                .GroupBy(l => l.ServiceName)\n                .ToDictionary(g => g.Key, g => g.Count());\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "06845b03-b0b4-44e2-b307-acb523f5ca8f",
        "Name": "Repositories",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1ee7b8f7-517d-4329-a245-2250592b31e5",
        "Name": "LogRepository.cs",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 1,
        "Text": "using System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing CentralizedLoggingService.Models;\n\nnamespace CentralizedLoggingService.Repositories\n{\n    public interface ILogRepository\n    {\n        void Save(LogEntry log);\n        IEnumerable<LogEntry> GetAll();\n    }\n\n    public class LogRepository : ILogRepository\n    {\n        private readonly ConcurrentBag<LogEntry> _logs = new ConcurrentBag<LogEntry>();\n\n        public void Save(LogEntry log)\n        {\n            _logs.Add(log);\n        }\n\n        public IEnumerable<LogEntry> GetAll()\n        {\n            return _logs.ToList();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "ec095583-1337-43b8-977f-73e088439ba5",
        "Name": "Controllers",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a6a14ed7-67cd-492e-bb44-595faebfce86",
        "Name": "LoggingController.cs",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Collections.Generic;\nusing CentralizedLoggingService.Models;\nusing CentralizedLoggingService.Services;\n\nnamespace CentralizedLoggingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class LoggingController : ControllerBase\n    {\n        private readonly ILogAggregatorService _logAggregator;\n\n        public LoggingController(ILogAggregatorService logAggregator)\n        {\n            _logAggregator = logAggregator;\n        }\n\n        [HttpPost]\n        public IActionResult PostLog([FromBody] LogEntry logEntry)\n        {\n            if (logEntry == null)\n            {\n                return BadRequest(\"Log entry cannot be null.\");\n            }\n            _logAggregator.AddLog(logEntry);\n            return Ok(\"Log saved successfully.\");\n        }\n\n        [HttpGet]\n        public ActionResult<IEnumerable<LogEntry>> GetAllLogs()\n        {\n            var logs = _logAggregator.GetLogs();\n            return Ok(logs);\n        }\n\n        [HttpGet(\"service/{serviceName}\")]\n        public ActionResult<IEnumerable<LogEntry>> GetLogsByService(string serviceName)\n        {\n            var logs = _logAggregator.GetLogsByService(serviceName);\n            return Ok(logs);\n        }\n\n        [HttpGet(\"summary\")]\n        public IActionResult GetLogSummary()\n        {\n            var summary = _logAggregator.GetLogSummary();\n            return Ok(summary);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "88bf22c4-e3f0-410e-9cc0-d44af56045bd",
        "Name": "Utils",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "314fa70d-f187-4b51-b36d-c7ddcfdc8770",
        "Name": "LogFormatter.cs",
        "ParentId": "887eeb43-3d9c-4a46-b8f4-b0e33597c13a",
        "Type": 1,
        "Text": "using System.Globalization;\nusing CentralizedLoggingService.Models;\n\nnamespace CentralizedLoggingService.Utils\n{\n    public static class LogFormatter\n    {\n        public static string Format(LogEntry log)\n        {\n            return string.Format(CultureInfo.InvariantCulture, \"[{0}] {1} - {2}: {3}\",\n                log.Timestamp.ToString(\"o\"), log.Level, log.ServiceName, log.Message);\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "c0066d02-c866-4f92-b563-dc568e5c729f",
    "Name": "ConfigurationManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "95a3f0e8-a026-4f62-a999-0e0b73e0669f",
        "Name": "Program.cs",
        "ParentId": "c0066d02-c866-4f92-b563-dc568e5c729f",
        "Type": 1,
        "Text": "using System;\nusing ConfigurationManager.Services;\nusing ConfigurationManager.Interfaces;\nusing ConfigurationManager.Repositories;\n\nnamespace ConfigurationManagerApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                // Initialize repository and service\n                IConfigurationRepository repository = new ConfigurationRepository();\n                IConfigurationService service = new ConfigurationService(repository);\n\n                // Example: Add or update a configuration setting\n                service.AddOrUpdateSetting(\"BankFee\", \"0.25\");\n\n                // Retrieve and display a configuration setting\n                string bankFee = service.GetSetting(\"BankFee\");\n                Console.WriteLine($\"BankFee: {bankFee}\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b32c79da-c2be-4af6-a2d4-e4ccca78fac9",
        "Name": "Models",
        "ParentId": "c0066d02-c866-4f92-b563-dc568e5c729f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "55adc915-fa34-46a7-8717-b00ed122c685",
        "Name": "Interfaces",
        "ParentId": "c0066d02-c866-4f92-b563-dc568e5c729f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "42d91d97-a36b-4af2-b00c-2cc506ff02ea",
        "Name": "Repositories",
        "ParentId": "c0066d02-c866-4f92-b563-dc568e5c729f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "af611146-cada-4748-a4b3-de34e725e794",
        "Name": "Services",
        "ParentId": "c0066d02-c866-4f92-b563-dc568e5c729f",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "63e53870-f185-44ee-aa33-d998f124c306",
    "Name": "DataCachingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "a5b3428f-a2e2-4fe4-b020-f7972d9674b1",
        "Name": "Program.cs",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 1,
        "Text": "using System;\nusing DataCachingService.Managers;\nusing DataCachingService.Cache;\nusing DataCachingService.Config;\nusing Microsoft.Extensions.Caching.Memory;\n\nnamespace DataCachingService\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Initialize the memory cache provider using Microsoft.Extensions.Caching.Memory\n            var memoryCache = new MemoryCache(new MemoryCacheOptions());\n            ICacheProvider cacheProvider = new MemoryCacheProvider(memoryCache);\n            \n            // Alternatively, to use Redis caching, uncomment the following line and provide a valid connection string\n            // ICacheProvider cacheProvider = new RedisCacheProvider(\"your_redis_connection_string\");\n            \n            // Initialize the cache manager with the chosen cache provider\n            CacheManager cacheManager = new CacheManager(cacheProvider);\n\n            // Example usage: Set a cache value with a key and expiration time\n            string key = \"AccountBalance\";\n            decimal accountBalance = 10234.56m;\n            cacheManager.Set(key, accountBalance, TimeSpan.FromMinutes(10));\n\n            // Retrieve the cached value\n            decimal? cachedBalance = cacheManager.Get<decimal>(key);\n            Console.WriteLine($\"Cached Account Balance: {cachedBalance}\");\n\n            // Remove the cache entry\n            cacheManager.Remove(key);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7e01858b-d79f-4a42-be76-4fd360ee38de",
        "Name": "Cache",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "102d4638-1434-4b86-bb79-d15fe140c55a",
        "Name": "ICacheProvider.cs",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 1,
        "Text": "using System;\n\nnamespace DataCachingService.Cache\n{\n    public interface ICacheProvider\n    {\n        T Get<T>(string key);\n        void Set<T>(string key, T value, TimeSpan expiration);\n        void Remove(string key);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a9ea590f-b969-4dd6-969f-97010e8f6af1",
        "Name": "MemoryCacheProvider.cs",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Caching.Memory;\n\nnamespace DataCachingService.Cache\n{\n    public class MemoryCacheProvider : ICacheProvider\n    {\n        private readonly IMemoryCache _cache;\n\n        public MemoryCacheProvider(IMemoryCache memoryCache)\n        {\n            _cache = memoryCache;\n        }\n\n        public T Get<T>(string key)\n        {\n            if (_cache.TryGetValue(key, out T value))\n            {\n                return value;\n            }\n            return default;\n        }\n\n        public void Set<T>(string key, T value, TimeSpan expiration)\n        {\n            var cacheEntryOptions = new MemoryCacheEntryOptions { AbsoluteExpirationRelativeToNow = expiration };\n            _cache.Set(key, value, cacheEntryOptions);\n        }\n\n        public void Remove(string key)\n        {\n            _cache.Remove(key);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "fdec0937-5258-4b17-8f08-00f385eb7df6",
        "Name": "RedisCacheProvider.cs",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 1,
        "Text": "using System;\nusing System.Text.Json;\nusing StackExchange.Redis;\n\nnamespace DataCachingService.Cache\n{\n    public class RedisCacheProvider : ICacheProvider, IDisposable\n    {\n        private readonly ConnectionMultiplexer _redis;\n        private readonly IDatabase _db;\n\n        public RedisCacheProvider(string connectionString)\n        {\n            _redis = ConnectionMultiplexer.Connect(connectionString);\n            _db = _redis.GetDatabase();\n        }\n\n        public T Get<T>(string key)\n        {\n            var value = _db.StringGet(key);\n            if (value.IsNullOrEmpty)\n            {\n                return default;\n            }\n            return JsonSerializer.Deserialize<T>(value);\n        }\n\n        public void Set<T>(string key, T value, TimeSpan expiration)\n        {\n            var jsonData = JsonSerializer.Serialize(value);\n            _db.StringSet(key, jsonData, expiration);\n        }\n\n        public void Remove(string key)\n        {\n            _db.KeyDelete(key);\n        }\n\n        public void Dispose()\n        {\n            _redis?.Dispose();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4a63096d-2ea8-43fd-8ee3-300c1cdc7f94",
        "Name": "Managers",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4bc41640-8c6f-4812-b7a7-f18820b6384a",
        "Name": "CacheManager.cs",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 1,
        "Text": "using System;\nusing DataCachingService.Cache;\n\nnamespace DataCachingService.Managers\n{\n    public class CacheManager\n    {\n        private readonly ICacheProvider _cacheProvider;\n\n        public CacheManager(ICacheProvider cacheProvider)\n        {\n            _cacheProvider = cacheProvider;\n        }\n\n        public T Get<T>(string key)\n        {\n            return _cacheProvider.Get<T>(key);\n        }\n\n        public void Set<T>(string key, T value, TimeSpan expiration)\n        {\n            _cacheProvider.Set(key, value, expiration);\n        }\n\n        public void Remove(string key)\n        {\n            _cacheProvider.Remove(key);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "358d0cd0-52a2-4073-8592-3329d303f9f5",
        "Name": "Models",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "aabb903b-f343-441e-b5a9-d7106d8c483e",
        "Name": "CacheItem.cs",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 1,
        "Text": "using System;\n\nnamespace DataCachingService.Models\n{\n    public class CacheItem<T>\n    {\n        public string Key { get; set; }\n        public T Value { get; set; }\n        public DateTime Expiration { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bf4b7ffe-daeb-49b6-a63d-49925c537de2",
        "Name": "Config",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7f6c6c65-fce6-47d5-9ad5-12af6348be6d",
        "Name": "CacheSettings.cs",
        "ParentId": "63e53870-f185-44ee-aa33-d998f124c306",
        "Type": 1,
        "Text": "namespace DataCachingService.Config\n{\n    public class CacheSettings\n    {\n        // ProviderType can be \"Memory\" or \"Redis\"\n        public string ProviderType { get; set; }\n\n        // Redis specific settings\n        public string RedisConnectionString { get; set; }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "18fe23b2-4f3b-4a99-a890-38e5d526efae",
    "Name": "RealTimeAnalyticsDashboard",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "36430618-3d3a-4227-b7ed-c6ab5d3010d8",
        "Name": "Program.cs",
        "ParentId": "18fe23b2-4f3b-4a99-a890-38e5d526efae",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing RealTimeAnalyticsDashboard.Services;\nusing RealTimeAnalyticsDashboard.Hubs;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nbuilder.Services.AddSignalR();\nbuilder.Services.AddSingleton<IAnalyticsService, AnalyticsService>();\n\nvar app = builder.Build();\n\n// Middleware configuration\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseStaticFiles();\napp.UseRouting();\n\napp.UseAuthorization();\n\napp.MapControllers();\napp.MapHub<AnalyticsHub>(\"/analyticsHub\");\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "a6002fe6-e4b8-4b8e-bce3-10df11f42c71",
        "Name": "appsettings.json",
        "ParentId": "18fe23b2-4f3b-4a99-a890-38e5d526efae",
        "Type": 1,
        "Text": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}",
        "Language": 0
      },
      {
        "Id": "4995aa50-5738-4196-8c8a-66a5125ecb1e",
        "Name": "Controllers",
        "ParentId": "18fe23b2-4f3b-4a99-a890-38e5d526efae",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "db6fb552-b948-429f-b30d-dca661790b02",
        "Name": "Models",
        "ParentId": "18fe23b2-4f3b-4a99-a890-38e5d526efae",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3c7949ac-ba74-4e55-b692-16e482611bfb",
        "Name": "Services",
        "ParentId": "18fe23b2-4f3b-4a99-a890-38e5d526efae",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f775d1f2-1e68-43fb-940f-6423f1bd8262",
        "Name": "Hubs",
        "ParentId": "18fe23b2-4f3b-4a99-a890-38e5d526efae",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b8dd1fd8-336a-4d2d-888a-204de34af768",
        "Name": "wwwroot",
        "ParentId": "18fe23b2-4f3b-4a99-a890-38e5d526efae",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
    "Name": "HistoricalReportingSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "cff1d706-e027-425e-ac94-c914d1ba957f",
        "Name": "Core",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a805457a-7b5f-4feb-91f8-1e1b4a549761",
        "Name": "Infrastructure",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5f1a676b-3781-4555-ab8c-7e7f7c503ac3",
        "Name": "API",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9a2a608d-6730-4566-bbd4-b21f3756f6bc",
        "Name": "Tests",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e90c875a-ecd5-4caa-b3e0-4d831f62754f",
        "Name": "CoreModels",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a7812fff-2854-496f-b982-2258318da741",
        "Name": "CoreServices",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "91717a3a-ea2c-4e33-8226-903762cf0f20",
        "Name": "InfrastructureData",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2c2f6c30-92a5-421b-80a6-a9340416f972",
        "Name": "InfrastructureLogging",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6155ba55-484d-46b6-a210-f1ea9de5c891",
        "Name": "APIControllers",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d5656ccd-6d40-4c04-9fd0-2f7f963aee30",
        "Name": "TestsUnitTests",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "cb6fa364-49ab-4047-988b-895b3c5ede6e",
        "Name": "ReportRequest.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using System;\n\nnamespace HistoricalReportingSystem.Core.Models\n{\n    public class ReportRequest\n    {\n        public DateTime StartDate { get; set; }\n        public DateTime EndDate { get; set; }\n        public string AccountId { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "53ba93a3-0a16-49d4-8998-3d41120b67d7",
        "Name": "ReportResult.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace HistoricalReportingSystem.Core.Models\n{\n    public class ReportResult\n    {\n        public string ReportName { get; set; }\n        public DateTime GeneratedOn { get; set; }\n        public IEnumerable<ReportItem> Items { get; set; }\n    }\n\n    public class ReportItem\n    {\n        public DateTime Date { get; set; }\n        public decimal Amount { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4f02ee5a-aa80-4689-aad1-9aebc9a9f8a8",
        "Name": "IReportingService.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using HistoricalReportingSystem.Core.Models;\n\nnamespace HistoricalReportingSystem.Core.Services\n{\n    public interface IReportingService\n    {\n        ReportResult GenerateReport(ReportRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "cdb3453a-4341-40de-8f0f-36aa698715e0",
        "Name": "ReportingService.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing HistoricalReportingSystem.Core.Models;\nusing HistoricalReportingSystem.Infrastructure.Data;\nusing HistoricalReportingSystem.Infrastructure.Logging;\n\nnamespace HistoricalReportingSystem.Core.Services\n{\n    public class ReportingService : IReportingService\n    {\n        private readonly ReportRepository _reportRepository;\n        private readonly Logger _logger;\n\n        public ReportingService(ReportRepository reportRepository, Logger logger)\n        {\n            _reportRepository = reportRepository;\n            _logger = logger;\n        }\n\n        public ReportResult GenerateReport(ReportRequest request)\n        {\n            _logger.LogInfo($\"Generating report for Account: {request.AccountId}\");\n\n            if (request.StartDate >= request.EndDate)\n            {\n                throw new ArgumentException(\"StartDate must be earlier than EndDate\");\n            }\n\n            var data = _reportRepository.GetHistoricalData(request.AccountId, request.StartDate, request.EndDate);\n            var reportItems = new List<ReportItem>();\n\n            foreach (var record in data)\n            {\n                reportItems.Add(new ReportItem\n                {\n                    Date = record.Date,\n                    Amount = record.Amount,\n                    Description = record.Description\n                });\n            }\n\n            var result = new ReportResult\n            {\n                ReportName = $\"Historical Report for Account {request.AccountId}\",\n                GeneratedOn = DateTime.UtcNow,\n                Items = reportItems\n            };\n\n            _logger.LogInfo($\"Report generated successfully for Account: {request.AccountId}\");\n            return result;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d3da5f67-15dc-4492-b637-713235354e5d",
        "Name": "ReportRepository.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing HistoricalReportingSystem.Core.Models;\n\nnamespace HistoricalReportingSystem.Infrastructure.Data\n{\n    public class ReportRepository\n    {\n        // In a production system, this method would query a database to retrieve historical financial data.\n        public IEnumerable<HistoricalRecord> GetHistoricalData(string accountId, DateTime startDate, DateTime endDate)\n        {\n            // Simulated database records; replace with actual DB logic using Entity Framework or Dapper\n            return new List<HistoricalRecord>\n            {\n                new HistoricalRecord { Date = startDate.AddDays(1), Amount = 1000.50m, Description = \"Deposit\" },\n                new HistoricalRecord { Date = startDate.AddDays(2), Amount = -500.00m, Description = \"Withdrawal\" }\n            };\n        }\n    }\n\n    public class HistoricalRecord\n    {\n        public DateTime Date { get; set; }\n        public decimal Amount { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "976edc58-c9c1-4ee2-875f-0253eeeaa711",
        "Name": "Logger.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using System;\n\nnamespace HistoricalReportingSystem.Infrastructure.Logging\n{\n    public class Logger\n    {\n        public void LogInfo(string message)\n        {\n            Console.WriteLine($\"INFO: {DateTime.UtcNow}: {message}\");\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            Console.WriteLine($\"ERROR: {DateTime.UtcNow}: {message} Exception: {ex.Message}\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4ee6038a-e7f4-4512-9c44-5b9159f64499",
        "Name": "ReportsController.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing HistoricalReportingSystem.Core.Services;\nusing HistoricalReportingSystem.Core.Models;\n\nnamespace HistoricalReportingSystem.API.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ReportsController : ControllerBase\n    {\n        private readonly IReportingService _reportingService;\n\n        public ReportsController(IReportingService reportingService)\n        {\n            _reportingService = reportingService;\n        }\n\n        [HttpPost(\"generate\")]\n        public ActionResult<ReportResult> GenerateReport([FromBody] ReportRequest request)\n        {\n            try\n            {\n                var result = _reportingService.GenerateReport(request);\n                return Ok(result);\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(new { Error = ex.Message });\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "019e9d71-ea63-44fb-8ebd-9a8c814513cd",
        "Name": "Startup.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing HistoricalReportingSystem.Core.Services;\nusing HistoricalReportingSystem.Infrastructure.Data;\nusing HistoricalReportingSystem.Infrastructure.Logging;\n\nnamespace HistoricalReportingSystem.API\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ReportRepository>();\n            services.AddSingleton<Logger>();\n            services.AddTransient<IReportingService, ReportingService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4193fde5-446a-46c8-a5a6-3e6dcbe4c289",
        "Name": "ReportingServiceTests.cs",
        "ParentId": "ab89d621-34d9-4fae-a3e5-9b1998e8d364",
        "Type": 1,
        "Text": "using System;\nusing HistoricalReportingSystem.Core.Models;\nusing HistoricalReportingSystem.Core.Services;\nusing HistoricalReportingSystem.Infrastructure.Data;\nusing HistoricalReportingSystem.Infrastructure.Logging;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace HistoricalReportingSystem.Tests.UnitTests\n{\n    [TestClass]\n    public class ReportingServiceTests\n    {\n        private ReportingService _reportingService;\n        private ReportRepository _reportRepository;\n        private Logger _logger;\n\n        [TestInitialize]\n        public void SetUp()\n        {\n            _reportRepository = new ReportRepository();\n            _logger = new Logger();\n            _reportingService = new ReportingService(_reportRepository, _logger);\n        }\n\n        [TestMethod]\n        public void GenerateReport_ValidRequest_ReturnsReportResult()\n        {\n            var request = new ReportRequest\n            {\n                AccountId = \"ACC123\",\n                StartDate = DateTime.UtcNow.AddDays(-10),\n                EndDate = DateTime.UtcNow\n            };\n\n            var result = _reportingService.GenerateReport(request);\n            Assert.IsNotNull(result);\n            Assert.AreEqual($\"Historical Report for Account {request.AccountId}\", result.ReportName);\n        }\n\n        [TestMethod]\n        [ExpectedException(typeof(ArgumentException))]\n        public void GenerateReport_InvalidDates_ThrowsArgumentException()\n        {\n            var request = new ReportRequest\n            {\n                AccountId = \"ACC123\",\n                StartDate = DateTime.UtcNow,\n                EndDate = DateTime.UtcNow.AddDays(-1)\n            };\n\n            _reportingService.GenerateReport(request);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "107b2723-31a3-4ccf-affe-897cf865205b",
    "Name": "UserBehaviorAnalytics",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "ff20a6b7-ea1f-4827-8b4b-ff0edab7bc36",
        "Name": "Program.cs",
        "ParentId": "107b2723-31a3-4ccf-affe-897cf865205b",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing UserBehaviorAnalytics.Services;\nusing UserBehaviorAnalytics.Data;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<BehaviorAnalyticsService>();\nbuilder.Services.AddScoped<UserInteractionRepository>();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "3ef88523-538f-4a5e-859b-f0fd59f22da0",
        "Name": "Controllers",
        "ParentId": "107b2723-31a3-4ccf-affe-897cf865205b",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f391c52c-3d9a-4f51-9a60-f6dfcab66fc1",
        "Name": "Models",
        "ParentId": "107b2723-31a3-4ccf-affe-897cf865205b",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e9383616-5805-4d12-be65-0e05ea74f8d4",
        "Name": "Services",
        "ParentId": "107b2723-31a3-4ccf-affe-897cf865205b",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "53f648a4-20f7-46f2-84a1-9fc3426c2654",
        "Name": "Data",
        "ParentId": "107b2723-31a3-4ccf-affe-897cf865205b",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "9cb407a2-aa19-4690-b047-babc420ee8e7",
    "Name": "DataExportUtility",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "6fabfb1e-bca1-48f5-a5f4-df440e37e2e1",
        "Name": "Program.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "using System;\nusing DataExportUtility.Config;\nusing DataExportUtility.Services;\nusing DataExportUtility.Utils;\n\nnamespace DataExportUtility\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                // Load configuration from appsettings.json\n                var config = DataExportConfiguration.LoadConfiguration(\"appsettings.json\");\n\n                // Initialize logging with configuration settings\n                Logger.Initialize(config.LoggingConfiguration);\n\n                // Initialize export service\n                IExportService exportService = new ExportService(config);\n\n                // Execute data export process\n                var result = exportService.ExportData();\n\n                if(result.Success)\n                {\n                    Logger.Log($\"Data export completed successfully. Records exported: {result.RecordsExported}\");\n                }\n                else\n                {\n                    Logger.Log(\"Data export encountered errors.\");\n                    Environment.Exit(1);\n                }\n            }\n            catch(Exception ex)\n            {\n                Logger.Log(\"An error occurred during data export: \" + ex.Message);\n                Environment.Exit(1);\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "95e84524-885a-435c-bc18-827ae501ff83",
        "Name": "appsettings.json",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "{\n  \"DatabaseConnectionString\": \"Server=myServer;Database=myDB;User Id=myUser;Password=myPass;\",\n  \"ExportFilePath\": \"exports/data_export.csv\",\n  \"LoggingConfiguration\": {\n    \"LogFilePath\": \"logs/export.log\",\n    \"LogLevel\": \"Info\"\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "f42fb56c-6764-46b6-a7eb-f5d9abe6fd17",
        "Name": "Config",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9bc3bf23-2b9f-4890-9143-efd18efeb481",
        "Name": "DataExportConfiguration.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing Newtonsoft.Json;\nusing DataExportUtility.Models;\n\nnamespace DataExportUtility.Config\n{\n    public class DataExportConfiguration\n    {\n        public string DatabaseConnectionString { get; set; }\n        public string ExportFilePath { get; set; }\n        public LoggingConfiguration LoggingConfiguration { get; set; }\n\n        public static DataExportConfiguration LoadConfiguration(string filePath)\n        {\n            if (!File.Exists(filePath))\n                throw new FileNotFoundException(\"Configuration file not found\", filePath);\n\n            var json = File.ReadAllText(filePath);\n            var config = JsonConvert.DeserializeObject<DataExportConfiguration>(json);\n            if(config == null)\n                throw new Exception(\"Failed to deserialize configuration.\");\n            return config;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0290adcb-2828-44eb-9b1d-5ca3dbe79cc1",
        "Name": "Models",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d32cf15d-3157-402d-8757-94726f17346f",
        "Name": "LoggingConfiguration.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "namespace DataExportUtility.Models\n{\n    public class LoggingConfiguration\n    {\n        public string LogFilePath { get; set; }\n        public string LogLevel { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "fcc1120c-9b41-4236-beb1-48463350ec08",
        "Name": "ExportJob.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "namespace DataExportUtility.Models\n{\n    public class ExportJob\n    {\n        public int JobId { get; set; }\n        public string ExportCriteria { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b8e38d4d-7c6a-4959-af3a-2faffd96db2f",
        "Name": "ExportResult.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "namespace DataExportUtility.Models\n{\n    public class ExportResult\n    {\n        public int RecordsExported { get; set; }\n        public bool Success { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "664b6768-5c04-4552-99bf-9bdf4b79c952",
        "Name": "Services",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0afffa2b-41de-4554-b03a-3dba8a81d9ef",
        "Name": "IExportService.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "using DataExportUtility.Models;\n\nnamespace DataExportUtility.Services\n{\n    public interface IExportService\n    {\n        ExportResult ExportData();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "31c3f30e-4996-4e08-9b0b-a81bc774f2c9",
        "Name": "ExportService.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "using System;\nusing System.Data.SqlClient;\nusing System.IO;\nusing DataExportUtility.Config;\nusing DataExportUtility.Models;\nusing DataExportUtility.Utils;\n\nnamespace DataExportUtility.Services\n{\n    public class ExportService : IExportService\n    {\n        private readonly DataExportConfiguration _config;\n\n        public ExportService(DataExportConfiguration config)\n        {\n            _config = config;\n        }\n\n        public ExportResult ExportData()\n        {\n            var result = new ExportResult();\n            try\n            {\n                using (var connection = new SqlConnection(_config.DatabaseConnectionString))\n                {\n                    connection.Open();\n\n                    string query = \"SELECT * FROM Transactions\";\n                    using (var command = new SqlCommand(query, connection))\n                    {\n                        using (var reader = command.ExecuteReader())\n                        {\n                            // Ensure the export directory exists\n                            var exportDir = Path.GetDirectoryName(_config.ExportFilePath);\n                            if (!Directory.Exists(exportDir))\n                            {\n                                Directory.CreateDirectory(exportDir);\n                            }\n\n                            using (var writer = new StreamWriter(_config.ExportFilePath))\n                            {\n                                // Write CSV header\n                                for (int i = 0; i < reader.FieldCount; i++)\n                                {\n                                    writer.Write(reader.GetName(i) + (i < reader.FieldCount - 1 ? \",\" : \"\"));\n                                }\n                                writer.WriteLine();\n\n                                int count = 0;\n                                while (reader.Read())\n                                {\n                                    for (int i = 0; i < reader.FieldCount; i++)\n                                    {\n                                        writer.Write(reader[i].ToString() + (i < reader.FieldCount - 1 ? \",\" : \"\"));\n                                    }\n                                    writer.WriteLine();\n                                    count++;\n                                }\n                                result.RecordsExported = count;\n                            }\n                        }\n                    }\n                }\n                result.Success = true;\n            }\n            catch (Exception ex)\n            {\n                Logger.Log(\"Export failed: \" + ex.Message);\n                result.Success = false;\n            }\n            return result;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "295f556f-7280-4484-ae55-f420f909c164",
        "Name": "Utils",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e3f3cb30-283b-48ff-88a4-c7a89fbc8129",
        "Name": "Logger.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing DataExportUtility.Models;\n\nnamespace DataExportUtility.Utils\n{\n    public static class Logger\n    {\n        private static string _logFilePath;\n        private static string _logLevel;\n\n        public static void Initialize(LoggingConfiguration config)\n        {\n            _logFilePath = config.LogFilePath;\n            _logLevel = config.LogLevel;\n            var directory = Path.GetDirectoryName(_logFilePath);\n            if (!Directory.Exists(directory))\n            {\n                Directory.CreateDirectory(directory);\n            }\n        }\n\n        public static void Log(string message)\n        {\n            string logMessage = DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\") + \" - \" + message;\n            File.AppendAllText(_logFilePath, logMessage + Environment.NewLine);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "512910f5-3a2a-49b6-ade7-6ddf5d859dbf",
        "Name": "Integration",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "71964c90-45d8-495d-bc47-a5b8407ccb1a",
        "Name": "ExternalExporter.cs",
        "ParentId": "9cb407a2-aa19-4690-b047-babc420ee8e7",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing DataExportUtility.Config;\nusing DataExportUtility.Utils;\n\nnamespace DataExportUtility.Integration\n{\n    public class ExternalExporter\n    {\n        private readonly DataExportConfiguration _config;\n\n        public ExternalExporter(DataExportConfiguration config)\n        {\n            _config = config;\n        }\n\n        public bool UploadExportFile()\n        {\n            try\n            {\n                string filePath = _config.ExportFilePath;\n                if (!File.Exists(filePath))\n                    throw new FileNotFoundException(\"Export file not found.\");\n\n                // Simulate an upload to external storage (FTP, cloud, etc.)\n                Logger.Log(\"Export file uploaded successfully to external storage.\");\n                return true;\n            }\n            catch (Exception ex)\n            {\n                Logger.Log(\"External upload failed: \" + ex.Message);\n                return false;\n            }\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
    "Name": "DataImportUtility",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "1beaf5b8-8a8c-458d-9364-5ad3f560e399",
        "Name": "Program.cs",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 1,
        "Text": "using System;\nusing DataImportUtility.Services;\nusing DataImportUtility.Importers;\n\nnamespace DataImportUtility\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length == 0)\n            {\n                Console.WriteLine(\"Usage: DataImportUtility <FilePath>\");\n                return;\n            }\n\n            string filePath = args[0];\n            try\n            {\n                var importService = new DataImportService(new CsvDataImporter());\n                importService.ImportData(filePath);\n                Console.WriteLine(\"Data import completed successfully.\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error occurred during data import: {ex.Message}\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d04b0a47-8df8-4bf4-b9e8-94daac8ae672",
        "Name": "appsettings.json",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 1,
        "Text": "{\n  \"Database\": {\n    \"ConnectionString\": \"Server=prod-db-server;Database=DataImport;User Id=admin;Password=securepass;\"\n  },\n  \"Logging\": {\n    \"LogLevel\": \"Information\"\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "c6513e37-3b0e-4cc9-9d60-4e61e9290c1a",
        "Name": "Config",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "50b8035f-4bed-4ca1-ab49-f6a19360d1d8",
        "Name": "AppSettings.cs",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 1,
        "Text": "using System.IO;\nusing Microsoft.Extensions.Configuration;\n\nnamespace DataImportUtility.Config\n{\n    public static class AppSettings\n    {\n        public static IConfigurationRoot Configuration { get; }\n\n        static AppSettings()\n        {\n            Configuration = new ConfigurationBuilder()\n                .SetBasePath(Directory.GetCurrentDirectory())\n                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n                .Build();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6443d818-2595-4cdc-bd76-ac1422d6f0fa",
        "Name": "Interfaces",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0f58480b-f029-4edc-8b94-e015c843fe2f",
        "Name": "IDataImporter.cs",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing DataImportUtility.Models;\n\nnamespace DataImportUtility.Interfaces\n{\n    public interface IDataImporter\n    {\n        List<ExternalDataRecord> Import(string filePath);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bb35d867-df68-4814-aae2-c7486da52b2c",
        "Name": "Importers",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5254da2e-2295-4ed1-89b7-b45ea411234d",
        "Name": "CsvDataImporter.cs",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing System.Globalization;\nusing System.Collections.Generic;\nusing DataImportUtility.Models;\nusing DataImportUtility.Interfaces;\n\nnamespace DataImportUtility.Importers\n{\n    public class CsvDataImporter : IDataImporter\n    {\n        public List<ExternalDataRecord> Import(string filePath)\n        {\n            var records = new List<ExternalDataRecord>();\n            if (!File.Exists(filePath))\n            {\n                throw new FileNotFoundException(\"File not found.\", filePath);\n            }\n\n            using (var reader = new StreamReader(filePath))\n            {\n                string headerLine = reader.ReadLine();\n                if (string.IsNullOrEmpty(headerLine))\n                    throw new Exception(\"CSV file is empty.\");\n\n                while (!reader.EndOfStream)\n                {\n                    var line = reader.ReadLine();\n                    if (string.IsNullOrWhiteSpace(line)) continue;\n\n                    var columns = line.Split(',');\n                    if (columns.Length != 5)\n                        throw new Exception(\"CSV file has an incorrect format.\");\n\n                    try\n                    {\n                        var record = new ExternalDataRecord\n                        {\n                            RecordId = Guid.Parse(columns[0].Trim()),\n                            AccountNumber = columns[1].Trim(),\n                            Amount = decimal.Parse(columns[2].Trim(), CultureInfo.InvariantCulture),\n                            TransactionDate = DateTime.Parse(columns[3].Trim(), CultureInfo.InvariantCulture),\n                            Description = columns[4].Trim()\n                        };\n                        records.Add(record);\n                    }\n                    catch (Exception ex)\n                    {\n                        throw new Exception(\"Error parsing CSV record.\", ex);\n                    }\n                }\n            }\n            return records;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3116c58e-2e88-409a-bbe5-6004c60f7a81",
        "Name": "Models",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2497934d-537a-452d-9959-ba5fd672759e",
        "Name": "ExternalDataRecord.cs",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 1,
        "Text": "using System;\n\nnamespace DataImportUtility.Models\n{\n    public class ExternalDataRecord\n    {\n        public Guid RecordId { get; set; }\n        public string AccountNumber { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime TransactionDate { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e2f700fa-a42e-4c59-b249-e2de5889d6a6",
        "Name": "Services",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9e41b9d1-3795-4690-bc5b-f6e22f10223e",
        "Name": "DataImportService.cs",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 1,
        "Text": "using System;\nusing DataImportUtility.Models;\nusing DataImportUtility.Interfaces;\nusing DataImportUtility.Utils;\n\nnamespace DataImportUtility.Services\n{\n    public class DataImportService\n    {\n        private readonly IDataImporter _dataImporter;\n\n        public DataImportService(IDataImporter dataImporter)\n        {\n            _dataImporter = dataImporter;\n        }\n\n        public void ImportData(string filePath)\n        {\n            var records = _dataImporter.Import(filePath);\n            if (records == null || records.Count == 0)\n            {\n                throw new Exception(\"No valid records found in the file.\");\n            }\n\n            foreach (var record in records)\n            {\n                if (!DataValidator.IsValid(record))\n                    throw new Exception($\"Invalid record found with ID: {record.RecordId}\");\n\n                ProcessRecord(record);\n            }\n        }\n\n        private void ProcessRecord(ExternalDataRecord record)\n        {\n            // In a production environment, this method would integrate with a data repository \n            // or transaction system to persist the validated records.\n            Console.WriteLine($\"Processing record {record.RecordId} for Account: {record.AccountNumber}\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a4851b3c-9ef1-4d0b-a036-9725753c13ab",
        "Name": "Utils",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d69b5b7f-d7e4-4220-a240-7d64bda6e06d",
        "Name": "DataValidator.cs",
        "ParentId": "1ad6e594-a99f-46d9-8f91-2c12d1a88794",
        "Type": 1,
        "Text": "using System;\nusing DataImportUtility.Models;\n\nnamespace DataImportUtility.Utils\n{\n    public static class DataValidator\n    {\n        public static bool IsValid(ExternalDataRecord record)\n        {\n            if (record == null) return false;\n            if (record.RecordId == Guid.Empty) return false;\n            if (string.IsNullOrWhiteSpace(record.AccountNumber)) return false;\n            if (record.Amount <= 0) return false;\n            if (record.TransactionDate == default) return false;\n            return true;\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "baa28a31-d5b3-498c-ba2c-55718b17fcf8",
    "Name": "StandardizedErrorHandling",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "53855046-6b93-4478-9654-9e2f1b17246a",
        "Name": "StandardizedErrorHandling.csproj",
        "ParentId": "baa28a31-d5b3-498c-ba2c-55718b17fcf8",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.2.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />\n  </ItemGroup>\n</Project>",
        "Language": 0
      },
      {
        "Id": "4c0fecc1-1126-4d3c-a1f0-3d1f0c898746",
        "Name": "Exceptions",
        "ParentId": "baa28a31-d5b3-498c-ba2c-55718b17fcf8",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6425d7a1-0db9-4ec2-8cf1-c2a4f2411c3c",
        "Name": "Models",
        "ParentId": "baa28a31-d5b3-498c-ba2c-55718b17fcf8",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "91b6d2a7-2a00-496e-b503-94cec21350c4",
        "Name": "Middleware",
        "ParentId": "baa28a31-d5b3-498c-ba2c-55718b17fcf8",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "af31062d-d91f-4ece-8145-cd75cb871987",
        "Name": "Extensions",
        "ParentId": "baa28a31-d5b3-498c-ba2c-55718b17fcf8",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a5f25f82-16fb-4817-bb57-b8230e66f664",
        "Name": "Services",
        "ParentId": "baa28a31-d5b3-498c-ba2c-55718b17fcf8",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "adb860da-818e-421f-8e41-a3dd00114ffc",
    "Name": "DataValidationEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9b063db0-9011-4bd0-a945-459d252ed6ef",
        "Name": "DataValidationEngine.csproj",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n</Project>",
        "Language": 0
      },
      {
        "Id": "85ec7247-57e2-4caa-a757-688abf87d9f4",
        "Name": "Program.cs",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 1,
        "Text": "using DataValidationEngine.Core;\nusing DataValidationEngine.Services;\nusing DataValidationEngine.Utilities;\n\nnamespace DataValidationEngine\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var config = Config.ValidationConfig.Load();\n            var logger = new Logger(config.LogFilePath);\n            var dataModel = new DataModel\n            {\n                Email = \"customer@example.com\",\n                AccountNumber = \"1234567890\",\n                Amount = 1000m\n            };\n\n            var service = new DataValidationService(logger);\n            var result = service.ValidateData(dataModel);\n\n            if (result.IsValid)\n            {\n                logger.Log(\"Data model is valid.\");\n            }\n            else\n            {\n                logger.Log(\"Data model is invalid. Errors:\");\n                foreach (var error in result.Errors)\n                {\n                    logger.Log(error);\n                }\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3a05fce5-a296-4aa6-9ebb-147a09cf4b85",
        "Name": "Core",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1745319a-0df3-4e0a-9f3a-5fde3774bc19",
        "Name": "DataModel.cs",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 1,
        "Text": "namespace DataValidationEngine.Core\n{\n    public class DataModel\n    {\n        public string Email { get; set; } = string.Empty;\n        public string AccountNumber { get; set; } = string.Empty;\n        public decimal Amount { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "2df82a8e-e140-4985-9011-68628e5fca59",
        "Name": "ValidationResult.cs",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 1,
        "Text": "using System.Collections.Generic;\n\nnamespace DataValidationEngine.Core\n{\n    public class ValidationResult\n    {\n        public bool IsValid => Errors.Count == 0;\n        public List<string> Errors { get; } = new List<string>();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3468b1dc-7630-497d-8f51-7c58343b4fef",
        "Name": "Validator.cs",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 1,
        "Text": "using System;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace DataValidationEngine.Core\n{\n    public class Validator\n    {\n        private readonly Config.ValidationConfig _config;\n\n        public Validator(Config.ValidationConfig config)\n        {\n            _config = config;\n        }\n        \n        public ValidationResult Validate(DataModel model)\n        {\n            var result = new ValidationResult();\n\n            if (!ValidateEmail(model.Email))\n                result.Errors.Add(\"Invalid email format.\");\n\n            if (!ValidateAccountNumber(model.AccountNumber))\n                result.Errors.Add($\"Invalid account number. It must be numeric and of length {_config.AccountNumberLength}.\");\n            \n            if (!ValidateAmount(model.Amount))\n                result.Errors.Add(\"Amount must be greater than zero.\");\n\n            return result;\n        }\n\n        public bool ValidateEmail(string email)\n        {\n            if (string.IsNullOrWhiteSpace(email))\n                return false;\n\n            var pattern = \"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\";\n            return Regex.IsMatch(email, pattern, RegexOptions.IgnoreCase);\n        }\n\n        public bool ValidateAccountNumber(string accountNumber)\n        {\n            if (string.IsNullOrWhiteSpace(accountNumber))\n                return false;\n\n            if (accountNumber.Length != _config.AccountNumberLength)\n                return false;\n\n            return accountNumber.All(char.IsDigit);\n        }\n\n        public bool ValidateAmount(decimal amount)\n        {\n            return amount > 0;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a8ae72f8-cd50-480f-9555-25fa52b0b910",
        "Name": "Services",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "214f4f4a-bc96-4e07-9d35-10878bdbcb75",
        "Name": "DataValidationService.cs",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 1,
        "Text": "using DataValidationEngine.Core;\nusing DataValidationEngine.Utilities;\n\nnamespace DataValidationEngine.Services\n{\n    public class DataValidationService\n    {\n        private readonly Logger _logger;\n        private readonly Validator _validator;\n        \n        public DataValidationService(Logger logger)\n        {\n            _logger = logger;\n            var config = Config.ValidationConfig.Load();\n            _validator = new Validator(config);\n        }\n        \n        public ValidationResult ValidateData(DataModel model)\n        {\n            _logger.Log(\"Starting data validation.\");\n            var result = _validator.Validate(model);\n            _logger.Log(\"Data validation completed.\");\n            return result;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5513f6d1-a4af-4666-88af-11cd96c67b80",
        "Name": "Config",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4c83b750-be19-408b-927a-6a26ee205422",
        "Name": "ValidationConfig.cs",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 1,
        "Text": "using System.IO;\nusing Newtonsoft.Json;\n\nnamespace DataValidationEngine.Config\n{\n    public class ValidationConfig\n    {\n        public int AccountNumberLength { get; set; } = 10;\n        public string LogFilePath { get; set; } = \"logs.txt\";\n\n        public static ValidationConfig Load()\n        {\n            var configPath = \"validationConfig.json\";\n            if (File.Exists(configPath))\n            {\n                var json = File.ReadAllText(configPath);\n                return JsonConvert.DeserializeObject<ValidationConfig>(json) ?? new ValidationConfig();\n            }\n            return new ValidationConfig();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d28a66b2-ea17-465b-b60a-5847dc3f57f9",
        "Name": "Utilities",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "cd812249-4bf9-451b-b26f-d313a8cfe0e4",
        "Name": "Logger.cs",
        "ParentId": "adb860da-818e-421f-8e41-a3dd00114ffc",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\n\nnamespace DataValidationEngine.Utilities\n{\n    public class Logger\n    {\n        private readonly string _logFilePath;\n\n        public Logger(string logFilePath)\n        {\n            _logFilePath = logFilePath;\n        }\n\n        public void Log(string message)\n        {\n            var logEntry = $\"{DateTime.UtcNow:o}: {message}\";\n            File.AppendAllText(_logFilePath, logEntry + Environment.NewLine);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
    "Name": "APIGatewayService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "2222826c-aded-4056-b396-0698c5dffb2a",
        "Name": "Program.cs",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing APIGatewayService.Middleware;\nusing APIGatewayService.Configurations;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Bind Gateway configuration from appsettings\nbuilder.Services.Configure<GatewayConfiguration>(builder.Configuration.GetSection(\"Gateway\"));\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<APIGatewayService.Services.GatewayService>();\n\nvar app = builder.Build();\n\napp.UseMiddleware<LoggingMiddleware>();\napp.UseMiddleware<AuthenticationMiddleware>();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "763cbca9-fee3-435e-9267-c23f394942b9",
        "Name": "appsettings.json",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"Gateway\": {\n    \"PaymentServiceUrl\": \"https://payment.digitalbank.com/api\",\n    \"AccountServiceUrl\": \"https://account.digitalbank.com/api\"\n  }\n}",
        "Language": 0
      },
      {
        "Id": "4290dd63-9e8f-41d9-aff0-1a96c3f82683",
        "Name": "Controllers",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e7aa6586-9a1f-4dc2-b563-d84bbc0c3ed8",
        "Name": "GatewayController.cs",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing APIGatewayService.Models;\nusing APIGatewayService.Services;\n\nnamespace APIGatewayService.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class GatewayController : ControllerBase\n    {\n        private readonly GatewayService _gatewayService;\n        \n        public GatewayController(GatewayService gatewayService)\n        {\n            _gatewayService = gatewayService;\n        }\n        \n        [HttpPost(\"forward\")]\n        public async Task<IActionResult> Forward([FromBody] ForwardRequest request)\n        {\n            var response = await _gatewayService.ForwardRequest(request);\n            return Ok(response);\n        }\n        \n        [HttpGet(\"health\")]\n        public IActionResult Health()\n        {\n            return Ok(new { status = \"Healthy\" });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "52d46471-a2a8-4891-bca7-b1127acabffe",
        "Name": "Middleware",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3b33e068-aa10-45d6-8083-7a09065e359f",
        "Name": "AuthenticationMiddleware.cs",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "using System;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing System.IdentityModel.Tokens.Jwt;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace APIGatewayService.Middleware\n{\n    public class AuthenticationMiddleware\n    {\n        private readonly RequestDelegate _next;\n        \n        public AuthenticationMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n        \n        public async Task InvokeAsync(HttpContext context)\n        {\n            if (!context.Request.Headers.ContainsKey(\"Authorization\"))\n            {\n                context.Response.StatusCode = 401;\n                await context.Response.WriteAsync(\"Authorization header missing.\");\n                return;\n            }\n            \n            var token = context.Request.Headers[\"Authorization\"].ToString().Replace(\"Bearer \", \"\");\n            var tokenHandler = new JwtSecurityTokenHandler();\n            try\n            {\n                // Validate token using a secure secret key; production secret should be stored securely\n                var key = Encoding.ASCII.GetBytes(\"YourSecureSecretKeyForJWTValidation\");\n                tokenHandler.ValidateToken(token, new TokenValidationParameters\n                {\n                    ValidateIssuerSigningKey = true,\n                    IssuerSigningKey = new SymmetricSecurityKey(key),\n                    ValidateIssuer = false,\n                    ValidateAudience = false,\n                    ClockSkew = TimeSpan.Zero\n                }, out SecurityToken validatedToken);\n            }\n            catch\n            {\n                context.Response.StatusCode = 401;\n                await context.Response.WriteAsync(\"Invalid token.\");\n                return;\n            }\n            \n            await _next(context);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "30b8b46e-d17f-4b89-b2f5-598b117d1531",
        "Name": "LoggingMiddleware.cs",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\n\nnamespace APIGatewayService.Middleware\n{\n    public class LoggingMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly ILogger<LoggingMiddleware> _logger;\n        \n        public LoggingMiddleware(RequestDelegate next, ILogger<LoggingMiddleware> logger)\n        {\n            _next = next;\n            _logger = logger;\n        }\n        \n        public async Task InvokeAsync(HttpContext context)\n        {\n            // Log incoming request\n            context.Request.EnableBuffering();\n            var requestBody = await new StreamReader(context.Request.Body, Encoding.UTF8, leaveOpen: true).ReadToEndAsync();\n            context.Request.Body.Position = 0;\n            _logger.LogInformation(\"Incoming Request: {Method} {Path} => {Body}\", context.Request.Method, context.Request.Path, requestBody);\n            \n            // Replace the response stream to capture the response\n            var originalBodyStream = context.Response.Body;\n            using var responseBodyStream = new MemoryStream();\n            context.Response.Body = responseBodyStream;\n            \n            await _next(context);\n            \n            context.Response.Body.Seek(0, SeekOrigin.Begin);\n            var responseBody = await new StreamReader(context.Response.Body).ReadToEndAsync();\n            context.Response.Body.Seek(0, SeekOrigin.Begin);\n            \n            _logger.LogInformation(\"Outgoing Response: {StatusCode} => {Body}\", context.Response.StatusCode, responseBody);\n            \n            await responseBodyStream.CopyToAsync(originalBodyStream);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f7167b8b-76af-444d-b547-b34091168ad4",
        "Name": "Services",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "30c546e1-f2f3-4dd9-85de-e51a1270db4f",
        "Name": "GatewayService.cs",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing APIGatewayService.Models;\nusing Microsoft.Extensions.Options;\nusing APIGatewayService.Configurations;\n\nnamespace APIGatewayService.Services\n{\n    public class GatewayService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly GatewayConfiguration _config;\n        \n        public GatewayService(IOptions<GatewayConfiguration> config)\n        {\n            _config = config.Value;\n            _httpClient = new HttpClient();\n        }\n        \n        public async Task<ForwardResponse> ForwardRequest(ForwardRequest request)\n        {\n            // Determine the target microservice endpoint based on the service identifier\n            string serviceUrl = request.Service.ToLower() switch\n            {\n                \"payment\" => _config.PaymentServiceUrl,\n                \"account\" => _config.AccountServiceUrl,\n                _ => throw new ArgumentException(\"Unknown service\")\n            };\n            \n            var targetUrl = $\"{serviceUrl}/{request.Endpoint.TrimStart('/') }\";\n            var httpRequestMessage = new HttpRequestMessage(new HttpMethod(request.Method), targetUrl)\n            {\n                Content = new StringContent(request.Payload, System.Text.Encoding.UTF8, \"application/json\")\n            };\n            \n            HttpResponseMessage response = await _httpClient.SendAsync(httpRequestMessage);\n            response.EnsureSuccessStatusCode();\n            var content = await response.Content.ReadAsStringAsync();\n            \n            return new ForwardResponse { StatusCode = (int)response.StatusCode, ResponseBody = content };\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b71960cb-36ce-4641-811f-da791b8c3539",
        "Name": "Models",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b4541af7-e388-4053-95ca-c3456e79eb28",
        "Name": "ForwardRequest.cs",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "namespace APIGatewayService.Models\n{\n    public class ForwardRequest\n    {\n        public string Service { get; set; }  // e.g., \"payment\", \"account\"\n        public string Endpoint { get; set; } // API endpoint path\n        public string Method { get; set; }   // HTTP method: GET, POST, etc.\n        public string Payload { get; set; }  // Request payload in JSON format\n    }\n}",
        "Language": 0
      },
      {
        "Id": "fd174eae-b8b2-445c-b73c-23f3ce2dba83",
        "Name": "ForwardResponse.cs",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "namespace APIGatewayService.Models\n{\n    public class ForwardResponse\n    {\n        public int StatusCode { get; set; }\n        public string ResponseBody { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "77789b7f-ea8b-4418-80a7-7761dec09022",
        "Name": "Configurations",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "45e6c567-017b-42f3-931c-6005bcf28615",
        "Name": "GatewayConfiguration.cs",
        "ParentId": "3b5e05c8-2488-4b4a-821e-66f5a416e564",
        "Type": 1,
        "Text": "namespace APIGatewayService.Configurations\n{\n    public class GatewayConfiguration\n    {\n        public string PaymentServiceUrl { get; set; }\n        public string AccountServiceUrl { get; set; }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
    "Name": "MicroservicesOrchestrator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "7c856a95-71b1-4c17-9bfc-cabb96cfebbc",
        "Name": "Program.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MicroservicesOrchestrator\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "24c10bc8-fc4d-4c21-993c-a60deadd468e",
        "Name": "Startup.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MicroservicesOrchestrator.Services;\nusing System;\n\nnamespace MicroservicesOrchestrator\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient(\"MicroserviceClient\")\n                .SetHandlerLifetime(TimeSpan.FromMinutes(5));\n            services.AddScoped<IOrchestratorService, OrchestratorService>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseAuthorization();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5bbd0e21-9bdd-4a46-b6fb-74f93ff1e4bc",
        "Name": "Controllers",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b072eaf6-cd7f-49ad-bcce-12b186ad66b2",
        "Name": "MicroservicesController.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing MicroservicesOrchestrator.Services;\nusing MicroservicesOrchestrator.Models;\nusing System.Threading.Tasks;\n\nnamespace MicroservicesOrchestrator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MicroservicesController : ControllerBase\n    {\n        private readonly IOrchestratorService _orchestratorService;\n\n        public MicroservicesController(IOrchestratorService orchestratorService)\n        {\n            _orchestratorService = orchestratorService;\n        }\n\n        [HttpPost(\"orchestrate\")]\n        public async Task<IActionResult> Orchestrate([FromBody] MicroserviceRequest request)\n        {\n            if (request == null)\n            {\n                return BadRequest(\"Invalid request payload.\");\n            }\n            OrchestrationResult result = await _orchestratorService.OrchestrateAsync(request);\n            return Ok(result);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9a8019ab-8ae7-4397-a70f-e2098af54540",
        "Name": "Services",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "75565529-25cc-4cdb-85cb-780e17bc465e",
        "Name": "IOrchestratorService.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing MicroservicesOrchestrator.Models;\n\nnamespace MicroservicesOrchestrator.Services\n{\n    public interface IOrchestratorService\n    {\n        Task<OrchestrationResult> OrchestrateAsync(MicroserviceRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "95352e90-8a10-426e-8d08-468d840402a4",
        "Name": "OrchestratorService.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing MicroservicesOrchestrator.Models;\nusing System.Net.Http;\nusing Microsoft.Extensions.Logging;\nusing System.Collections.Generic;\nusing System.Net;\n\nnamespace MicroservicesOrchestrator.Services\n{\n    public class OrchestratorService : IOrchestratorService\n    {\n        private readonly IHttpClientFactory _httpClientFactory;\n        private readonly ILogger<OrchestratorService> _logger;\n\n        public OrchestratorService(IHttpClientFactory httpClientFactory, ILogger<OrchestratorService> logger)\n        {\n            _httpClientFactory = httpClientFactory;\n            _logger = logger;\n        }\n\n        public async Task<OrchestrationResult> OrchestrateAsync(MicroserviceRequest request)\n        {\n            var result = new OrchestrationResult\n            {\n                TransactionId = request.TransactionId,\n                Responses = new List<MicroserviceResponse>()\n            };\n\n            // Determine services to call based on the request's ServiceType. In a production environment, this mapping would come from configuration.\n            List<(string serviceName, string url)> servicesToCall = GetServicesForType(request.ServiceType);\n\n            foreach (var service in servicesToCall)\n            {\n                var responseItem = new MicroserviceResponse { ServiceName = service.serviceName };\n                try\n                {\n                    var client = _httpClientFactory.CreateClient(\"MicroserviceClient\");\n                    var response = await client.GetAsync(service.url);\n                    if (response.StatusCode == HttpStatusCode.OK)\n                    {\n                        var content = await response.Content.ReadAsStringAsync();\n                        responseItem.Success = true;\n                        responseItem.Data = content;\n                    }\n                    else\n                    {\n                        responseItem.Success = false;\n                        responseItem.ErrorMessage = $\"Failed with status code: {response.StatusCode}\";\n                    }\n                }\n                catch (System.Exception ex)\n                {\n                    _logger.LogError(ex, $\"Error calling service {service.serviceName}\");\n                    responseItem.Success = false;\n                    responseItem.ErrorMessage = ex.Message;\n                }\n                result.Responses.Add(responseItem);\n            }\n\n            result.OverallSuccess = result.Responses.TrueForAll(r => r.Success);\n            return result;\n        }\n\n        private List<(string serviceName, string url)> GetServicesForType(string serviceType)\n        {\n            if (serviceType == \"Payment\")\n            {\n                return new List<(string, string)>\n                {\n                    (\"PaymentService\", \"https://api.digitalbank.com/payment/process\"),\n                    (\"FraudService\", \"https://api.digitalbank.com/fraud/validate\")\n                };\n            }\n            else if (serviceType == \"Registration\")\n            {\n                return new List<(string, string)>\n                {\n                    (\"RegistrationService\", \"https://api.digitalbank.com/registration/create\"),\n                    (\"KYCService\", \"https://api.digitalbank.com/kyc/verify\")\n                };\n            }\n            else\n            {\n                return new List<(string, string)>\n                {\n                    (\"DefaultService\", \"https://api.digitalbank.com/default/execute\")\n                };\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "eda5fcd9-0764-4fc1-b45c-aed93d99be1d",
        "Name": "Models",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7e96cb9e-6acd-41ea-ad72-7a1c94a2c13e",
        "Name": "MicroserviceRequest.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "namespace MicroservicesOrchestrator.Models\n{\n    public class MicroserviceRequest\n    {\n        public string TransactionId { get; set; }\n        public string ServiceType { get; set; }\n        // Additional relevant properties can be added as required.\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e064a170-11c0-47d2-ada6-08370fb731dc",
        "Name": "MicroserviceResponse.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "namespace MicroservicesOrchestrator.Models\n{\n    public class MicroserviceResponse\n    {\n        public string ServiceName { get; set; }\n        public bool Success { get; set; }\n        public string Data { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1ed0314a-03aa-433a-a4b1-2d07bdff0292",
        "Name": "OrchestrationResult.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "using System.Collections.Generic;\n\nnamespace MicroservicesOrchestrator.Models\n{\n    public class OrchestrationResult\n    {\n        public string TransactionId { get; set; }\n        public bool OverallSuccess { get; set; }\n        public List<MicroserviceResponse> Responses { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "cea4aa59-b454-4457-99fa-ce7680276f98",
        "Name": "Infrastructure",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "616fe170-b5c6-46e2-a4a8-72e5d0f46ab2",
        "Name": "MicroserviceClient.cs",
        "ParentId": "94f49d86-b03b-4179-ba7e-479ceeb797c3",
        "Type": 1,
        "Text": "using System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace MicroservicesOrchestrator.Infrastructure\n{\n    public class MicroserviceClient\n    {\n        private readonly HttpClient _client;\n\n        public MicroserviceClient(HttpClient client)\n        {\n            _client = client;\n        }\n\n        public async Task<HttpResponseMessage> GetAsync(string url)\n        {\n            return await _client.GetAsync(url);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
    "Name": "SessionManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "62135dd1-fe2b-404a-a0e0-2629be7441f3",
        "Name": "Program.cs",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SessionManagementSystem.Services;\nusing SessionManagementSystem.Repository;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ISessionRepository, SessionRepository>();\nbuilder.Services.AddSingleton<ISessionService, SessionService>();\n\n// Add Swagger for API documentation.\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();",
        "Language": 0
      },
      {
        "Id": "58b725ad-147c-476e-8eeb-d7a5149f87c9",
        "Name": "SessionManagementSystem.csproj",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net7.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"7.0.0\" />\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.2.3\" />\n  </ItemGroup>\n</Project>",
        "Language": 0
      },
      {
        "Id": "354a89d9-cb67-41d1-a301-80b40dd3996d",
        "Name": "Controllers",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a744b890-6609-4517-a35c-e5839d3e4c10",
        "Name": "SessionController.cs",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing SessionManagementSystem.Models;\nusing SessionManagementSystem.Services;\n\nnamespace SessionManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SessionController : ControllerBase\n    {\n        private readonly ISessionService _sessionService;\n\n        public SessionController(ISessionService sessionService)\n        {\n            _sessionService = sessionService;\n        }\n\n        [HttpPost]\n        public IActionResult CreateSession([FromBody] Session session)\n        {\n            var createdSession = _sessionService.CreateSession(session);\n            return CreatedAtAction(nameof(GetSession), new { sessionId = createdSession.SessionId }, createdSession);\n        }\n\n        [HttpGet(\"{sessionId}\")]\n        public IActionResult GetSession(string sessionId)\n        {\n            var session = _sessionService.GetSession(sessionId);\n            if (session == null)\n            {\n                return NotFound();\n            }\n            return Ok(session);\n        }\n\n        [HttpDelete(\"{sessionId}\")]\n        public IActionResult DeleteSession(string sessionId)\n        {\n            bool removed = _sessionService.DeleteSession(sessionId);\n            if (!removed)\n            {\n                return NotFound();\n            }\n            return NoContent();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a6d24174-b2f2-4606-8595-44a4ba509b88",
        "Name": "Services",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "76f13c4c-b162-4d33-a515-4d2f74cea8a3",
        "Name": "SessionService.cs",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 1,
        "Text": "using System;\nusing SessionManagementSystem.Models;\nusing SessionManagementSystem.Repository;\n\nnamespace SessionManagementSystem.Services\n{\n    public interface ISessionService\n    {\n        Session CreateSession(Session session);\n        Session GetSession(string sessionId);\n        bool DeleteSession(string sessionId);\n    }\n\n    public class SessionService : ISessionService\n    {\n        private readonly ISessionRepository _sessionRepository;\n\n        public SessionService(ISessionRepository sessionRepository)\n        {\n            _sessionRepository = sessionRepository;\n        }\n\n        public Session CreateSession(Session session)\n        {\n            session.SessionId = Guid.NewGuid().ToString();\n            session.CreatedAt = DateTime.UtcNow;\n            session.ExpiresAt = session.CreatedAt.AddMinutes(session.TimeoutInMinutes);\n            \n            // Optionally encrypt session data before storage\n            if (!string.IsNullOrEmpty(session.Data))\n            {\n                session.Data = SessionManagementSystem.Utils.EncryptionHelper.Encrypt(session.Data);\n            }\n\n            _sessionRepository.AddSession(session);\n            return session;\n        }\n\n        public Session GetSession(string sessionId)\n        {\n            var session = _sessionRepository.GetSession(sessionId);\n            if (session != null && session.ExpiresAt < DateTime.UtcNow)\n            {\n                _sessionRepository.RemoveSession(sessionId);\n                return null;\n            }\n            return session;\n        }\n\n        public bool DeleteSession(string sessionId)\n        {\n            return _sessionRepository.RemoveSession(sessionId);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "85a8e52b-2dbc-4d41-bac5-9d67d12ebf7c",
        "Name": "Models",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "46121036-369e-424e-8365-5a2d88647658",
        "Name": "Session.cs",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 1,
        "Text": "using System;\n\nnamespace SessionManagementSystem.Models\n{\n    public class Session\n    {\n        public string SessionId { get; set; } = string.Empty;\n        public string UserId { get; set; } = string.Empty;\n        public DateTime CreatedAt { get; set; }\n        public DateTime ExpiresAt { get; set; }\n        public int TimeoutInMinutes { get; set; } = 30;\n        public string Data { get; set; } = string.Empty; // Encrypted session data if applicable\n    }\n}",
        "Language": 0
      },
      {
        "Id": "7345b1a6-9f20-4299-80bf-578f28e2ad02",
        "Name": "Repository",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b8099262-8424-453b-bedb-e62d5d61f2ab",
        "Name": "SessionRepository.cs",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 1,
        "Text": "using System.Collections.Concurrent;\nusing SessionManagementSystem.Models;\n\nnamespace SessionManagementSystem.Repository\n{\n    public interface ISessionRepository\n    {\n        void AddSession(Session session);\n        Session GetSession(string sessionId);\n        bool RemoveSession(string sessionId);\n    }\n\n    public class SessionRepository : ISessionRepository\n    {\n        private readonly ConcurrentDictionary<string, Session> _sessions = new();\n\n        public void AddSession(Session session)\n        {\n            _sessions[session.SessionId] = session;\n        }\n\n        public Session GetSession(string sessionId)\n        {\n            _sessions.TryGetValue(sessionId, out var session);\n            return session;\n        }\n\n        public bool RemoveSession(string sessionId)\n        {\n            return _sessions.TryRemove(sessionId, out _);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "1159d4ce-6b5c-42f3-98ab-a39d0e924c79",
        "Name": "Utils",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "71c7e58e-5793-4285-b6cb-1b810783f6ff",
        "Name": "EncryptionHelper.cs",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace SessionManagementSystem.Utils\n{\n    public static class EncryptionHelper\n    {\n        // In production, use secure key management practices. This key should be stored securely.\n        private static readonly string EncryptionKey = \"YourSecureEncryptionKey\";\n\n        public static string Encrypt(string plainText)\n        {\n            using Aes aes = Aes.Create();\n            aes.Key = Encoding.UTF8.GetBytes(EncryptionKey.PadRight(32));\n            aes.GenerateIV();\n            using MemoryStream ms = new();\n            // Write IV to the beginning of the stream\n            ms.Write(aes.IV, 0, aes.IV.Length);\n            using (CryptoStream cs = new(ms, aes.CreateEncryptor(aes.Key, aes.IV), CryptoStreamMode.Write))\n            using (StreamWriter sw = new(cs))\n            {\n                sw.Write(plainText);\n            }\n            return Convert.ToBase64String(ms.ToArray());\n        }\n\n        public static string Decrypt(string cipherText)\n        {\n            byte[] fullCipher = Convert.FromBase64String(cipherText);\n            using Aes aes = Aes.Create();\n            aes.Key = Encoding.UTF8.GetBytes(EncryptionKey.PadRight(32));\n            byte[] iv = new byte[aes.BlockSize / 8];\n            Array.Copy(fullCipher, iv, iv.Length);\n            aes.IV = iv;\n            using MemoryStream ms = new();\n            ms.Write(fullCipher, iv.Length, fullCipher.Length - iv.Length);\n            ms.Position = 0;\n            using CryptoStream cs = new(ms, aes.CreateDecryptor(aes.Key, aes.IV), CryptoStreamMode.Read);\n            using StreamReader sr = new(cs);\n            return sr.ReadToEnd();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "4b1bf746-367e-4e6b-aba1-31749a0e24d8",
        "Name": "Config",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2337be66-5957-4b3a-9919-5a3f1213cf19",
        "Name": "AppSettings.cs",
        "ParentId": "77391002-cfb3-47a6-a1f4-b5e57e7e5a44",
        "Type": 1,
        "Text": "namespace SessionManagementSystem.Config\n{\n    public class AppSettings\n    {\n        public string EncryptionKey { get; set; } = string.Empty;\n        public int DefaultSessionTimeout { get; set; } = 30;\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "a8fde362-a358-47cc-8c6e-fdf13e3baf74",
    "Name": "OAuthIntegrationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "88abd376-1037-423c-a198-48a64c77c09d",
        "Name": "Program.cs",
        "ParentId": "a8fde362-a358-47cc-8c6e-fdf13e3baf74",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace OAuthIntegrationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "6dea8834-fcc9-429e-b10a-e8c7b8b178d6",
        "Name": "Startup.cs",
        "ParentId": "a8fde362-a358-47cc-8c6e-fdf13e3baf74",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing OAuthIntegrationService.Services;\nusing System.Text;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace OAuthIntegrationService\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddScoped<IOAuthService, OAuthService>();\n\n            // Configure JWT authentication\n            var key = Encoding.ASCII.GetBytes(Configuration[\"Jwt:Secret\"]);\n            services.AddAuthentication(options =>\n            {\n                options.DefaultAuthenticateScheme = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme;\n                options.DefaultChallengeScheme = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme;\n            })\n            .AddJwtBearer(options =>\n            {\n                options.TokenValidationParameters = new TokenValidationParameters\n                {\n                    ValidateIssuerSigningKey = true,\n                    IssuerSigningKey = new SymmetricSecurityKey(key),\n                    ValidateIssuer = false,\n                    ValidateAudience = false\n                };\n            });\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseAuthentication();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "9d2885e4-cb8e-4644-ad8c-fdb4813f0c61",
        "Name": "Controllers",
        "ParentId": "a8fde362-a358-47cc-8c6e-fdf13e3baf74",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fa0919e4-98c5-44e5-b4d4-92ec1d09fe51",
        "Name": "Services",
        "ParentId": "a8fde362-a358-47cc-8c6e-fdf13e3baf74",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a5a67080-243f-470e-9e8f-bab802bfa365",
        "Name": "Models",
        "ParentId": "a8fde362-a358-47cc-8c6e-fdf13e3baf74",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
    "Name": "CustomerFeedbackCollector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "0c181e30-2e83-4e32-8f93-f3b44925be6a",
        "Name": "Program.cs",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.EntityFrameworkCore;\nusing CustomerFeedbackCollector.Data;\nusing CustomerFeedbackCollector.Services;\nusing CustomerFeedbackCollector.Repository;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\n\nbuilder.Services.AddDbContext<ApplicationDbContext>(options =>\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\")));\n\nbuilder.Services.AddScoped<IFeedbackService, FeedbackService>();\nbuilder.Services.AddScoped<IFeedbackRepository, FeedbackRepository>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "cbe2478b-2a3f-429b-b852-bd5fc0cc846e",
        "Name": "Controllers",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ab9bd1c9-8e1d-4f6a-8f92-4ef812dd359a",
        "Name": "FeedbackController.cs",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing CustomerFeedbackCollector.Models;\nusing CustomerFeedbackCollector.Services;\n\nnamespace CustomerFeedbackCollector.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class FeedbackController : ControllerBase\n    {\n        private readonly IFeedbackService _feedbackService;\n\n        public FeedbackController(IFeedbackService feedbackService)\n        {\n            _feedbackService = feedbackService;\n        }\n\n        [HttpPost(\"submit\")]\n        public async Task<IActionResult> SubmitFeedback([FromBody] Feedback feedback)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n            var result = await _feedbackService.SubmitFeedbackAsync(feedback);\n            if (result)\n            {\n                return Ok(new { Message = \"Feedback submitted successfully.\" });\n            }\n            return StatusCode(500, new { Message = \"An error occurred while processing the feedback.\" });\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllFeedback()\n        {\n            var feedbacks = await _feedbackService.GetAllFeedbackAsync();\n            return Ok(feedbacks);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5596f19f-410f-4df0-9e3b-49937c23d50c",
        "Name": "Models",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "15d72cee-2d5a-46e1-a310-44bddc133200",
        "Name": "Feedback.cs",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 1,
        "Text": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace CustomerFeedbackCollector.Models\n{\n    public class Feedback\n    {\n        public int Id { get; set; }\n\n        [Required]\n        [StringLength(100)]\n        public string CustomerName { get; set; }\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        [StringLength(1000)]\n        public string Comments { get; set; }\n\n        public DateTime SubmittedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bd1f1e04-66f3-44f7-88da-901a61162cfd",
        "Name": "Services",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7aedaa58-62a2-4456-9e65-bfcef4f0d2fd",
        "Name": "IFeedbackService.cs",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing CustomerFeedbackCollector.Models;\n\nnamespace CustomerFeedbackCollector.Services\n{\n    public interface IFeedbackService\n    {\n        Task<bool> SubmitFeedbackAsync(Feedback feedback);\n        Task<List<Feedback>> GetAllFeedbackAsync();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a4a3236f-0448-443b-88f1-aa74b3b357f7",
        "Name": "FeedbackService.cs",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing CustomerFeedbackCollector.Models;\nusing CustomerFeedbackCollector.Repository;\n\nnamespace CustomerFeedbackCollector.Services\n{\n    public class FeedbackService : IFeedbackService\n    {\n        private readonly IFeedbackRepository _feedbackRepository;\n\n        public FeedbackService(IFeedbackRepository feedbackRepository)\n        {\n            _feedbackRepository = feedbackRepository;\n        }\n\n        public async Task<bool> SubmitFeedbackAsync(Feedback feedback)\n        {\n            return await _feedbackRepository.InsertFeedbackAsync(feedback);\n        }\n\n        public async Task<List<Feedback>> GetAllFeedbackAsync()\n        {\n            return await _feedbackRepository.GetAllFeedbackAsync();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1fe4efba-37f2-4c76-8b06-489659ab9ab1",
        "Name": "Repository",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "251da579-29b7-4c0d-aee6-e4d2f8d9ee9b",
        "Name": "IFeedbackRepository.cs",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing CustomerFeedbackCollector.Models;\n\nnamespace CustomerFeedbackCollector.Repository\n{\n    public interface IFeedbackRepository\n    {\n        Task<bool> InsertFeedbackAsync(Feedback feedback);\n        Task<List<Feedback>> GetAllFeedbackAsync();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0f328a19-dce7-44ba-8f6b-5d90a457fe08",
        "Name": "FeedbackRepository.cs",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing CustomerFeedbackCollector.Models;\nusing CustomerFeedbackCollector.Data;\n\nnamespace CustomerFeedbackCollector.Repository\n{\n    public class FeedbackRepository : IFeedbackRepository\n    {\n        private readonly ApplicationDbContext _context;\n\n        public FeedbackRepository(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<bool> InsertFeedbackAsync(Feedback feedback)\n        {\n            await _context.Feedbacks.AddAsync(feedback);\n            var recordsAffected = await _context.SaveChangesAsync();\n            return recordsAffected > 0;\n        }\n\n        public async Task<List<Feedback>> GetAllFeedbackAsync()\n        {\n            return await _context.Feedbacks.AsNoTracking().ToListAsync();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "087703a8-98a7-485e-9c84-0b54884a41d6",
        "Name": "Data",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "916471ab-a482-4643-9e09-aba6f8d7f406",
        "Name": "ApplicationDbContext.cs",
        "ParentId": "e6dd0210-dd03-423b-a63f-81c8c908b42e",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing CustomerFeedbackCollector.Models;\n\nnamespace CustomerFeedbackCollector.Data\n{\n    public class ApplicationDbContext : DbContext\n    {\n        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)\n        {\n        }\n\n        public DbSet<Feedback> Feedbacks { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n            modelBuilder.Entity<Feedback>(entity =>\n            {\n                entity.HasKey(e => e.Id);\n                entity.Property(e => e.CustomerName).IsRequired().HasMaxLength(100);\n                entity.Property(e => e.Email).IsRequired();\n                entity.Property(e => e.Comments).IsRequired().HasMaxLength(1000);\n                entity.Property(e => e.SubmittedAt).IsRequired();\n            });\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
    "Name": "ChatSupportIntegration",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "f942c4d3-caf5-4580-a5b4-3a8265b64e93",
        "Name": "Program.cs",
        "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ChatSupportIntegration\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "ab5e7b53-3eec-4e20-9e7d-8c42c440c469",
        "Name": "Startup.cs",
        "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ChatSupportIntegration.Services;\nusing ChatSupportIntegration.Infrastructure;\n\nnamespace ChatSupportIntegration\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddHttpClient();\n            services.AddLogging();\n            services.AddSingleton<IChatService, ChatService>();\n            services.AddSingleton<IIntegrationService, IntegrationService>();\n            services.AddSingleton<IChatLogger, ChatLogger>();\n            services.AddSingleton<IIntegrationAdapter, IntegrationAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "700541b0-4055-4978-a5fd-c8f991e0d04e",
        "Name": "Controllers",
        "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
        "Type": 0,
        "Items": [
          {
            "Id": "978b6712-b21c-4b7b-be2a-6cda3ccfb491",
            "Name": "ChatSupportController.cs",
            "ParentId": "700541b0-4055-4978-a5fd-c8f991e0d04e",
            "Type": 1,
            "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Services;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ChatSupportController : ControllerBase\n    {\n        private readonly IChatService _chatService;\n\n        public ChatSupportController(IChatService chatService)\n        {\n            _chatService = chatService;\n        }\n\n        [HttpGet(\"{sessionId}\")]\n        public async Task<ActionResult<ChatSession>> GetChatSession(string sessionId)\n        {\n            var session = await _chatService.GetChatSessionAsync(sessionId);\n            if (session == null) \n                return NotFound();\n            \n            return Ok(session);\n        }\n\n        [HttpPost]\n        public async Task<ActionResult<ChatMessage>> PostChatMessage([FromBody] ChatMessage message)\n        {\n            var processedMessage = await _chatService.ProcessChatMessageAsync(message);\n            return Ok(processedMessage);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "594b8602-470f-4492-aded-f06e7291d378",
        "Name": "Services",
        "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
        "Type": 0,
        "Items": [
          {
            "Id": "7acdcfc2-f1e2-4264-87e1-d933f4aa23d9",
            "Name": "ChatService.cs",
            "ParentId": "594b8602-470f-4492-aded-f06e7291d378",
            "Type": 1,
            "Text": "using System;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\nusing ChatSupportIntegration.Infrastructure;\n\nnamespace ChatSupportIntegration.Services\n{\n    public interface IChatService\n    {\n        Task<ChatSession> GetChatSessionAsync(string sessionId);\n        Task<ChatMessage> ProcessChatMessageAsync(ChatMessage message);\n    }\n\n    public class ChatService : IChatService\n    {\n        private readonly IIntegrationService _integrationService;\n        private readonly IChatLogger _chatLogger;\n\n        public ChatService(IIntegrationService integrationService, IChatLogger chatLogger)\n        {\n            _integrationService = integrationService;\n            _chatLogger = chatLogger;\n        }\n\n        // In a production environment, persistent storage like a database would be used.\n        private static readonly System.Collections.Concurrent.ConcurrentDictionary<string, ChatSession> Sessions =\n            new System.Collections.Concurrent.ConcurrentDictionary<string, ChatSession>();\n\n        public async Task<ChatSession> GetChatSessionAsync(string sessionId)\n        {\n            Sessions.TryGetValue(sessionId, out ChatSession session);\n            return await Task.FromResult(session);\n        }\n\n        public async Task<ChatMessage> ProcessChatMessageAsync(ChatMessage message)\n        {\n            if (string.IsNullOrEmpty(message.SessionId))\n            {\n                // Create a new session if none exists.\n                message.SessionId = Guid.NewGuid().ToString();\n                var newSession = new ChatSession { SessionId = message.SessionId };\n                Sessions.TryAdd(newSession.SessionId, newSession);\n            }\n\n            Sessions.AddOrUpdate(message.SessionId,\n                new ChatSession { SessionId = message.SessionId, Messages = new System.Collections.Generic.List<ChatMessage> { message } },\n                (key, existingSession) =>\n                {\n                    existingSession.Messages.Add(message);\n                    return existingSession;\n                });\n\n            _chatLogger.LogInfo($\"Processing message for session {message.SessionId}\");\n            \n            // Integrate with the external live chat provider\n            var response = await _integrationService.SendMessageToLiveChatAsync(message);\n            \n            if (response != null)\n            {\n                Sessions.AddOrUpdate(message.SessionId,\n                    new ChatSession { SessionId = message.SessionId, Messages = new System.Collections.Generic.List<ChatMessage> { response } },\n                    (key, existingSession) =>\n                    {\n                        existingSession.Messages.Add(response);\n                        return existingSession;\n                    });\n            }\n\n            return response ?? message;\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "1883a679-a037-4eb1-88da-48b07fc29e38",
            "Name": "IntegrationService.cs",
            "ParentId": "594b8602-470f-4492-aded-f06e7291d378",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\nusing ChatSupportIntegration.Infrastructure;\n\nnamespace ChatSupportIntegration.Services\n{\n    public interface IIntegrationService\n    {\n        Task<ChatMessage> SendMessageToLiveChatAsync(ChatMessage message);\n    }\n\n    public class IntegrationService : IIntegrationService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IIntegrationAdapter _integrationAdapter;\n\n        public IntegrationService(IIntegrationAdapter integrationAdapter, IHttpClientFactory httpClientFactory)\n        {\n            _integrationAdapter = integrationAdapter;\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<ChatMessage> SendMessageToLiveChatAsync(ChatMessage message)\n        {\n            // Delegate the external communication to the adapter\n            return await _integrationAdapter.SendChatMessageAsync(message);\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "13196d76-6338-47de-98f7-aa5602e78a80",
        "Name": "Models",
        "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
        "Type": 0,
        "Items": [
          {
            "Id": "ea93137b-cbce-405e-81a3-000c4519a25f",
            "Name": "ChatMessage.cs",
            "ParentId": "13196d76-6338-47de-98f7-aa5602e78a80",
            "Type": 1,
            "Text": "using System;\n\nnamespace ChatSupportIntegration.Models\n{\n    public class ChatMessage\n    {\n        public string MessageId { get; set; } = Guid.NewGuid().ToString();\n        public string SessionId { get; set; }\n        public string UserId { get; set; }\n        public string Content { get; set; }\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "9c608609-3d8e-472e-88c8-35cc581f5c5f",
            "Name": "ChatSession.cs",
            "ParentId": "13196d76-6338-47de-98f7-aa5602e78a80",
            "Type": 1,
            "Text": "using System.Collections.Generic;\n\nnamespace ChatSupportIntegration.Models\n{\n    public class ChatSession\n    {\n        public string SessionId { get; set; }\n        public List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();\n    }\n}\n",
            "Language": 0
          }
        ]
      },
      {
        "Id": "4b51107c-d283-4adf-8510-d1f5abe13036",
        "Name": "Infrastructure",
        "ParentId": "68f43a7f-9a55-4d10-9c43-c7bcd811cf54",
        "Type": 0,
        "Items": [
          {
            "Id": "67842e61-e624-4c1b-81ea-6d988bb7ae5c",
            "Name": "ChatLogger.cs",
            "ParentId": "4b51107c-d283-4adf-8510-d1f5abe13036",
            "Type": 1,
            "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace ChatSupportIntegration.Infrastructure\n{\n    public interface IChatLogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n\n    public class ChatLogger : IChatLogger\n    {\n        private readonly ILogger<ChatLogger> _logger;\n\n        public ChatLogger(ILogger<ChatLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
            "Language": 0
          },
          {
            "Id": "90be2b99-cfd8-402e-80da-c1771d6761e2",
            "Name": "IntegrationAdapter.cs",
            "ParentId": "4b51107c-d283-4adf-8510-d1f5abe13036",
            "Type": 1,
            "Text": "using System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing ChatSupportIntegration.Models;\n\nnamespace ChatSupportIntegration.Infrastructure\n{\n    public interface IIntegrationAdapter\n    {\n        Task<ChatMessage> SendChatMessageAsync(ChatMessage message);\n    }\n\n    public class IntegrationAdapter : IIntegrationAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public IntegrationAdapter(IHttpClientFactory httpClientFactory)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n        }\n\n        public async Task<ChatMessage> SendChatMessageAsync(ChatMessage message)\n        {\n            // Replace with actual live chat provider endpoint in production\n            string externalEndpoint = \"https://api.livechatprovider.com/send\";\n            \n            var jsonContent = JsonSerializer.Serialize(message);\n            var content = new StringContent(jsonContent, Encoding.UTF8, \"application/json\");\n            \n            var response = await _httpClient.PostAsync(externalEndpoint, content);\n            response.EnsureSuccessStatusCode();\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n            var chatResponse = JsonSerializer.Deserialize<ChatMessage>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n            return chatResponse;\n        }\n    }\n}\n",
            "Language": 0
          }
        ]
      }
    ]
  },
  {
    "Id": "17ea0e01-1a6c-4e40-a540-430c1e942549",
    "Name": "VirtualAssistantService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "04892864-b828-4b60-97d0-fb717c044a66",
        "Name": "Program.cs",
        "ParentId": "17ea0e01-1a6c-4e40-a540-430c1e942549",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing VirtualAssistantService.Middleware;\nusing VirtualAssistantService.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Register HttpClient for external API calls\nbuilder.Services.AddHttpClient();\n\n// Register application services\nbuilder.Services.AddTransient<IVirtualAssistantService, VirtualAssistantService>();\nbuilder.Services.AddTransient<IChatBotEngine, ChatBotEngine>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseMiddleware<ExceptionHandlingMiddleware>();\n\napp.UseHttpsRedirection();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "11451dcf-9f9d-436f-98cd-c13276001792",
        "Name": "Controllers",
        "ParentId": "17ea0e01-1a6c-4e40-a540-430c1e942549",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1ea5434b-d068-4d32-a11d-9c9d59ee22d8",
        "Name": "Services",
        "ParentId": "17ea0e01-1a6c-4e40-a540-430c1e942549",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7bd2728d-0fe1-4186-b2f9-069f1b4b7d0d",
        "Name": "Models",
        "ParentId": "17ea0e01-1a6c-4e40-a540-430c1e942549",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fb566928-d17b-4f7c-ae4d-2cd285081915",
        "Name": "Configurations",
        "ParentId": "17ea0e01-1a6c-4e40-a540-430c1e942549",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "600dcda6-afea-49b8-88fc-f32a4606d1a5",
        "Name": "Middleware",
        "ParentId": "17ea0e01-1a6c-4e40-a540-430c1e942549",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
    "Name": "InvestmentPortfolioManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "84a0c9c7-8fd2-4d0a-82e9-2e4704a2c503",
        "Name": "Program.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace InvestmentPortfolioManager\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c4051519-001c-4307-84a8-0c97647080fe",
        "Name": "Startup.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.EntityFrameworkCore;\nusing InvestmentPortfolioManager.Data;\nusing InvestmentPortfolioManager.Services;\n\nnamespace InvestmentPortfolioManager\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<InvestmentDbContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n            services.AddTransient<IPortfolioService, PortfolioService>();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.UseRouting();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c7a197b7-d869-4b47-90ab-5c8df52ab928",
        "Name": "AppSettings.json",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=your_server;Database=InvestmentDB;User Id=your_user;Password=your_password;\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "c30fb5b9-99d8-40f8-aefd-015a7bc37ab3",
        "Name": "InvestmentPortfolioManager.csproj",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"6.0.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n\n</Project>\n",
        "Language": 0
      },
      {
        "Id": "b17cd1bb-8094-4ea2-9e5a-5fb38eae9358",
        "Name": "Controllers",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2ec3d44f-66e9-44d3-b450-5e45f224db30",
        "Name": "PortfolioController.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing InvestmentPortfolioManager.Models;\nusing InvestmentPortfolioManager.Services;\nusing System.Collections.Generic;\n\nnamespace InvestmentPortfolioManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class PortfolioController : ControllerBase\n    {\n        private readonly IPortfolioService _portfolioService;\n\n        public PortfolioController(IPortfolioService portfolioService)\n        {\n            _portfolioService = portfolioService;\n        }\n\n        [HttpGet]\n        public ActionResult<IEnumerable<Portfolio>> GetPortfolios()\n        {\n            var portfolios = _portfolioService.GetAllPortfolios();\n            return Ok(portfolios);\n        }\n\n        [HttpGet(\"{id}\")]\n        public ActionResult<Portfolio> GetPortfolioById(int id)\n        {\n            var portfolio = _portfolioService.GetPortfolioById(id);\n            if (portfolio == null)\n            {\n                return NotFound();\n            }\n            return Ok(portfolio);\n        }\n\n        [HttpPost]\n        public ActionResult CreatePortfolio([FromBody] Portfolio portfolio)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n            _portfolioService.CreatePortfolio(portfolio);\n            return CreatedAtAction(nameof(GetPortfolioById), new { id = portfolio.Id }, portfolio);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "464db28b-90cc-4e12-9620-b8f247517257",
        "Name": "Models",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f1c91eab-2455-45c8-8891-18ed8cfe35f6",
        "Name": "Portfolio.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace InvestmentPortfolioManager.Models\n{\n    public class Portfolio\n    {\n        public int Id { get; set; }\n\n        [Required]\n        public string Name { get; set; }\n\n        public decimal TotalValue { get; set; }\n\n        public ICollection<Investment> Investments { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "14d26c6b-00ac-4d0a-a574-6f4eaeb6a94b",
        "Name": "Investment.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using System.ComponentModel.DataAnnotations;\n\nnamespace InvestmentPortfolioManager.Models\n{\n    public class Investment\n    {\n        public int Id { get; set; }\n\n        [Required]\n        public string AssetName { get; set; }\n\n        [Range(0, double.MaxValue)]\n        public decimal Amount { get; set; }\n\n        public int PortfolioId { get; set; }\n\n        public Portfolio Portfolio { get; set; }\n\n        public Allocation Allocation { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7cc91761-4b11-4126-90bd-cd648cab3e70",
        "Name": "Allocation.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using System.ComponentModel.DataAnnotations;\n\nnamespace InvestmentPortfolioManager.Models\n{\n    public class Allocation\n    {\n        public int Id { get; set; }\n\n        [Range(0, 100)]\n        public double Percentage { get; set; }\n\n        public int InvestmentId { get; set; }\n\n        public Investment Investment { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "aabd8cfd-0216-4cd0-8905-0394bf560e66",
        "Name": "Services",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3f676def-95f0-4637-9994-be8e16bb7a1b",
        "Name": "IPortfolioService.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using InvestmentPortfolioManager.Models;\nusing System.Collections.Generic;\n\nnamespace InvestmentPortfolioManager.Services\n{\n    public interface IPortfolioService\n    {\n        IEnumerable<Portfolio> GetAllPortfolios();\n        Portfolio GetPortfolioById(int id);\n        void CreatePortfolio(Portfolio portfolio);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f38bbfe9-20a0-4489-8ee8-ce22081b157d",
        "Name": "PortfolioService.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using InvestmentPortfolioManager.Models;\nusing InvestmentPortfolioManager.Data;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace InvestmentPortfolioManager.Services\n{\n    public class PortfolioService : IPortfolioService\n    {\n        private readonly InvestmentDbContext _context;\n\n        public PortfolioService(InvestmentDbContext context)\n        {\n            _context = context;\n        }\n\n        public IEnumerable<Portfolio> GetAllPortfolios()\n        {\n            return _context.Portfolios.ToList();\n        }\n\n        public Portfolio GetPortfolioById(int id)\n        {\n            return _context.Portfolios.FirstOrDefault(p => p.Id == id);\n        }\n\n        public void CreatePortfolio(Portfolio portfolio)\n        {\n            _context.Portfolios.Add(portfolio);\n            _context.SaveChanges();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6f4492f7-93fa-4197-a184-58c03a360624",
        "Name": "Data",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "19f4670c-87d0-44c7-bb46-cd2ee76f2b3a",
        "Name": "InvestmentDbContext.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing InvestmentPortfolioManager.Models;\n\nnamespace InvestmentPortfolioManager.Data\n{\n    public class InvestmentDbContext : DbContext\n    {\n        public InvestmentDbContext(DbContextOptions<InvestmentDbContext> options) : base(options)\n        {\n        }\n\n        public DbSet<Portfolio> Portfolios { get; set; }\n        public DbSet<Investment> Investments { get; set; }\n        public DbSet<Allocation> Allocations { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Portfolio>()\n                .HasMany(p => p.Investments)\n                .WithOne(i => i.Portfolio)\n                .HasForeignKey(i => i.PortfolioId);\n\n            modelBuilder.Entity<Investment>()\n                .HasOne(i => i.Allocation)\n                .WithOne(a => a.Investment)\n                .HasForeignKey<Allocation>(a => a.InvestmentId);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "288b11a5-a323-44fc-b125-fc8272c38f61",
        "Name": "Utilities",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c9b74656-7536-4ced-a8a6-7e49b9a35858",
        "Name": "Logger.cs",
        "ParentId": "729a0031-5250-42cd-b6ca-faf0df59b9eb",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace InvestmentPortfolioManager.Utilities\n{\n    public class Logger\n    {\n        private readonly ILogger<Logger> _logger;\n\n        public Logger(ILogger<Logger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogInfo(string message)\n        {\n            _logger.LogInformation(message);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            _logger.LogError(ex, message);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
    "Name": "LoanProcessingEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b31e9006-91b6-4ab4-b03b-7bac9b423902",
        "Name": "Program.cs",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace DigitalBank.LoanProcessingEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                   .UseStartup<Startup>();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c1b953ff-2c24-484d-9ef4-dbf27e2ce85a",
        "Name": "Startup.cs",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing DigitalBank.LoanProcessingEngine.Data;\nusing DigitalBank.LoanProcessingEngine.Repositories;\nusing DigitalBank.LoanProcessingEngine.Services;\n\nnamespace DigitalBank.LoanProcessingEngine\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<LoanContext>(options =>\n            {\n                options.UseSqlServer(Configuration.GetConnectionString(\"LoanDatabase\"));\n            });\n            services.AddScoped<ILoanRepository, LoanRepository>();\n            services.AddScoped<LoanService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints => \n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "33093082-b96c-43a0-aacd-53cbbdef3e65",
        "Name": "appsettings.json",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"LoanDatabase\": \"Server=.;Database=LoanProcessingDB;Trusted_Connection=True;\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\"\n    }\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "1c854a6d-d9e3-4d19-b782-f12556ac1d88",
        "Name": "Models",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3caf69fa-4afc-4ab1-a8e9-bf79b417e2df",
        "Name": "Data",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "310a9461-e7c8-4a82-b4c8-dfdf94a71371",
        "Name": "Repositories",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fd108fdd-510b-481a-9d19-44ccc08fda6d",
        "Name": "Services",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0021162c-8e11-437b-902f-2bda18187577",
        "Name": "Controllers",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "913cccdf-76f4-4de2-abe5-2d7fd09d2847",
        "Name": "BusinessRules",
        "ParentId": "bcbc8fc2-d06e-448c-9779-f5d14d621696",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
    "Name": "MortgageCalculationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "f1ac65ce-4423-4431-a3e1-8f60dfef4cb1",
        "Name": "Program.cs",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MortgageCalculationService.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IMortgageCalculator, MortgageCalculator>();\n\nvar app = builder.Build();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "77100bec-d86a-4e3d-90a9-a60e0e0e81f7",
        "Name": "Controllers",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d5508499-5be0-481b-b43c-07e72d2adec8",
        "Name": "MortgageController.cs",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing MortgageCalculationService.Models;\nusing MortgageCalculationService.Services;\n\nnamespace MortgageCalculationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MortgageController : ControllerBase\n    {\n        private readonly IMortgageCalculator _mortgageCalculator;\n\n        public MortgageController(IMortgageCalculator mortgageCalculator)\n        {\n            _mortgageCalculator = mortgageCalculator;\n        }\n\n        [HttpPost(\"calculate\")]\n        public ActionResult<MortgageResponse> CalculateMortgage([FromBody] MortgageRequest request)\n        {\n            if (request == null || !ModelState.IsValid)\n            {\n                return BadRequest(\"Invalid mortgage request data.\");\n            }\n\n            MortgageResponse response = _mortgageCalculator.Calculate(request);\n            return Ok(response);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b3abff99-da53-4041-a917-9d59e376e18e",
        "Name": "Models",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a050b0ec-bbb6-440c-b4ff-b2c9b5e601c5",
        "Name": "MortgageRequest.cs",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 1,
        "Text": "namespace MortgageCalculationService.Models\n{\n    public class MortgageRequest\n    {\n        public decimal Principal { get; set; }\n        public double AnnualInterestRate { get; set; } // e.g., in percentage\n        public int TermInYears { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "9880e0a2-bc2f-4684-8d5c-6815bf4bba27",
        "Name": "MortgageResponse.cs",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 1,
        "Text": "namespace MortgageCalculationService.Models\n{\n    public class MortgageResponse\n    {\n        public decimal MonthlyPayment { get; set; }\n        public decimal TotalPayment { get; set; }\n        public decimal TotalInterest { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c1ba5c18-3b6b-4192-9881-8c2e9076fbab",
        "Name": "Services",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3153449c-b578-4b10-a9ce-4109f5110b85",
        "Name": "IMortgageCalculator.cs",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 1,
        "Text": "using MortgageCalculationService.Models;\n\nnamespace MortgageCalculationService.Services\n{\n    public interface IMortgageCalculator\n    {\n        MortgageResponse Calculate(MortgageRequest request);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "be6ec301-40b5-4631-8720-4c76ef5534f6",
        "Name": "MortgageCalculator.cs",
        "ParentId": "6dcda7f1-1074-488b-9ac6-5c62408eb5a2",
        "Type": 1,
        "Text": "using System;\nusing MortgageCalculationService.Models;\n\nnamespace MortgageCalculationService.Services\n{\n    public class MortgageCalculator : IMortgageCalculator\n    {\n        public MortgageResponse Calculate(MortgageRequest request)\n        {\n            if (request.Principal <= 0 || request.AnnualInterestRate <= 0 || request.TermInYears <= 0)\n            {\n                throw new ArgumentException(\"All input values must be greater than zero.\");\n            }\n\n            int totalPayments = request.TermInYears * 12;\n            double monthlyInterestRate = request.AnnualInterestRate / 100 / 12;\n            double compoundInterestFactor = Math.Pow(1 + monthlyInterestRate, totalPayments);\n            double denominator = compoundInterestFactor - 1;\n            if (denominator == 0)\n            {\n                throw new DivideByZeroException(\"Invalid interest rate leading to division by zero.\");\n            }\n\n            decimal monthlyPayment = request.Principal * (decimal)(monthlyInterestRate * compoundInterestFactor / denominator);\n            decimal totalPayment = monthlyPayment * totalPayments;\n            decimal totalInterest = totalPayment - request.Principal;\n\n            return new MortgageResponse\n            {\n                MonthlyPayment = Math.Round(monthlyPayment, 2),\n                TotalPayment = Math.Round(totalPayment, 2),\n                TotalInterest = Math.Round(totalInterest, 2)\n            };\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
    "Name": "InsuranceQuoteGenerator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "87ec7e98-0492-408c-8076-3fa9b2b71aa7",
        "Name": "Program.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace InsuranceQuoteGenerator\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3dac39d7-05b4-41f4-b2b0-2948f2acfcc6",
        "Name": "Startup.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing InsuranceQuoteGenerator.Services;\nusing InsuranceQuoteGenerator.Repositories;\n\nnamespace InsuranceQuoteGenerator\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddScoped<IQuoteService, QuoteService>();\n            services.AddScoped<IQuoteRepository, QuoteRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseRouting();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e81f6df5-9919-4f4d-92d8-95d5d449ea60",
        "Name": "Controllers",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3ae8b5d9-8a5e-49b4-8f52-ba505e044ede",
        "Name": "QuoteController.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing InsuranceQuoteGenerator.Services;\nusing InsuranceQuoteGenerator.Models;\n\nnamespace InsuranceQuoteGenerator.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class QuoteController : ControllerBase\n    {\n        private readonly IQuoteService _quoteService;\n\n        public QuoteController(IQuoteService quoteService)\n        {\n            _quoteService = quoteService;\n        }\n\n        [HttpPost(\"generate\")]\n        public ActionResult<InsuranceQuote> GenerateQuote([FromBody] Customer customer)\n        {\n            var quote = _quoteService.GenerateQuote(customer);\n            return Ok(quote);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3c310428-a307-443e-a633-d2632be83f6e",
        "Name": "Models",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f29760f7-b969-4276-a92a-be5cc3285757",
        "Name": "InsuranceQuote.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "namespace InsuranceQuoteGenerator.Models\n{\n    public class InsuranceQuote\n    {\n        public string QuoteId { get; set; }\n        public decimal Premium { get; set; }\n        public double CoverageAmount { get; set; }\n        public string Currency { get; set; }\n        public string PolicyType { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a019d185-9929-4e57-9535-06549870d13c",
        "Name": "Customer.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "namespace InsuranceQuoteGenerator.Models\n{\n    public class Customer\n    {\n        public string CustomerId { get; set; }\n        public string FullName { get; set; }\n        public int Age { get; set; }\n        public string InsuranceType { get; set; }\n        public string Email { get; set; }\n        public string PhoneNumber { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "126c0e1b-07d9-4cc0-8843-88bd0d45bd73",
        "Name": "Services",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "33d6a991-7976-4123-a311-b9470dc31955",
        "Name": "IQuoteService.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "using InsuranceQuoteGenerator.Models;\n\nnamespace InsuranceQuoteGenerator.Services\n{\n    public interface IQuoteService\n    {\n        InsuranceQuote GenerateQuote(Customer customer);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7f62d5af-44dc-4fc1-8406-4a47992e8cd2",
        "Name": "QuoteService.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "using System;\nusing InsuranceQuoteGenerator.Models;\nusing InsuranceQuoteGenerator.Repositories;\n\nnamespace InsuranceQuoteGenerator.Services\n{\n    public class QuoteService : IQuoteService\n    {\n        private readonly IQuoteRepository _quoteRepository;\n\n        public QuoteService(IQuoteRepository quoteRepository)\n        {\n            _quoteRepository = quoteRepository;\n        }\n\n        public InsuranceQuote GenerateQuote(Customer customer)\n        {\n            decimal basePremium = CalculateBasePremium(customer);\n            decimal riskFactor = CalculateRiskFactor(customer.Age, customer.InsuranceType);\n            decimal calculatedPremium = basePremium + riskFactor;\n\n            InsuranceQuote quote = new InsuranceQuote\n            {\n                QuoteId = Guid.NewGuid().ToString(),\n                Premium = calculatedPremium,\n                CoverageAmount = CalculateCoverage(customer.InsuranceType),\n                Currency = \"USD\",\n                PolicyType = customer.InsuranceType\n            };\n\n            _quoteRepository.SaveQuote(quote);\n            return quote;\n        }\n\n        private decimal CalculateBasePremium(Customer customer)\n        {\n            if(customer.InsuranceType.Equals(\"Life\", StringComparison.OrdinalIgnoreCase))\n                return 100.00m;\n            if(customer.InsuranceType.Equals(\"Health\", StringComparison.OrdinalIgnoreCase))\n                return 150.00m;\n            if(customer.InsuranceType.Equals(\"Auto\", StringComparison.OrdinalIgnoreCase))\n                return 200.00m;\n            return 120.00m;\n        }\n\n        private decimal CalculateRiskFactor(int age, string insuranceType)\n        {\n            decimal factor = 0m;\n            if(insuranceType.Equals(\"Life\", StringComparison.OrdinalIgnoreCase))\n            {\n                factor = age > 50 ? 50.00m : 20.00m;\n            }\n            else if(insuranceType.Equals(\"Health\", StringComparison.OrdinalIgnoreCase))\n            {\n                factor = age > 40 ? 70.00m : 30.00m;\n            }\n            else if(insuranceType.Equals(\"Auto\", StringComparison.OrdinalIgnoreCase))\n            {\n                factor = age < 25 ? 80.00m : 40.00m;\n            }\n            else\n            {\n                factor = 25.00m;\n            }\n            return factor;\n        }\n\n        private double CalculateCoverage(string insuranceType)\n        {\n            if(insuranceType.Equals(\"Life\", StringComparison.OrdinalIgnoreCase))\n                return 100000.00;\n            if(insuranceType.Equals(\"Health\", StringComparison.OrdinalIgnoreCase))\n                return 50000.00;\n            if(insuranceType.Equals(\"Auto\", StringComparison.OrdinalIgnoreCase))\n                return 30000.00;\n            return 25000.00;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "062ef7f5-b6ad-4287-9f7c-c95e344fc225",
        "Name": "Repositories",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "42e12618-ab22-43a6-a092-a9ae2f4455ec",
        "Name": "IQuoteRepository.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "using InsuranceQuoteGenerator.Models;\n\nnamespace InsuranceQuoteGenerator.Repositories\n{\n    public interface IQuoteRepository\n    {\n        void SaveQuote(InsuranceQuote quote);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "84a856c9-a55c-4f1c-b553-86869833e64f",
        "Name": "QuoteRepository.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "using System.Collections.Concurrent;\nusing InsuranceQuoteGenerator.Models;\n\nnamespace InsuranceQuoteGenerator.Repositories\n{\n    public class QuoteRepository : IQuoteRepository\n    {\n        private static ConcurrentDictionary<string, InsuranceQuote> _quoteStore = new ConcurrentDictionary<string, InsuranceQuote>();\n\n        public void SaveQuote(InsuranceQuote quote)\n        {\n            _quoteStore[quote.QuoteId] = quote;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "62f43080-b7d4-4d18-b399-a0bbd330344d",
        "Name": "Configurations",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6c6bef08-c8ac-42f9-a7a4-d774f0d1f05c",
        "Name": "AppSettings.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "namespace InsuranceQuoteGenerator.Configurations\n{\n    public class AppSettings\n    {\n        public string ConnectionString { get; set; }\n        public string InsuranceProvider { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f84bab2f-473e-41e2-af04-4ad5b5cabfec",
        "Name": "Utils",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ded915d8-2ae8-4189-9c50-0d80b75e91f3",
        "Name": "Logger.cs",
        "ParentId": "ecb7311a-7fc5-4ac0-a6ac-1a415e8c88fb",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Logging;\n\nnamespace InsuranceQuoteGenerator.Utils\n{\n    public static class Logger\n    {\n        public static void LogInformation(ILogger logger, string message)\n        {\n            logger.LogInformation(message);\n        }\n\n        public static void LogError(ILogger logger, string message, Exception ex)\n        {\n            logger.LogError(ex, message);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
    "Name": "DigitalSignatureService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "c1ec4703-5275-4ba6-9e18-c9bd2256e7f4",
        "Name": "Program.cs",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DigitalSignatureService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a5af2a74-6042-4668-b71f-a9e43452882f",
        "Name": "Startup.cs",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DigitalSignatureService\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<Services.IDigitalSignatureService, Services.DigitalSignatureService>();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bb473d32-86d4-46fb-a7f6-495de457d073",
        "Name": "appsettings.json",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "{\n    \"RSAPrivateKey\": \"<RSAKeyValue><Modulus>vTtn0eHxvDlzv+8h0kDWxhl0i8Ai6k1V0K5BvG9D3T3MnTk1v6FJ6xsdW8HIYTS8</Modulus><Exponent>AQAB</Exponent><P>9xprf9G3oXgH+1eXfB/9Jf/==</P><Q>7mK94OEh8Iv8VbYVJFinvDY==</Q><DP>rE3bJNOCx/Y9wvTCf/GBaA==</DP><DQ>lK3tluYI/ghL0h03mU0+2Q==</DQ><InverseQ>Ax5m/dkHd+rkLBH1Yw==</InverseQ><D>Z8PnYzT+1skr8XxQN6kB9==</D></RSAKeyValue>\"\n}\n",
        "Language": 0
      },
      {
        "Id": "b5e97a41-ed32-4c86-bf17-9d0c28239729",
        "Name": "Controllers",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "44733f5d-db19-483f-99a5-21f0b7c28433",
        "Name": "SignatureController.cs",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing DigitalSignatureService.Models;\nusing DigitalSignatureService.Services;\n\nnamespace DigitalSignatureService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SignatureController : ControllerBase\n    {\n        private readonly IDigitalSignatureService _signatureService;\n\n        public SignatureController(IDigitalSignatureService signatureService)\n        {\n            _signatureService = signatureService;\n        }\n\n        [HttpPost(\"sign\")]\n        public IActionResult SignDocument([FromBody] Document document)\n        {\n            if (document == null || string.IsNullOrWhiteSpace(document.Content))\n            {\n                return BadRequest(\"Invalid document.\");\n            }\n            try\n            {\n                var signature = _signatureService.SignDocument(document);\n                document.Signature = signature;\n                return Ok(document);\n            }\n            catch (System.Exception ex)\n            {\n                return StatusCode(500, ex.Message);\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c058fafe-4574-4841-a5c8-a1c90e52b74f",
        "Name": "Models",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f1640320-83a9-4156-a99d-cd1dc2aa2fe3",
        "Name": "Document.cs",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "namespace DigitalSignatureService.Models\n{\n    public class Document\n    {\n        public string DocumentId { get; set; }\n        public string Content { get; set; }\n        public string Signature { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "89c82091-9057-4ad5-bcce-001ad9cdd4f4",
        "Name": "Services",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "91f76b2e-2fdb-45da-9c4e-5160517e5089",
        "Name": "IDigitalSignatureService.cs",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "using DigitalSignatureService.Models;\n\nnamespace DigitalSignatureService.Services\n{\n    public interface IDigitalSignatureService\n    {\n        string SignDocument(Document document);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "55e26953-315d-414f-8d2a-e9c2459fbfcf",
        "Name": "DigitalSignatureService.cs",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "using System;\nusing System.Text;\nusing DigitalSignatureService.Models;\nusing DigitalSignatureService.Utilities;\n\nnamespace DigitalSignatureService.Services\n{\n    public class DigitalSignatureService : IDigitalSignatureService\n    {\n        public string SignDocument(Document document)\n        {\n            if (document == null || string.IsNullOrEmpty(document.Content))\n                throw new ArgumentException(\"Document content cannot be empty.\");\n\n            byte[] dataBytes = Encoding.UTF8.GetBytes(document.Content);\n            byte[] signatureBytes = SignerUtility.SignData(dataBytes);\n            return Convert.ToBase64String(signatureBytes);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c38bd77b-2233-4ac3-8396-b9e859f99448",
        "Name": "Utilities",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "cfa70da8-9559-4813-ac52-946a0484c53d",
        "Name": "SignerUtility.cs",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "using System;\nusing System.Security.Cryptography;\nusing DigitalSignatureService.Configuration;\n\nnamespace DigitalSignatureService.Utilities\n{\n    public static class SignerUtility\n    {\n        private static readonly RSA rsa;\n\n        static SignerUtility()\n        {\n            var appSettings = AppSettings.Load();\n            rsa = RSA.Create();\n            rsa.FromXmlString(appSettings.RSAPrivateKey);\n        }\n\n        public static byte[] SignData(byte[] data)\n        {\n            if (data == null || data.Length == 0)\n                throw new ArgumentException(\"Data to sign is empty.\");\n\n            return rsa.SignData(data, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4ee5d5b7-8bd6-4532-8c8b-32f83c36a105",
        "Name": "Configuration",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5f58c9db-6aeb-4e59-a7be-e3c4fcfc27c8",
        "Name": "AppSettings.cs",
        "ParentId": "738b4d90-4ad2-423d-8bee-e6a37a565b47",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing System.Text.Json;\n\nnamespace DigitalSignatureService.Configuration\n{\n    public class AppSettings\n    {\n        public string RSAPrivateKey { get; set; }\n\n        private static AppSettings _instance;\n\n        public static AppSettings Load()\n        {\n            if (_instance == null)\n            {\n                string configPath = \"appsettings.json\";\n                if (!File.Exists(configPath))\n                    throw new FileNotFoundException(\"Configuration file not found.\");\n\n                string json = File.ReadAllText(configPath);\n                _instance = JsonSerializer.Deserialize<AppSettings>(json);\n            }\n            return _instance;\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
    "Name": "DocumentManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "5eee11ee-8ce1-4ed6-aa1c-57231510a80b",
        "Name": "Domain",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d862e741-1215-49c2-8e34-82ac70de8b24",
        "Name": "Document.cs",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 1,
        "Text": "using System;\n\nnamespace Domain {\n    public class Document {\n        public Guid Id { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime UpdatedAt { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "5689956d-fd8e-491d-a9ae-df99f4b0a6d0",
        "Name": "IDocumentRepository.cs",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace Domain {\n    public interface IDocumentRepository {\n        Task<Document> GetDocumentAsync(Guid id);\n        Task<IEnumerable<Document>> GetDocumentsAsync();\n        Task CreateDocumentAsync(Document document);\n        Task UpdateDocumentAsync(Document document);\n        Task DeleteDocumentAsync(Guid id);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a3286118-d283-4da7-82a4-259c0b5035c8",
        "Name": "Infrastructure",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "90b29224-7ff5-4e04-9918-582b4fd2b914",
        "Name": "DocumentRepository.cs",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Domain;\n\nnamespace Infrastructure {\n    public class DocumentRepository : IDocumentRepository {\n        private readonly ConcurrentDictionary<Guid, Document> _documents = new ConcurrentDictionary<Guid, Document>();\n\n        public async Task CreateDocumentAsync(Document document) {\n            document.Id = Guid.NewGuid();\n            document.CreatedAt = DateTime.UtcNow;\n            document.UpdatedAt = DateTime.UtcNow;\n            if (!_documents.TryAdd(document.Id, document)) {\n                throw new Exception(\"Failed to add document.\");\n            }\n            await Task.CompletedTask;\n        }\n\n        public async Task DeleteDocumentAsync(Guid id) {\n            if (!_documents.TryRemove(id, out _)) {\n                throw new KeyNotFoundException($\"Document with id {id} not found.\");\n            }\n            await Task.CompletedTask;\n        }\n\n        public async Task<Document> GetDocumentAsync(Guid id) {\n            if (_documents.TryGetValue(id, out var document)) {\n                return await Task.FromResult(document);\n            }\n            throw new KeyNotFoundException($\"Document with id {id} not found.\");\n        }\n\n        public async Task<IEnumerable<Document>> GetDocumentsAsync() {\n            return await Task.FromResult(_documents.Values.ToList());\n        }\n\n        public async Task UpdateDocumentAsync(Document document) {\n            if (!_documents.ContainsKey(document.Id)) {\n                throw new KeyNotFoundException($\"Document with id {document.Id} not found.\");\n            }\n            document.UpdatedAt = DateTime.UtcNow;\n            _documents[document.Id] = document;\n            await Task.CompletedTask;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "eef1dd14-6971-42cb-9d33-76c4ff0db193",
        "Name": "Services",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "65694402-c761-4a43-b4a5-9bebf10fe9df",
        "Name": "DocumentService.cs",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Domain;\nusing Infrastructure;\n\nnamespace Services {\n    public class DocumentService {\n        private readonly IDocumentRepository _repository;\n\n        public DocumentService(IDocumentRepository repository) {\n            _repository = repository ?? throw new ArgumentNullException(nameof(repository));\n        }\n\n        public async Task<Document> GetDocumentAsync(Guid id) {\n            if (id == Guid.Empty) {\n                throw new ArgumentException(\"Invalid document identifier.\", nameof(id));\n            }\n            return await _repository.GetDocumentAsync(id);\n        }\n\n        public async Task<IEnumerable<Document>> GetDocumentsAsync() {\n            return await _repository.GetDocumentsAsync();\n        }\n\n        public async Task CreateDocumentAsync(Document document) {\n            if (document == null) {\n                throw new ArgumentNullException(nameof(document));\n            }\n            // Business validations and security checks can be applied here.\n            await _repository.CreateDocumentAsync(document);\n        }\n\n        public async Task UpdateDocumentAsync(Document document) {\n            if (document == null || document.Id == Guid.Empty) {\n                throw new ArgumentException(\"Invalid document.\", nameof(document));\n            }\n            await _repository.UpdateDocumentAsync(document);\n        }\n\n        public async Task DeleteDocumentAsync(Guid id) {\n            if (id == Guid.Empty) {\n                throw new ArgumentException(\"Invalid document identifier.\", nameof(id));\n            }\n            await _repository.DeleteDocumentAsync(id);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e16ece99-2311-442a-9aa7-8b2fd5652c2b",
        "Name": "API",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1f55a862-7e97-452d-b063-bd5c8e15b5c8",
        "Name": "Program.cs",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Infrastructure;\nusing Services;\nusing Domain;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddSingleton<IDocumentRepository, DocumentRepository>();\nbuilder.Services.AddSingleton<DocumentService>();\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment()) {\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "3e749e7f-2b6b-4255-893f-918f81ed576d",
        "Name": "API/Controllers",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8960e6ae-6a80-45d8-b34d-573bc28a496e",
        "Name": "DocumentsController.cs",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Services;\nusing Domain;\n\nnamespace API.Controllers {\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DocumentsController : ControllerBase {\n        private readonly DocumentService _service;\n\n        public DocumentsController(DocumentService service) {\n            _service = service ?? throw new ArgumentNullException(nameof(service));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll() {\n            var documents = await _service.GetDocumentsAsync();\n            return Ok(documents);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetById(Guid id) {\n            try {\n                var document = await _service.GetDocumentAsync(id);\n                return Ok(document);\n            } catch (KeyNotFoundException) {\n                return NotFound();\n            }\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Create([FromBody] Document document) {\n            if (document == null) {\n                return BadRequest();\n            }\n            await _service.CreateDocumentAsync(document);\n            return CreatedAtAction(nameof(GetById), new { id = document.Id }, document);\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] Document document) {\n            if (document == null || id != document.Id) {\n                return BadRequest();\n            }\n            try {\n                await _service.UpdateDocumentAsync(document);\n                return NoContent();\n            } catch (KeyNotFoundException) {\n                return NotFound();\n            }\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> Delete(Guid id) {\n            try {\n                await _service.DeleteDocumentAsync(id);\n                return NoContent();\n            } catch (KeyNotFoundException) {\n                return NotFound();\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "13a3869e-7529-4da6-b87c-7acf4e356d19",
        "Name": "API/Configurations",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "39ffadf6-dc4f-4242-bcd3-540bd9fcf1d0",
        "Name": "SecurityConfiguration.cs",
        "ParentId": "5ecec47d-c319-4900-b3e9-1b5e553befe3",
        "Type": 1,
        "Text": "namespace API.Configurations {\n    public static class SecurityConfiguration {\n        // In a production environment, this key should be stored securely, for example in a secrets manager.\n        public static string EncryptionKey { get; } = \"YourSecureEncryptionKeyHere123!\";\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
    "Name": "ElectronicStatementGenerator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "a2df59a7-6c27-46bf-8f22-fdb32d382265",
        "Name": "Program.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing ElectronicStatementGenerator.Models;\nusing ElectronicStatementGenerator.Services;\nusing ElectronicStatementGenerator.Interfaces;\nusing ElectronicStatementGenerator.Utilities;\nusing Microsoft.Extensions.Configuration;\n\nnamespace ElectronicStatementGenerator\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var configuration = new ConfigurationBuilder()\n                .AddJsonFile(\"appsettings.json\")\n                .Build();\n\n            // Initialize logger\n            Logger.Initialize(configuration);\n\n            try\n            {\n                // Create sample customer account with transactions\n                var account = new CustomerAccount(\"ACC123456\", \"John Doe\", \"john.doe@example.com\");\n                account.Transactions.AddRange(new List<Transaction>\n                {\n                    new Transaction(\"TXN001\", DateTime.UtcNow.AddDays(-10), \"Deposit\", 1000.00m),\n                    new Transaction(\"TXN002\", DateTime.UtcNow.AddDays(-5), \"Withdrawal\", -200.00m),\n                    new Transaction(\"TXN003\", DateTime.UtcNow.AddDays(-2), \"Payment\", -150.00m)\n                });\n\n                // Generate statement\n                IStatementGeneratorService statementService = new StatementGeneratorService();\n                var statement = statementService.GenerateStatement(account);\n\n                // Send statement via email\n                INotificationService notificationService = new EmailNotificationService(configuration);\n                notificationService.SendNotification(account.Email, \"Your Electronic Statement\", statement.ToString());\n\n                Logger.Log(\"Statement generated and sent successfully.\");\n            }\n            catch(Exception ex)\n            {\n                Logger.Log(\"An error occurred: \" + ex.Message);\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "9c354fd3-f0a8-49a0-b77b-aa283bc100df",
        "Name": "appsettings.json",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "{\n  \"EmailSettings\": {\n    \"SmtpServer\": \"smtp.example.com\",\n    \"SmtpPort\": \"587\",\n    \"SmtpUser\": \"noreply@example.com\",\n    \"SmtpPassword\": \"SecurePassword123\"\n  },\n  \"Logging\": {\n    \"LogLevel\": \"Info\"\n  }\n}",
        "Language": 0
      },
      {
        "Id": "5b935922-6b50-45d8-9819-aefec1779fdc",
        "Name": "Models",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "46310548-b4ad-4137-8d94-6d221c236757",
        "Name": "CustomerAccount.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using System.Collections.Generic;\n\nnamespace ElectronicStatementGenerator.Models\n{\n    public class CustomerAccount\n    {\n        public string AccountId { get; set; }\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public List<Transaction> Transactions { get; set; }\n\n        public CustomerAccount(string accountId, string fullName, string email)\n        {\n            AccountId = accountId;\n            FullName = fullName;\n            Email = email;\n            Transactions = new List<Transaction>();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "ebddc2e5-68c9-4056-8301-7136ff37877c",
        "Name": "Transaction.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using System;\n\nnamespace ElectronicStatementGenerator.Models\n{\n    public class Transaction\n    {\n        public string TransactionId { get; set; }\n        public DateTime Date { get; set; }\n        public string Description { get; set; }\n        public decimal Amount { get; set; }\n\n        public Transaction(string transactionId, DateTime date, string description, decimal amount)\n        {\n            TransactionId = transactionId;\n            Date = date;\n            Description = description;\n            Amount = amount;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "352829d5-728b-4e4f-bfd7-5b296a4f95d0",
        "Name": "Statement.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace ElectronicStatementGenerator.Models\n{\n    public class Statement\n    {\n        public string AccountId { get; set; }\n        public string FullName { get; set; }\n        public DateTime StatementDate { get; set; }\n        public List<Transaction> Transactions { get; set; }\n        public decimal Balance { get; set; }\n\n        public Statement(string accountId, string fullName, DateTime statementDate, List<Transaction> transactions, decimal balance)\n        {\n            AccountId = accountId;\n            FullName = fullName;\n            StatementDate = statementDate;\n            Transactions = transactions;\n            Balance = balance;\n        }\n\n        public override string ToString()\n        {\n            StringBuilder sb = new StringBuilder();\n            sb.AppendLine(\"Electronic Statement\");\n            sb.AppendLine($\"Account: {AccountId} - {FullName}\");\n            sb.AppendLine($\"Date: {StatementDate.ToShortDateString()}\");\n            sb.AppendLine(\"Transactions:\");\n            foreach(var txn in Transactions)\n            {\n                sb.AppendLine($\"{txn.Date.ToShortDateString()} | {txn.Description} | {txn.Amount:C}\");\n            }\n            sb.AppendLine($\"Balance: {Balance:C}\");\n            return sb.ToString();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "8a537da2-cdc6-413f-a0d0-64928728f85f",
        "Name": "Interfaces",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c24ad47d-d471-4867-a8a8-e34cea7d3a54",
        "Name": "IStatementGeneratorService.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using ElectronicStatementGenerator.Models;\n\nnamespace ElectronicStatementGenerator.Interfaces\n{\n    public interface IStatementGeneratorService\n    {\n        Statement GenerateStatement(CustomerAccount account);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "2f449635-2531-4f68-8fba-81d6839a309f",
        "Name": "INotificationService.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "namespace ElectronicStatementGenerator.Interfaces\n{\n    public interface INotificationService\n    {\n        void SendNotification(string recipient, string subject, string message);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8910eff8-810e-4afe-9f5e-39752fcca96a",
        "Name": "Services",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a44f8dc4-33ab-4e67-9d85-a93a1b25b21e",
        "Name": "StatementGeneratorService.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using System;\nusing System.Linq;\nusing ElectronicStatementGenerator.Models;\nusing ElectronicStatementGenerator.Interfaces;\n\nnamespace ElectronicStatementGenerator.Services\n{\n    public class StatementGeneratorService : IStatementGeneratorService\n    {\n        public Statement GenerateStatement(CustomerAccount account)\n        {\n            if(account == null)\n                throw new ArgumentNullException(nameof(account));\n\n            decimal balance = account.Transactions.Sum(t => t.Amount);\n            DateTime statementDate = DateTime.UtcNow;\n\n            var statement = new Statement(account.AccountId, account.FullName, statementDate, account.Transactions, balance);\n            return statement;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9c8b850b-b434-4693-b3bb-c1faae9990f9",
        "Name": "EmailNotificationService.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Configuration;\nusing ElectronicStatementGenerator.Interfaces;\nusing ElectronicStatementGenerator.Utilities;\n\nnamespace ElectronicStatementGenerator.Services\n{\n    public class EmailNotificationService : INotificationService\n    {\n        private readonly IConfiguration _configuration;\n        private readonly string _smtpServer;\n        private readonly int _smtpPort;\n        private readonly string _smtpUser;\n        private readonly string _smtpPassword;\n\n        public EmailNotificationService(IConfiguration configuration)\n        {\n            _configuration = configuration;\n            _smtpServer = _configuration[\"EmailSettings:SmtpServer\"];\n            _smtpPort = int.Parse(_configuration[\"EmailSettings:SmtpPort\"]);\n            _smtpUser = _configuration[\"EmailSettings:SmtpUser\"];\n            _smtpPassword = _configuration[\"EmailSettings:SmtpPassword\"];\n        }\n\n        public void SendNotification(string recipient, string subject, string message)\n        {\n            if(string.IsNullOrEmpty(recipient))\n                throw new ArgumentException(\"Recipient email is required.\");\n\n            EmailHelper.SendEmail(_smtpServer, _smtpPort, _smtpUser, _smtpPassword, recipient, subject, message);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d79a4a1a-c433-46d6-9ac2-ef8aae510ab9",
        "Name": "Utilities",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5a967a38-bb28-4459-8e07-d4434ca32b5f",
        "Name": "Logger.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Configuration;\n\nnamespace ElectronicStatementGenerator.Utilities\n{\n    public static class Logger\n    {\n        private static IConfiguration _configuration;\n\n        public static void Initialize(IConfiguration configuration)\n        {\n            _configuration = configuration;\n        }\n\n        public static void Log(string message)\n        {\n            // For production, integrate with a centralized logging system\n            Console.WriteLine($\"{DateTime.UtcNow}: {message}\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "2e60da31-3a26-4ffa-a69a-d5e0196e3abe",
        "Name": "EmailHelper.cs",
        "ParentId": "998fb0f0-ed4d-4699-9d0e-8762a5423baf",
        "Type": 1,
        "Text": "using System.Net;\nusing System.Net.Mail;\n\nnamespace ElectronicStatementGenerator.Utilities\n{\n    public static class EmailHelper\n    {\n        public static void SendEmail(string smtpServer, int smtpPort, string smtpUser, string smtpPassword, string recipient, string subject, string message)\n        {\n            using (SmtpClient client = new SmtpClient(smtpServer, smtpPort))\n            {\n                client.Credentials = new NetworkCredential(smtpUser, smtpPassword);\n                client.EnableSsl = true;\n                MailMessage mail = new MailMessage(smtpUser, recipient, subject, message);\n                client.Send(mail);\n            }\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
    "Name": "ATMIntegrationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "7a937d74-86ff-4856-be04-f8595040fc55",
        "Name": "ATMIntegrationService.csproj",
        "ParentId": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
        "Type": 1,
        "Text": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"6.0.0\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n</Project>\n",
        "Language": 0
      },
      {
        "Id": "3f9a3f3e-485b-4bcd-8cc7-31e3536148f0",
        "Name": "Program.cs",
        "ParentId": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ATMIntegrationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9a536066-1fbd-4c78-a90e-ad216aca8f32",
        "Name": "Startup.cs",
        "ParentId": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
        "Type": 1,
        "Text": "using ATMIntegrationService.Integrations;\nusing ATMIntegrationService.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ATMIntegrationService\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            // Register business services and integration components\n            services.AddScoped<IATMService, ATMService>();\n            services.AddHttpClient();\n            services.AddSingleton<CoreBankingAdapter>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f8da444e-20f6-4b94-a586-7496831ecd41",
        "Name": "appsettings.json",
        "ParentId": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
        "Type": 1,
        "Text": "{\n  \"CoreBanking\": {\n    \"Endpoint\": \"https://api.corebanking.com/transactions\",\n    \"ApiKey\": \"YourSecureApiKey\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n",
        "Language": 0
      },
      {
        "Id": "248e2312-7fa6-4e1a-9056-35dc133bc394",
        "Name": "Controllers",
        "ParentId": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c3c79e39-f0f6-44d2-aec0-a98b845391ff",
        "Name": "Services",
        "ParentId": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7b8c3de7-3cd9-413c-8895-3390aef31fc9",
        "Name": "Integrations",
        "ParentId": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "17e86628-5581-4544-a002-7dc5b5ff3484",
        "Name": "Models",
        "ParentId": "ceeb8b4f-18ad-492c-b85a-bc863b8851c5",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "567d773f-3678-438a-976a-364a01c2a1f2",
    "Name": "BranchLocatorTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "a4d5e93e-23db-4de6-8c23-ff56ada8fc4b",
        "Name": "Program.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using BranchLocatorTool.Controllers;\nusing BranchLocatorTool.Repositories;\nusing BranchLocatorTool.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddSwaggerGen();\n\n// Dependency Injection configuration\nbuilder.Services.AddScoped<IBranchLocatorService, BranchLocatorService>();\nbuilder.Services.AddScoped<IBranchRepository, BranchRepository>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "54587a4d-eb25-46be-bb2a-21df9f2dad0d",
        "Name": "Controllers",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3a391e90-26f2-42bd-83b8-c8419a655966",
        "Name": "BranchController.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using BranchLocatorTool.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\n\nnamespace BranchLocatorTool.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BranchController : ControllerBase\n    {\n        private readonly IBranchLocatorService _branchLocatorService;\n\n        public BranchController(IBranchLocatorService branchLocatorService)\n        {\n            _branchLocatorService = branchLocatorService;\n        }\n\n        [HttpGet(\"nearby\")]\n        public async Task<IActionResult> GetNearbyBranches([FromQuery] double latitude, [FromQuery] double longitude, [FromQuery] double radius = 10)\n        {\n            if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180)\n            {\n                return BadRequest(\"Invalid latitude or longitude values.\");\n            }\n\n            var branches = await _branchLocatorService.GetNearbyBranchesAsync(latitude, longitude, radius);\n            return Ok(branches);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c8367cd4-48bb-4042-81d6-a79de3f7df5f",
        "Name": "Models",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "382d9231-6d74-4556-b606-41d117ac5fd2",
        "Name": "Branch.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using System;\n\nnamespace BranchLocatorTool.Models\n{\n    public class Branch\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c3f9f4d4-8627-4717-b824-2f187f2b27ae",
        "Name": "ATM.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using System;\n\nnamespace BranchLocatorTool.Models\n{\n    public class ATM\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f5f69c4f-0101-40ed-a727-b54b1b9f4998",
        "Name": "Services",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "046e52ab-2e20-477f-8bb8-0dd33413c3c5",
        "Name": "IBranchLocatorService.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using BranchLocatorTool.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace BranchLocatorTool.Services\n{\n    public interface IBranchLocatorService\n    {\n        Task<System.Collections.Generic.List<Branch>> GetNearbyBranchesAsync(double latitude, double longitude, double radius);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "600d81d4-257a-43ef-9dd7-0163a7dedd17",
        "Name": "BranchLocatorService.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using BranchLocatorTool.Models;\nusing BranchLocatorTool.Repositories;\nusing BranchLocatorTool.Utilities;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace BranchLocatorTool.Services\n{\n    public class BranchLocatorService : IBranchLocatorService\n    {\n        private readonly IBranchRepository _branchRepository;\n\n        public BranchLocatorService(IBranchRepository branchRepository)\n        {\n            _branchRepository = branchRepository;\n        }\n\n        public async Task<List<Branch>> GetNearbyBranchesAsync(double latitude, double longitude, double radius)\n        {\n            var allBranches = await _branchRepository.GetAllBranchesAsync();\n            var nearbyBranches = allBranches\n                .Where(branch => GeoLocationUtils.GetDistance(latitude, longitude, branch.Latitude, branch.Longitude) <= radius)\n                .OrderBy(branch => GeoLocationUtils.GetDistance(latitude, longitude, branch.Latitude, branch.Longitude))\n                .ToList();\n            return nearbyBranches;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9597529d-0102-4641-be71-c998fdabdfe6",
        "Name": "Repositories",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b00eb5c3-a881-4f2b-9aab-8a78a3f237f3",
        "Name": "IBranchRepository.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using BranchLocatorTool.Models;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace BranchLocatorTool.Repositories\n{\n    public interface IBranchRepository\n    {\n        Task<System.Collections.Generic.List<Branch>> GetAllBranchesAsync();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "007b6322-76f4-463a-bca3-a589ee6427ed",
        "Name": "BranchRepository.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using BranchLocatorTool.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace BranchLocatorTool.Repositories\n{\n    public class BranchRepository : IBranchRepository\n    {\n        private readonly List<Branch> _branches;\n\n        public BranchRepository()\n        {\n            // Initialize with seed data for branches\n            _branches = new List<Branch>\n            {\n                new Branch\n                {\n                    Id = Guid.NewGuid(),\n                    Name = \"Downtown Branch\",\n                    Address = \"123 Main St, City Center\",\n                    Latitude = 40.712776,\n                    Longitude = -74.005974\n                },\n                new Branch\n                {\n                    Id = Guid.NewGuid(),\n                    Name = \"Uptown Branch\",\n                    Address = \"456 North Ave, Uptown\",\n                    Latitude = 40.787011,\n                    Longitude = -73.975368\n                },\n                new Branch\n                {\n                    Id = Guid.NewGuid(),\n                    Name = \"Midtown Branch\",\n                    Address = \"789 Midtown Blvd, Midtown\",\n                    Latitude = 40.754932,\n                    Longitude = -73.984016\n                }\n            };\n        }\n\n        public Task<List<Branch>> GetAllBranchesAsync()\n        {\n            return Task.FromResult(_branches);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0c7cecdb-f5bb-4c83-81c0-df9319e3d406",
        "Name": "Utilities",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8205836e-5c4c-48f7-8537-bd2c60708ddb",
        "Name": "GeoLocationUtils.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using System;\n\nnamespace BranchLocatorTool.Utilities\n{\n    public static class GeoLocationUtils\n    {\n        /// <summary>\n        /// Calculates the distance in kilometers between two points based on their latitude and longitude using the Haversine formula.\n        /// </summary>\n        public static double GetDistance(double lat1, double lon1, double lat2, double lon2)\n        {\n            const double R = 6371; // Earth's radius in kilometers\n            double dLat = ToRadians(lat2 - lat1);\n            double dLon = ToRadians(lon2 - lon1);\n            double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +\n                       Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *\n                       Math.Sin(dLon / 2) * Math.Sin(dLon / 2);\n            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n            return R * c;\n        }\n\n        private static double ToRadians(double degrees)\n        {\n            return degrees * (Math.PI / 180);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5f9f3331-9ebf-4d4e-8147-b392b51d2219",
        "Name": "Extensions",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a6bab8f6-0093-426f-93c7-d5279b609ff8",
        "Name": "ServiceExtensions.cs",
        "ParentId": "567d773f-3678-438a-976a-364a01c2a1f2",
        "Type": 1,
        "Text": "using BranchLocatorTool.Repositories;\nusing BranchLocatorTool.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace BranchLocatorTool.Extensions\n{\n    public static class ServiceExtensions\n    {\n        public static void ConfigureBranchLocatorServices(this IServiceCollection services)\n        {\n            services.AddScoped<IBranchLocatorService, BranchLocatorService>();\n            services.AddScoped<IBranchRepository, BranchRepository>();\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
    "Name": "CurrencyExchangeService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "0c77ffa9-3ad2-4a40-b694-f390796ccf22",
        "Name": "Program.cs",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing CurrencyExchangeService.Configurations;\nusing CurrencyExchangeService.Services;\nusing CurrencyExchangeService.Clients;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.Configure<ExchangeSettings>(builder.Configuration.GetSection(\"ExchangeSettings\"));\nbuilder.Services.AddHttpClient<ExchangeRateApiClient>();\nbuilder.Services.AddScoped<ICurrencyExchangeService, CurrencyExchangeService.Services.CurrencyExchangeService>();\n\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "7d6c31f7-1342-4bd1-b406-874ebff465bf",
        "Name": "appsettings.json",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "{\n  \"ExchangeSettings\": {\n    \"ApiUrl\": \"https://api.exchangerate.host/latest\",\n    \"ApiKey\": \"YOUR_API_KEY\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}",
        "Language": 0
      },
      {
        "Id": "31181f4b-b074-4ba4-8aaf-792abc960d5f",
        "Name": "Controllers",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6765671c-a605-4548-8af0-0ed6f4d1c3d3",
        "Name": "CurrencyExchangeController.cs",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing CurrencyExchangeService.Models;\nusing CurrencyExchangeService.Services;\n\nnamespace CurrencyExchangeService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CurrencyExchangeController : ControllerBase\n    {\n        private readonly ICurrencyExchangeService _exchangeService;\n\n        public CurrencyExchangeController(ICurrencyExchangeService exchangeService)\n        {\n            _exchangeService = exchangeService;\n        }\n\n        [HttpPost(\"convert\")]\n        public async Task<IActionResult> ConvertCurrency([FromBody] CurrencyConversionRequest request)\n        {\n            if (request == null || request.Amount <= 0 || string.IsNullOrWhiteSpace(request.FromCurrency) || string.IsNullOrWhiteSpace(request.ToCurrency))\n            {\n                return BadRequest(\"Invalid conversion request parameters.\");\n            }\n\n            try\n            {\n                CurrencyConversionResponse response = await _exchangeService.ConvertCurrencyAsync(request);\n                return Ok(response);\n            }\n            catch (Exception ex)\n            {\n                // In production, consider logging the exception details\n                return StatusCode(500, $\"An error occurred while processing the request: {ex.Message}\");\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "58132621-0ff2-46ab-806c-9de89dea0188",
        "Name": "Services",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fa93b8ab-74f0-4be9-8cce-94504bfb42dd",
        "Name": "ICurrencyExchangeService.cs",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing CurrencyExchangeService.Models;\n\nnamespace CurrencyExchangeService.Services\n{\n    public interface ICurrencyExchangeService\n    {\n        Task<CurrencyConversionResponse> ConvertCurrencyAsync(CurrencyConversionRequest request);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b0adceba-85bd-45dc-ba9e-f23069d3cc50",
        "Name": "CurrencyExchangeService.cs",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing CurrencyExchangeService.Clients;\nusing CurrencyExchangeService.Models;\n\nnamespace CurrencyExchangeService.Services\n{\n    public class CurrencyExchangeService : ICurrencyExchangeService\n    {\n        private readonly ExchangeRateApiClient _exchangeRateApiClient;\n\n        public CurrencyExchangeService(ExchangeRateApiClient exchangeRateApiClient)\n        {\n            _exchangeRateApiClient = exchangeRateApiClient;\n        }\n\n        public async Task<CurrencyConversionResponse> ConvertCurrencyAsync(CurrencyConversionRequest request)\n        {\n            // Retrieve the exchange rate using the external API client\n            decimal rate = await _exchangeRateApiClient.GetExchangeRateAsync(request.FromCurrency, request.ToCurrency);\n            \n            // Calculate the converted amount\n            decimal convertedAmount = request.Amount * rate;\n\n            return new CurrencyConversionResponse\n            {\n                OriginalAmount = request.Amount,\n                ConvertedAmount = convertedAmount,\n                Rate = rate,\n                FromCurrency = request.FromCurrency.ToUpper(),\n                ToCurrency = request.ToCurrency.ToUpper()\n            };\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "6610547b-464c-44ae-8f70-fc78bc02eaf6",
        "Name": "Models",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a5f565b2-2261-4f9e-9806-bbf728d3acc4",
        "Name": "CurrencyConversionRequest.cs",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "namespace CurrencyExchangeService.Models\n{\n    public class CurrencyConversionRequest\n    {\n        public decimal Amount { get; set; }\n        public string FromCurrency { get; set; }\n        public string ToCurrency { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "4911996d-b2cf-491e-83ed-c076303bf9f5",
        "Name": "CurrencyConversionResponse.cs",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "namespace CurrencyExchangeService.Models\n{\n    public class CurrencyConversionResponse\n    {\n        public decimal OriginalAmount { get; set; }\n        public decimal ConvertedAmount { get; set; }\n        public decimal Rate { get; set; }\n        public string FromCurrency { get; set; }\n        public string ToCurrency { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "27232580-dc5b-48f5-b956-816488f4077d",
        "Name": "Clients",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "523540ca-8cf9-4ef1-80d4-c91ea505a48b",
        "Name": "ExchangeRateApiClient.cs",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Options;\nusing CurrencyExchangeService.Configurations;\n\nnamespace CurrencyExchangeService.Clients\n{\n    public class ExchangeRateApiClient\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ExchangeSettings _exchangeSettings;\n\n        public ExchangeRateApiClient(HttpClient httpClient, IOptions<ExchangeSettings> options)\n        {\n            _httpClient = httpClient;\n            _exchangeSettings = options.Value;\n        }\n\n        public async Task<decimal> GetExchangeRateAsync(string fromCurrency, string toCurrency)\n        {\n            // Build the request URL using parameters from settings\n            string requestUrl = $\"{_exchangeSettings.ApiUrl}?base={fromCurrency.ToUpper()}&symbols={toCurrency.ToUpper()}\";\n            \n            HttpResponseMessage response = await _httpClient.GetAsync(requestUrl);\n            if (!response.IsSuccessStatusCode)\n            {\n                throw new Exception($\"Failed to fetch exchange rate: {response.ReasonPhrase}\");\n            }\n\n            var apiResponse = await response.Content.ReadFromJsonAsync<ExchangeRateApiResponse>();\n            \n            if (apiResponse == null || apiResponse.Rates == null || !apiResponse.Rates.ContainsKey(toCurrency.ToUpper()))\n            {\n                throw new Exception(\"Invalid response from exchange rate provider.\");\n            }\n\n            return apiResponse.Rates[toCurrency.ToUpper()];\n        }\n    }\n\n    // Helper class to map the external API response\n    public class ExchangeRateApiResponse\n    {\n        public string Base { get; set; }\n        public System.Collections.Generic.Dictionary<string, decimal> Rates { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "55576929-35dd-4add-b848-b6022b033dc6",
        "Name": "Configurations",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5f96ee9c-8b13-40ae-b3c2-b349b0309e16",
        "Name": "ExchangeSettings.cs",
        "ParentId": "9ea4f555-a381-4b11-b0bb-4c5d01b69c02",
        "Type": 1,
        "Text": "namespace CurrencyExchangeService.Configurations\n{\n    public class ExchangeSettings\n    {\n        public string ApiUrl { get; set; }\n        public string ApiKey { get; set; }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "78b98086-a351-45c4-b8ab-83e145153a38",
    "Name": "InterestRateCalculator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "87e0b345-31a2-41d7-bd0d-bb715eb8388b",
        "Name": "Program.cs",
        "ParentId": "78b98086-a351-45c4-b8ab-83e145153a38",
        "Type": 1,
        "Text": "using System;\nusing Models;\nusing Services;\n\nnamespace InterestRateCalculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var calculator = new InterestRateCalculatorService();\n\n            Console.WriteLine(\"Enter principal amount:\");\n            decimal principal;\n            while (!decimal.TryParse(Console.ReadLine(), out principal) || principal <= 0)\n            {\n                Console.WriteLine(\"Please enter a valid positive number for principal amount:\");\n            }\n\n            Console.WriteLine(\"Enter number of years:\");\n            int years;\n            while (!int.TryParse(Console.ReadLine(), out years) || years <= 0)\n            {\n                Console.WriteLine(\"Please enter a valid positive number for years:\");\n            }\n\n            Console.WriteLine(\"Select account type (Savings, Checking, Business, FixedDeposit):\");\n            string accountTypeInput = Console.ReadLine();\n            AccountType accountType;\n            if (!Enum.TryParse(accountTypeInput, true, out accountType))\n            {\n                Console.WriteLine(\"Invalid account type selected. Defaulting to Savings.\");\n                accountType = AccountType.Savings;\n            }\n\n            var request = new InterestRateRequest\n            {\n                Principal = principal,\n                Years = years,\n                AccountType = accountType\n            };\n\n            InterestRateResponse response = calculator.CalculateInterest(request);\n\n            Console.WriteLine($\"Account Type: {accountType}\");\n            Console.WriteLine($\"Annual Interest Rate: {response.AnnualRate:P2}\");\n            Console.WriteLine($\"Calculated Interest: {response.InterestAmount:C}\");\n            Console.WriteLine($\"Final Amount after {years} year(s): {response.FinalAmount:C}\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ad037e2b-e2d9-4413-9e97-6bc843ef95f4",
        "Name": "Models",
        "ParentId": "78b98086-a351-45c4-b8ab-83e145153a38",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0e25f073-aa8f-4325-a6f2-d3e59bd7d2f1",
        "Name": "Services",
        "ParentId": "78b98086-a351-45c4-b8ab-83e145153a38",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "474b96b6-ce49-482f-baa6-753d999932ab",
    "Name": "BudgetingTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "ad43480c-6662-4005-9f79-8c97e16ec43a",
        "Name": "BudgetingTool.API",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ea88492e-4d7b-44c7-ba04-12e61aaa0e1d",
        "Name": "Program.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace BudgetingTool.API\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "76f3b50b-f43d-4f64-8ad4-534db7300b24",
        "Name": "Startup.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using BudgetingTool.Business.Services;\nusing BudgetingTool.Data.Repositories;\nusing BudgetingTool.Infrastructure.Logging;\nusing BudgetingTool.Infrastructure.Notification;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace BudgetingTool.API\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<BudgetingTool.Domain.Interfaces.IBudgetRepository, BudgetingTool.Data.Repositories.BudgetRepository>();\n            services.AddSingleton<BudgetingTool.Domain.Interfaces.IBudgetService, BudgetingTool.Business.Services.BudgetService>();\n            services.AddSingleton<BudgetingTool.Infrastructure.Logging.ILogger, BudgetingTool.Infrastructure.Logging.Logger>();\n            services.AddSingleton<BudgetingTool.Infrastructure.Notification.INotificationService, BudgetingTool.Infrastructure.Notification.NotificationService>();\n            services.AddSwaggerGen();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseSwagger();\n            app.UseSwaggerUI(c => { c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"BudgetingTool API V1\"); });\n            app.UseRouting();\n            app.UseEndpoints(endpoints => endpoints.MapControllers());\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "163bb4e5-253a-4fc2-aef4-a8910c268022",
        "Name": "Controllers",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8592ff06-d09a-4475-9213-3408277abd9f",
        "Name": "BudgetController.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing BudgetingTool.Business.Services;\nusing BudgetingTool.Domain.Entities;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace BudgetingTool.API.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BudgetController : ControllerBase\n    {\n        private readonly BudgetingTool.Domain.Interfaces.IBudgetService _budgetService;\n\n        public BudgetController(BudgetingTool.Domain.Interfaces.IBudgetService budgetService)\n        {\n            _budgetService = budgetService;\n        }\n\n        [HttpGet]\n        public ActionResult<IEnumerable<Budget>> GetBudgets()\n        {\n            var budgets = _budgetService.GetBudgets();\n            return Ok(budgets);\n        }\n\n        [HttpPost]\n        public ActionResult CreateBudget([FromBody] Budget budget)\n        {\n            _budgetService.CreateBudget(budget);\n            return Ok();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a3bc861a-c284-47ca-ae73-1378ccec33ab",
        "Name": "BudgetingTool.Business",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7ebafa46-5c1f-42e2-9d3c-97f393f149f8",
        "Name": "Services",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "273c538b-1645-4ddd-8ed9-5daee6d627df",
        "Name": "BudgetService.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing BudgetingTool.Domain.Entities;\nusing BudgetingTool.Domain.Interfaces;\n\nnamespace BudgetingTool.Business.Services\n{\n    public class BudgetService : IBudgetService\n    {\n        private readonly IBudgetRepository _budgetRepository;\n\n        public BudgetService(IBudgetRepository budgetRepository)\n        {\n            _budgetRepository = budgetRepository;\n        }\n\n        public IEnumerable<Budget> GetBudgets()\n        {\n            return _budgetRepository.GetAllBudgets();\n        }\n\n        public void CreateBudget(Budget budget)\n        {\n            // Business validation logic can be implemented here\n            _budgetRepository.AddBudget(budget);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "db72a98b-80f0-49cf-8f00-028531922938",
        "Name": "BudgetingTool.Data",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fa4cd5ff-d0d4-4ec7-a79a-7dd24cf4cc2a",
        "Name": "Repositories",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "df426e9f-7b28-498c-a8d5-8aae748f43bb",
        "Name": "BudgetRepository.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing BudgetingTool.Domain.Entities;\nusing BudgetingTool.Domain.Interfaces;\n\nnamespace BudgetingTool.Data.Repositories\n{\n    public class BudgetRepository : IBudgetRepository\n    {\n        private readonly List<Budget> _budgets;\n\n        public BudgetRepository()\n        {\n            _budgets = new List<Budget>();\n        }\n\n        public IEnumerable<Budget> GetAllBudgets()\n        {\n            return _budgets.AsEnumerable();\n        }\n\n        public void AddBudget(Budget budget)\n        {\n            if(budget.Id == Guid.Empty)\n                budget.Id = Guid.NewGuid();\n            budget.CreatedAt = DateTime.UtcNow;\n            _budgets.Add(budget);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "5ac75891-170b-47ec-9c32-4ef8aef6038c",
        "Name": "BudgetingTool.Domain",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "85cdd069-4afc-4c9d-a728-f912cbc4c22e",
        "Name": "Entities",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "53dcdb4c-4120-4032-8e34-5eb613d7fbf1",
        "Name": "Budget.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using System;\n\nnamespace BudgetingTool.Domain.Entities\n{\n    public class Budget\n    {\n        public Guid Id { get; set; }\n        public string Category { get; set; }\n        public decimal Limit { get; set; }\n        public decimal Spent { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "4fb450b6-439d-454a-92e9-5e7df6e848bf",
        "Name": "Interfaces",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "54d0400a-183e-4e52-8849-77216bb91560",
        "Name": "IBudgetService.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing BudgetingTool.Domain.Entities;\n\nnamespace BudgetingTool.Domain.Interfaces\n{\n    public interface IBudgetService\n    {\n        IEnumerable<Budget> GetBudgets();\n        void CreateBudget(Budget budget);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "9c39582a-0cc5-4d6b-a864-4f9e5a0c797f",
        "Name": "IBudgetRepository.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing BudgetingTool.Domain.Entities;\n\nnamespace BudgetingTool.Domain.Interfaces\n{\n    public interface IBudgetRepository\n    {\n        IEnumerable<Budget> GetAllBudgets();\n        void AddBudget(Budget budget);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f4eee2c6-7307-4d37-90d4-1fb5c3417bda",
        "Name": "BudgetingTool.Infrastructure",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7d2f255e-3869-4fe5-8fc2-879390476d8a",
        "Name": "Logging",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "abe0b38b-65dd-41de-8394-38da369b42b9",
        "Name": "Logger.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using System;\n\nnamespace BudgetingTool.Infrastructure.Logging\n{\n    public interface ILogger\n    {\n        void LogInfo(string message);\n        void LogError(string message, Exception ex);\n    }\n\n    public class Logger : ILogger\n    {\n        public void LogInfo(string message)\n        {\n            Console.WriteLine($\"INFO: {DateTime.UtcNow}: {message}\");\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            Console.WriteLine($\"ERROR: {DateTime.UtcNow}: {message} Exception: {ex.Message}\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "1a6c1368-8e2a-49e4-937c-74e4f3cdb740",
        "Name": "Notification",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c93309b3-d009-4f07-b569-860dc5b15350",
        "Name": "NotificationService.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using System;\n\nnamespace BudgetingTool.Infrastructure.Notification\n{\n    public interface INotificationService\n    {\n        void SendBudgetAlert(string recipient, string message);\n    }\n\n    public class NotificationService : INotificationService\n    {\n        public void SendBudgetAlert(string recipient, string message)\n        {\n            // Simulate sending a notification; in production this would integrate with an external service\n            Console.WriteLine($\"Notification sent to {recipient}: {message}\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a3de8cec-a143-4a84-8c38-b03234d91973",
        "Name": "Configuration",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "13cc7537-d36c-457e-8e8e-dcbc968690be",
        "Name": "AppConfiguration.cs",
        "ParentId": "474b96b6-ce49-482f-baa6-753d999932ab",
        "Type": 1,
        "Text": "using Microsoft.Extensions.Configuration;\n\nnamespace BudgetingTool.Infrastructure.Configuration\n{\n    public class AppConfiguration\n    {\n        public IConfiguration Configuration { get; }\n\n        public AppConfiguration(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public string GetConnectionString(string name)\n        {\n            return Configuration.GetConnectionString(name);\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "7ffdedad-cae1-4323-a632-acc85331218a",
    "Name": "SavingsGoalTracker",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "53eae3ef-04da-49d2-890d-296eac79b536",
        "Name": "Program.cs",
        "ParentId": "7ffdedad-cae1-4323-a632-acc85331218a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SavingsGoalTracker\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d2f86dc2-efc0-4a25-9cca-3ceae0897152",
        "Name": "Startup.cs",
        "ParentId": "7ffdedad-cae1-4323-a632-acc85331218a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SavingsGoalTracker.Application.Services;\nusing SavingsGoalTracker.Domain;\nusing SavingsGoalTracker.Infrastructure.Persistence;\n\nnamespace SavingsGoalTracker\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddScoped<ISavingsGoalRepository, SavingsGoalRepository>();\n            services.AddScoped<SavingsGoalService>();\n            services.AddSwaggerGen();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseSwagger();\n            app.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"SavingsGoalTracker v1\"));\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3aa005eb-8fc1-45c3-b4e1-b62e22791197",
        "Name": "Domain",
        "ParentId": "7ffdedad-cae1-4323-a632-acc85331218a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8e20b875-bb53-490e-99db-e77e71703d05",
        "Name": "Application",
        "ParentId": "7ffdedad-cae1-4323-a632-acc85331218a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0c433b57-b5ae-4eb0-91e1-093940464ee7",
        "Name": "Infrastructure",
        "ParentId": "7ffdedad-cae1-4323-a632-acc85331218a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8006ff2d-0ae7-4ea1-b9e7-769cdd1ed787",
        "Name": "API",
        "ParentId": "7ffdedad-cae1-4323-a632-acc85331218a",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "57c0e2e0-f728-462b-896e-b6fea5bf1cd7",
    "Name": "Credit Card Management System",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "f7ec37bf-b7fb-43e8-9832-27c16db838d4",
        "Name": "Program.cs",
        "ParentId": "57c0e2e0-f728-462b-896e-b6fea5bf1cd7",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace CreditCardManagementSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8d8733b0-86f2-49ea-a987-3fd86731e69d",
        "Name": "Startup.cs",
        "ParentId": "57c0e2e0-f728-462b-896e-b6fea5bf1cd7",
        "Type": 1,
        "Text": "using CreditCardManagementSystem.Data;\nusing CreditCardManagementSystem.Repositories;\nusing CreditCardManagementSystem.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace CreditCardManagementSystem\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<BankContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n            services.AddScoped<ICreditCardRepository, CreditCardRepository>();\n            services.AddScoped<CreditCardService>();\n            services.AddScoped<BillingService>();\n            services.AddScoped<PaymentService>();\n        }\n\n        public void Configure(IApplicationBuilder app)\n        {\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "2d396c4e-1db8-4bd7-8904-2b67a62e5f70",
        "Name": "Controllers",
        "ParentId": "57c0e2e0-f728-462b-896e-b6fea5bf1cd7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "586476ad-0064-436a-b954-344655f7a8de",
        "Name": "Models",
        "ParentId": "57c0e2e0-f728-462b-896e-b6fea5bf1cd7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a3463951-2a66-42c4-a9da-6b8044210766",
        "Name": "Data",
        "ParentId": "57c0e2e0-f728-462b-896e-b6fea5bf1cd7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7053466a-a931-43fb-a89b-d9026490fd5b",
        "Name": "Repositories",
        "ParentId": "57c0e2e0-f728-462b-896e-b6fea5bf1cd7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a469adc2-2270-4cac-b9b3-a0c158b1a4a7",
        "Name": "Services",
        "ParentId": "57c0e2e0-f728-462b-896e-b6fea5bf1cd7",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
    "Name": "DebitCardManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "192b7db4-6ab7-456b-bd01-4a5ad61bcd04",
        "Name": "Program.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DebitCardManagementSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5c7f4abd-9d91-47f2-875a-743dbba4ce75",
        "Name": "Startup.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DebitCardManagementSystem.Infrastructure;\nusing DebitCardManagementSystem.Services;\nusing DebitCardManagementSystem.Repositories;\n\nnamespace DebitCardManagementSystem\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<DebitCardDbContext>(options =>\n                options.UseInMemoryDatabase(\"DebitCardDb\"));\n            services.AddScoped<IDebitCardService, DebitCardService>();\n            services.AddScoped<IDebitCardRepository, DebitCardRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "afc1388c-9a29-456c-b7b0-60e3987d1bff",
        "Name": "Controllers",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "63526430-1b14-42b0-9d64-53096692eadc",
        "Name": "DebitCardController.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing DebitCardManagementSystem.Models;\nusing DebitCardManagementSystem.Services;\n\nnamespace DebitCardManagementSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DebitCardController : ControllerBase\n    {\n        private readonly IDebitCardService _debitCardService;\n\n        public DebitCardController(IDebitCardService debitCardService)\n        {\n            _debitCardService = debitCardService;\n        }\n\n        [HttpGet(\"{cardId}\")]\n        public ActionResult<DebitCard> GetDebitCard(Guid cardId)\n        {\n            var card = _debitCardService.GetDebitCard(cardId);\n            if (card == null)\n            {\n                return NotFound();\n            }\n            return Ok(card);\n        }\n\n        [HttpPost(\"transaction\")]\n        public ActionResult ProcessTransaction([FromBody] Transaction transaction)\n        {\n            var result = _debitCardService.ProcessTransaction(transaction);\n            if (!result)\n            {\n                return BadRequest(\"Transaction could not be processed.\");\n            }\n            return Ok(\"Transaction successful.\");\n        }\n\n        [HttpPost(\"activate/{cardId}\")]\n        public ActionResult ActivateCard(Guid cardId)\n        {\n            var result = _debitCardService.ActivateCard(cardId);\n            if (!result)\n            {\n                return BadRequest(\"Card activation failed.\");\n            }\n            return Ok(\"Card activated successfully.\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "df34f7d4-8d17-47b4-8c00-88d1d452e162",
        "Name": "Services",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3ffeec21-b750-4e78-ac69-78adb3e15a54",
        "Name": "IDebitCardService.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using System;\nusing DebitCardManagementSystem.Models;\n\nnamespace DebitCardManagementSystem.Services\n{\n    public interface IDebitCardService\n    {\n        DebitCard GetDebitCard(Guid cardId);\n        bool ProcessTransaction(Transaction transaction);\n        bool ActivateCard(Guid cardId);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "dde31c1c-f8c0-4faa-9b52-e72e13e73f3a",
        "Name": "DebitCardService.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using System;\nusing DebitCardManagementSystem.Models;\nusing DebitCardManagementSystem.Repositories;\n\nnamespace DebitCardManagementSystem.Services\n{\n    public class DebitCardService : IDebitCardService\n    {\n        private readonly IDebitCardRepository _repository;\n\n        public DebitCardService(IDebitCardRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public DebitCard GetDebitCard(Guid cardId)\n        {\n            return _repository.GetDebitCardById(cardId);\n        }\n\n        public bool ProcessTransaction(Transaction transaction)\n        {\n            var card = _repository.GetDebitCardById(transaction.DebitCardId);\n            if (card == null || !card.IsActive)\n            {\n                return false;\n            }\n            if (transaction.Amount > card.Balance)\n            {\n                return false;\n            }\n\n            card.Balance -= transaction.Amount;\n            _repository.UpdateDebitCard(card);\n            _repository.AddTransaction(transaction);\n            return true;\n        }\n\n        public bool ActivateCard(Guid cardId)\n        {\n            var card = _repository.GetDebitCardById(cardId);\n            if (card == null)\n            {\n                return false;\n            }\n            card.IsActive = true;\n            _repository.UpdateDebitCard(card);\n            return true;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "94c9812e-2893-4fdf-90cc-1b1053981821",
        "Name": "Repositories",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "24596868-8657-4f52-b3d6-39cd118528af",
        "Name": "IDebitCardRepository.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing DebitCardManagementSystem.Models;\n\nnamespace DebitCardManagementSystem.Repositories\n{\n    public interface IDebitCardRepository\n    {\n        DebitCard GetDebitCardById(Guid cardId);\n        void UpdateDebitCard(DebitCard card);\n        void AddTransaction(Transaction transaction);\n        System.Collections.Generic.List<Transaction> GetTransactionsByCardId(Guid cardId);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ca003d1c-c9b3-4356-92d6-93bc74433dfc",
        "Name": "DebitCardRepository.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing DebitCardManagementSystem.Models;\nusing DebitCardManagementSystem.Infrastructure;\n\nnamespace DebitCardManagementSystem.Repositories\n{\n    public class DebitCardRepository : IDebitCardRepository\n    {\n        private readonly DebitCardDbContext _context;\n\n        public DebitCardRepository(DebitCardDbContext context)\n        {\n            _context = context;\n        }\n\n        public DebitCard GetDebitCardById(Guid cardId)\n        {\n            return _context.DebitCards.SingleOrDefault(c => c.Id == cardId);\n        }\n\n        public void UpdateDebitCard(DebitCard card)\n        {\n            _context.DebitCards.Update(card);\n            _context.SaveChanges();\n        }\n\n        public void AddTransaction(Transaction transaction)\n        {\n            _context.Transactions.Add(transaction);\n            _context.SaveChanges();\n        }\n\n        public List<Transaction> GetTransactionsByCardId(Guid cardId)\n        {\n            return _context.Transactions.Where(t => t.DebitCardId == cardId).ToList();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "025c0717-3b5f-46a8-b053-ea0ae97fd696",
        "Name": "Models",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "127caae3-574b-43b5-9d58-9f315662ffbb",
        "Name": "DebitCard.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using System;\n\nnamespace DebitCardManagementSystem.Models\n{\n    public class DebitCard\n    {\n        public Guid Id { get; set; }\n        public string CardNumber { get; set; }\n        public DateTime ExpiryDate { get; set; }\n        public decimal Balance { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3133d899-4be7-46aa-a60c-6b85b9195de4",
        "Name": "Transaction.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using System;\n\nnamespace DebitCardManagementSystem.Models\n{\n    public class Transaction\n    {\n        public Guid Id { get; set; }\n        public Guid DebitCardId { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime TransactionDate { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4b039269-b774-489c-ab66-2d3e0f3e7bf4",
        "Name": "Infrastructure",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a50e4ce2-4850-4e5e-ac0e-83fb98dae00a",
        "Name": "DebitCardDbContext.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing DebitCardManagementSystem.Models;\n\nnamespace DebitCardManagementSystem.Infrastructure\n{\n    public class DebitCardDbContext : DbContext\n    {\n        public DebitCardDbContext(DbContextOptions<DebitCardDbContext> options) : base(options)\n        {\n        }\n\n        public DbSet<DebitCard> DebitCards { get; set; }\n        public DbSet<Transaction> Transactions { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "08afb580-07dd-47f0-8592-f7a0bbbd9a51",
        "Name": "Exceptions",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d96fa4df-e7e5-45f1-8509-e072f3bdd976",
        "Name": "InsufficientFundsException.cs",
        "ParentId": "92c47b48-99c8-4786-9b7b-8d309ad4c8e5",
        "Type": 1,
        "Text": "using System;\n\nnamespace DebitCardManagementSystem.Exceptions\n{\n    public class InsufficientFundsException : Exception\n    {\n        public InsufficientFundsException(string message) : base(message)\n        {\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "2cf5c230-d5ff-40d0-bfb7-be2ac3207693",
    "Name": "CardIssuanceService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b1bde623-62aa-4c42-b5b2-cf5c4c834a40",
        "Name": "CardIssuanceService.sln",
        "ParentId": "2cf5c230-d5ff-40d0-bfb7-be2ac3207693",
        "Type": 1,
        "Text": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.31903.59\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"CardIssuanceService.Api\", \"Api\\CardIssuanceService.Api.csproj\", \"{D4A3F9D7-9C6D-4A1C-8D5B-1234567890AB}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"CardIssuanceService.Domain\", \"Domain\\CardIssuanceService.Domain.csproj\", \"{A1B2C3D4-E5F6-4789-ABCD-1234567890AB}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"CardIssuanceService.Infrastructure\", \"Infrastructure\\CardIssuanceService.Infrastructure.csproj\", \"{B1C2D3E4-F5A6-4789-ABCD-1234567890AB}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"CardIssuanceService.Services\", \"Services\\CardIssuanceService.Services.csproj\", \"{C1D2E3F4-A5B6-4789-ABCD-1234567890AB}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{D4A3F9D7-9C6D-4A1C-8D5B-1234567890AB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D4A3F9D7-9C6D-4A1C-8D5B-1234567890AB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A1B2C3D4-E5F6-4789-ABCD-1234567890AB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A1B2C3D4-E5F6-4789-ABCD-1234567890AB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B1C2D3E4-F5A6-4789-ABCD-1234567890AB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B1C2D3E4-F5A6-4789-ABCD-1234567890AB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C1D2E3F4-A5B6-4789-ABCD-1234567890AB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C1D2E3F4-A5B6-4789-ABCD-1234567890AB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\tEndGlobalSection\nEndGlobal",
        "Language": 0
      },
      {
        "Id": "5042149a-7ef3-44b9-861b-ff6fbb0c6614",
        "Name": "Api",
        "ParentId": "2cf5c230-d5ff-40d0-bfb7-be2ac3207693",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "eff9e0c0-ea39-42da-bf1d-fe128034b59e",
        "Name": "Domain",
        "ParentId": "2cf5c230-d5ff-40d0-bfb7-be2ac3207693",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fc07cff1-bd6e-4224-bc9e-358f7f695924",
        "Name": "Infrastructure",
        "ParentId": "2cf5c230-d5ff-40d0-bfb7-be2ac3207693",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "97b9fc6d-ef8c-45de-a751-93dbf54727d0",
        "Name": "Services",
        "ParentId": "2cf5c230-d5ff-40d0-bfb7-be2ac3207693",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "3c8fedfa-2978-4a44-81d4-5e76db465bc0",
    "Name": "ContactlessPaymentService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "df255e39-8ac1-4fd3-b444-2c8b0f2c5cb9",
        "Name": "Program.cs",
        "ParentId": "3c8fedfa-2978-4a44-81d4-5e76db465bc0",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ContactlessPaymentService.Business;\nusing ContactlessPaymentService.Persistence;\nusing ContactlessPaymentService.Integration;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<IPaymentService, PaymentService>();\nbuilder.Services.AddScoped<IPaymentRepository, PaymentRepository>();\nbuilder.Services.AddScoped<INFCReaderIntegration, NFCReaderIntegration>();\n\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => {\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "8805a658-3537-494a-8393-7743f949eabd",
        "Name": "Controllers",
        "ParentId": "3c8fedfa-2978-4a44-81d4-5e76db465bc0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "eb00065c-88fa-4a65-b77a-1b26cdc36cfd",
        "Name": "Business",
        "ParentId": "3c8fedfa-2978-4a44-81d4-5e76db465bc0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "056de3cc-3c48-46c5-b1a4-87d03cb0e204",
        "Name": "Models",
        "ParentId": "3c8fedfa-2978-4a44-81d4-5e76db465bc0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d0642c49-ff1a-4714-82f1-b80a71efebfe",
        "Name": "Persistence",
        "ParentId": "3c8fedfa-2978-4a44-81d4-5e76db465bc0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f6d93945-f466-4ed3-b778-bcf65e49d29d",
        "Name": "Integration",
        "ParentId": "3c8fedfa-2978-4a44-81d4-5e76db465bc0",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "a95eb084-6c0a-4480-a841-a9e57161148a",
    "Name": "LoyaltyRewardsManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b3f348eb-a6bf-4acb-a30a-b6c42e9e1a31",
        "Name": "Core",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "21bdb5ee-8772-4f9b-9be6-f69f31e25f4a",
        "Name": "RewardProgram.cs",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "using System;\n\nnamespace LoyaltyRewardsManager.Core\n{\n    public class RewardProgram\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public decimal EarningRate { get; set; } // points earned per currency unit spent\n        public decimal RedemptionRate { get; set; } // currency value per point redeemed\n        public int ExpirationDays { get; set; }\n\n        public RewardProgram(Guid id, string name, decimal earningRate, decimal redemptionRate, int expirationDays)\n        {\n            Id = id;\n            Name = name;\n            EarningRate = earningRate;\n            RedemptionRate = redemptionRate;\n            ExpirationDays = expirationDays;\n        }\n\n        public decimal CalculatePoints(decimal transactionAmount)\n        {\n            return Math.Floor(transactionAmount * EarningRate);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "579c844b-e577-4562-a75b-fd949c93ace7",
        "Name": "RewardTransaction.cs",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "using System;\n\nnamespace LoyaltyRewardsManager.Core\n{\n    public enum TransactionType\n    {\n        Earn,\n        Redeem\n    }\n\n    public class RewardTransaction\n    {\n        public Guid Id { get; set; }\n        public Guid CustomerId { get; set; }\n        public TransactionType Type { get; set; }\n        public decimal Amount { get; set; } // transaction amount\n        public decimal Points { get; set; }\n        public DateTime TransactionDate { get; set; }\n\n        public RewardTransaction(Guid customerId, TransactionType type, decimal amount, decimal points)\n        {\n            Id = Guid.NewGuid();\n            CustomerId = customerId;\n            Type = type;\n            Amount = amount;\n            Points = points;\n            TransactionDate = DateTime.UtcNow;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4fc15d63-98b3-418c-955b-a16c0cb9a81d",
        "Name": "CustomerLoyaltyAccount.cs",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace LoyaltyRewardsManager.Core\n{\n    public class CustomerLoyaltyAccount\n    {\n        public Guid CustomerId { get; set; }\n        public decimal TotalPoints { get; set; }\n        public List<RewardTransaction> Transactions { get; set; }\n\n        public CustomerLoyaltyAccount(Guid customerId)\n        {\n            CustomerId = customerId;\n            TotalPoints = 0;\n            Transactions = new List<RewardTransaction>();\n        }\n\n        public void AddPoints(decimal points, RewardTransaction transaction)\n        {\n            TotalPoints += points;\n            Transactions.Add(transaction);\n        }\n\n        public bool RedeemPoints(decimal points, RewardTransaction transaction)\n        {\n            if (TotalPoints >= points)\n            {\n                TotalPoints -= points;\n                Transactions.Add(transaction);\n                return true;\n            }\n            return false;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "db9890f4-4045-45ed-b1b3-137f1eff4325",
        "Name": "Data",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5f5612d1-b410-4296-8012-c5a67b80b427",
        "Name": "ILoyaltyRepository.cs",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "using System;\nusing LoyaltyRewardsManager.Core;\n\nnamespace LoyaltyRewardsManager.Data\n{\n    public interface ILoyaltyRepository\n    {\n        CustomerLoyaltyAccount GetAccountByCustomerId(Guid customerId);\n        void CreateAccount(CustomerLoyaltyAccount account);\n        void UpdateAccount(CustomerLoyaltyAccount account);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "53572425-7a0e-4f9c-9884-eee6d4569b57",
        "Name": "LoyaltyRepository.cs",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Concurrent;\nusing LoyaltyRewardsManager.Core;\n\nnamespace LoyaltyRewardsManager.Data\n{\n    public class LoyaltyRepository : ILoyaltyRepository\n    {\n        private static readonly ConcurrentDictionary<Guid, CustomerLoyaltyAccount> accounts = new ConcurrentDictionary<Guid, CustomerLoyaltyAccount>();\n\n        public CustomerLoyaltyAccount GetAccountByCustomerId(Guid customerId)\n        {\n            accounts.TryGetValue(customerId, out CustomerLoyaltyAccount account);\n            return account;\n        }\n\n        public void CreateAccount(CustomerLoyaltyAccount account)\n        {\n            accounts.TryAdd(account.CustomerId, account);\n        }\n\n        public void UpdateAccount(CustomerLoyaltyAccount account)\n        {\n            accounts[account.CustomerId] = account;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5878da84-0b87-4a8f-916e-222e94468a45",
        "Name": "Services",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7619bbff-4753-45bd-af7e-4447e82fc3f9",
        "Name": "LoyaltyService.cs",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "using System;\nusing LoyaltyRewardsManager.Core;\nusing LoyaltyRewardsManager.Data;\n\nnamespace LoyaltyRewardsManager.Services\n{\n    public class LoyaltyService\n    {\n        private readonly ILoyaltyRepository _repository;\n        private readonly RewardProgram _program;\n\n        public LoyaltyService(ILoyaltyRepository repository, RewardProgram program)\n        {\n            _repository = repository;\n            _program = program;\n        }\n\n        public CustomerLoyaltyAccount GetOrCreateAccount(Guid customerId)\n        {\n            var account = _repository.GetAccountByCustomerId(customerId);\n            if (account == null)\n            {\n                account = new CustomerLoyaltyAccount(customerId);\n                _repository.CreateAccount(account);\n            }\n            return account;\n        }\n\n        public decimal EarnPoints(Guid customerId, decimal transactionAmount)\n        {\n            var account = GetOrCreateAccount(customerId);\n            var points = _program.CalculatePoints(transactionAmount);\n            var transaction = new RewardTransaction(customerId, TransactionType.Earn, transactionAmount, points);\n            account.AddPoints(points, transaction);\n            _repository.UpdateAccount(account);\n            return points;\n        }\n\n        public bool RedeemPoints(Guid customerId, decimal pointsToRedeem)\n        {\n            var account = GetOrCreateAccount(customerId);\n            if (account.TotalPoints < pointsToRedeem)\n            {\n                return false;\n            }\n            var redemptionAmount = pointsToRedeem * _program.RedemptionRate;\n            var transaction = new RewardTransaction(customerId, TransactionType.Redeem, redemptionAmount, pointsToRedeem);\n            var success = account.RedeemPoints(pointsToRedeem, transaction);\n            if (success)\n            {\n                _repository.UpdateAccount(account);\n            }\n            return success;\n        }\n\n        public CustomerLoyaltyAccount GetAccountDetails(Guid customerId)\n        {\n            return GetOrCreateAccount(customerId);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6ec2f296-a988-4254-892b-8c59bc1e5ffa",
        "Name": "Controllers",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ccdf687b-ad13-40a3-a2e0-4c59cefe19e6",
        "Name": "LoyaltyController.cs",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing LoyaltyRewardsManager.Services;\nusing LoyaltyRewardsManager.Core;\n\nnamespace LoyaltyRewardsManager.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class LoyaltyController : ControllerBase\n    {\n        private readonly LoyaltyService _loyaltyService;\n\n        public LoyaltyController(LoyaltyService loyaltyService)\n        {\n            _loyaltyService = loyaltyService;\n        }\n\n        [HttpPost(\"earn\")]\n        public IActionResult EarnPoints([FromQuery] Guid customerId, [FromQuery] decimal transactionAmount)\n        {\n            if (transactionAmount <= 0)\n                return BadRequest(\"Transaction amount must be greater than zero.\");\n\n            var pointsEarned = _loyaltyService.EarnPoints(customerId, transactionAmount);\n            return Ok(new { CustomerId = customerId, PointsEarned = pointsEarned });\n        }\n\n        [HttpPost(\"redeem\")]\n        public IActionResult RedeemPoints([FromQuery] Guid customerId, [FromQuery] decimal points)\n        {\n            if (points <= 0)\n                return BadRequest(\"Points to redeem must be greater than zero.\");\n\n            var success = _loyaltyService.RedeemPoints(customerId, points);\n            if (!success)\n                return BadRequest(\"Insufficient points for redemption.\");\n\n            return Ok(new { CustomerId = customerId, RedeemedPoints = points });\n        }\n\n        [HttpGet(\"account\")]\n        public IActionResult GetAccount([FromQuery] Guid customerId)\n        {\n            var account = _loyaltyService.GetAccountDetails(customerId);\n            return Ok(account);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "832c9f31-9a5c-4113-b755-124377dd853f",
        "Name": "Program.cs",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing LoyaltyRewardsManager.Core;\nusing LoyaltyRewardsManager.Data;\nusing LoyaltyRewardsManager.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ILoyaltyRepository, LoyaltyRepository>();\n\n// Configure a reward program. In a production scenario, these values could be loaded from configuration.\nvar rewardProgram = new RewardProgram(\n    id: Guid.NewGuid(),\n    name: \"Standard Loyalty Program\",\n    earningRate: 1,          // 1 point per currency unit spent\n    redemptionRate: 0.01M,   // 1 point redeems for 0.01 currency unit\n    expirationDays: 365\n);\n\nbuilder.Services.AddSingleton(rewardProgram);\nbuilder.Services.AddScoped<LoyaltyService>();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "1383df9a-5f98-4e41-9716-75a1574c815e",
        "Name": "appsettings.json",
        "ParentId": "a95eb084-6c0a-4480-a841-a9e57161148a",
        "Type": 1,
        "Text": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "09d292e2-b84b-4e02-905f-d0b30350d97a",
    "Name": "Mobile Banking Toolkit",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "12571f98-57b2-48a0-8be3-f961b440fa43",
        "Name": "Program.cs",
        "ParentId": "09d292e2-b84b-4e02-905f-d0b30350d97a",
        "Type": 1,
        "Text": "using System;\nusing MobileBankingToolkit.Configuration;\nusing MobileBankingToolkit.Authentication;\nusing MobileBankingToolkit.Payment;\n\nnamespace MobileBankingToolkit\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Load application configuration\n            var configManager = ConfigurationManager.Load();\n            Console.WriteLine(\"Configuration Loaded: ConnectionString - \" + configManager.GetSetting(\"ConnectionString\"));\n\n            // Initialize services\n            var authService = new AuthService();\n            var paymentGateway = new PaymentGateway();\n\n            // Simulated login process\n            bool loggedIn = authService.Login(\"user@example.com\", \"SecureP@ssw0rd\");\n            if (loggedIn)\n            {\n                Console.WriteLine(\"User authenticated successfully.\");\n            }\n\n            // Process a payment\n            bool paymentResult = paymentGateway.ProcessPayment(100.00m, \"AccountA\", \"AccountB\");\n            if (paymentResult)\n            {\n                Console.WriteLine(\"Payment processed successfully.\");\n            }\n\n            Console.WriteLine(\"Mobile Banking Toolkit is running.\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "27dee4ee-4df9-4792-b737-a4d2106e6c05",
        "Name": "appsettings.json",
        "ParentId": "09d292e2-b84b-4e02-905f-d0b30350d97a",
        "Type": 1,
        "Text": "{\n  \"ConnectionString\": \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\",\n  \"ApiKey\": \"YourApiKeyValueHere\"\n}",
        "Language": 0
      },
      {
        "Id": "696dcac9-f069-4b4b-b063-9b21137bc239",
        "Name": "Authentication",
        "ParentId": "09d292e2-b84b-4e02-905f-d0b30350d97a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7b03f6ba-81e8-421d-a903-7cfa852a8420",
        "Name": "Payment",
        "ParentId": "09d292e2-b84b-4e02-905f-d0b30350d97a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d6dcdbfa-bde5-4447-ae66-94f90a5e7ddd",
        "Name": "Transaction",
        "ParentId": "09d292e2-b84b-4e02-905f-d0b30350d97a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4c34bd31-d143-4469-b599-c779786e0208",
        "Name": "Notification",
        "ParentId": "09d292e2-b84b-4e02-905f-d0b30350d97a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7cb4b255-6e70-4a9f-a992-4aafd3f22cce",
        "Name": "Encryption",
        "ParentId": "09d292e2-b84b-4e02-905f-d0b30350d97a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5b285d86-a96a-40b9-a091-2806e0e4a043",
        "Name": "Configuration",
        "ParentId": "09d292e2-b84b-4e02-905f-d0b30350d97a",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
    "Name": "OnlineBankingPortal",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "d34299d4-bf5a-457a-8d23-da6a4086e7b5",
        "Name": "Program.cs",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace OnlineBankingPortal\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "1a60364c-b18d-4fc6-8992-696e43fccb48",
        "Name": "Startup.cs",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing OnlineBankingPortal.Data;\nusing Microsoft.EntityFrameworkCore;\nusing OnlineBankingPortal.Services;\nusing OnlineBankingPortal.Middleware;\n\nnamespace OnlineBankingPortal\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<BankingContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"))\n            );\n            \n            // Register application services\n            services.AddScoped<IAuthenticationService, AuthenticationService>();\n            services.AddScoped<IRegistrationService, RegistrationService>();\n            services.AddScoped<ITransactionService, TransactionService>();\n            services.AddScoped<IPaymentService, PaymentService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseHsts();\n            }\n\n            app.UseMiddleware<ExceptionMiddleware>();\n            app.UseHttpsRedirection();\n            app.UseRouting();\n            app.UseAuthentication();\n            app.UseAuthorization();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "3e9ef789-0383-4b3d-b987-73c723b1c10b",
        "Name": "Controllers",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a34ef353-cbc5-4f38-88ce-b29d2b60118a",
        "Name": "Models",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d2ff7b8c-81a4-4045-b784-61d3e291ce78",
        "Name": "Services",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "53b2b636-e6a7-48db-9dbf-1b9c8ed89406",
        "Name": "Data",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5d4cf1d6-f4bf-40d0-ad86-6031bd60da1e",
        "Name": "Middleware",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5c478d3b-85d8-4f5c-bf00-969a65cb04f8",
        "Name": "Utilities",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6d7e7de3-cd55-46e5-a8a3-e5a183479c65",
        "Name": "Configuration",
        "ParentId": "5806b950-0442-47cf-9bbe-ca9ab50d7718",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "422dfb94-df9c-4726-8ee0-0b838e28562f",
    "Name": "TransactionMonitoringService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9eedbcf1-8a0f-45fb-a3b2-a1fcf32c5f82",
        "Name": "Program.cs",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing TransactionMonitoringService.Services;\n\nnamespace TransactionMonitoringService\n{\n    class Program\n    {\n        public static void Main(string[] args)\n        {\n            var host = CreateHostBuilder(args).Build();\n            var monitor = host.Services.GetRequiredService<ITransactionMonitor>();\n            var lifetime = host.Services.GetRequiredService<IHostApplicationLifetime>();\n            lifetime.ApplicationStarted.Register(() =>\n            {\n                monitor.StartMonitoring();\n            });\n            host.Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureServices((hostContext, services) =>\n                {\n                    services.AddSingleton<ITransactionMonitor, TransactionMonitor>();\n                    services.AddSingleton<ITransactionValidator, TransactionValidator>();\n                    services.AddLogging(configure =>\n                    {\n                        configure.AddConsole();\n                        configure.SetMinimumLevel(LogLevel.Information);\n                    });\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "312e40b1-5963-4e5d-8d2f-63f71e5e562d",
        "Name": "Models",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e785e9b5-4f59-47e5-9aae-75ef238bf44e",
        "Name": "Transaction.cs",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 1,
        "Text": "using System;\n\nnamespace TransactionMonitoringService.Models\n{\n    public class Transaction\n    {\n        public Guid Id { get; set; }\n        public decimal Amount { get; set; }\n        public string SourceAccount { get; set; }\n        public string DestinationAccount { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ceac6ae7-b9c2-47d6-b39e-3268608e1d62",
        "Name": "Alert.cs",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 1,
        "Text": "using System;\n\nnamespace TransactionMonitoringService.Models\n{\n    public enum AlertType\n    {\n        SuspiciousActivity,\n        LargeTransaction,\n        FrequentTransactions\n    }\n\n    public class Alert\n    {\n        public Guid AlertId { get; set; }\n        public Guid TransactionId { get; set; }\n        public AlertType Type { get; set; }\n        public string Message { get; set; }\n        public DateTime DetectedAt { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "643aaa32-9d7e-4b4f-b67e-e7451895c22a",
        "Name": "Services",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4e8f8b4a-cd82-4126-add8-dfef26122790",
        "Name": "ITransactionMonitor.cs",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 1,
        "Text": "namespace TransactionMonitoringService.Services\n{\n    public interface ITransactionMonitor\n    {\n        void StartMonitoring();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "65186bc4-db5d-40b8-9735-045eed0f9a21",
        "Name": "TransactionMonitor.cs",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 1,
        "Text": "using System;\nusing System.Threading;\nusing Microsoft.Extensions.Logging;\nusing TransactionMonitoringService.Models;\n\nnamespace TransactionMonitoringService.Services\n{\n    public class TransactionMonitor : ITransactionMonitor\n    {\n        private readonly ITransactionValidator _validator;\n        private readonly ILogger<TransactionMonitor> _logger;\n        private readonly Timer _timer;\n        private readonly Random _random;\n\n        public TransactionMonitor(ITransactionValidator validator, ILogger<TransactionMonitor> logger)\n        {\n            _validator = validator;\n            _logger = logger;\n            _random = new Random();\n            _timer = new Timer(MonitorTransactions, null, Timeout.Infinite, Timeout.Infinite);\n        }\n\n        public void StartMonitoring()\n        {\n            _logger.LogInformation(\"Starting Transaction Monitoring Service\");\n            _timer.Change(0, 5000); // Monitor every 5 seconds\n        }\n\n        private void MonitorTransactions(object state)\n        {\n            try\n            {\n                Transaction transaction = ReceiveTransaction();\n                _logger.LogInformation($\"Received transaction {transaction.Id}\");\n                var alert = _validator.Validate(transaction);\n                if (alert != null)\n                {\n                    _logger.LogWarning($\"Alert triggered for transaction {transaction.Id}: {alert.Message}\");\n                    // In production, forward this alert to an alerting system or monitoring dashboard\n                }\n                else\n                {\n                    _logger.LogInformation($\"Transaction {transaction.Id} processed normally.\");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error occurred during transaction monitoring.\");\n            }\n        }\n\n        private Transaction ReceiveTransaction()\n        {\n            // In production, integrate with a secure message queue or API endpoint for live transactions\n            return new Transaction\n            {\n                Id = Guid.NewGuid(),\n                Amount = Convert.ToDecimal(_random.NextDouble() * 10000),\n                SourceAccount = \"ACC\" + _random.Next(1000, 9999),\n                DestinationAccount = \"ACC\" + _random.Next(1000, 9999),\n                Timestamp = DateTime.UtcNow\n            };\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "fed46747-37d9-42f0-af1c-6cc39df8224e",
        "Name": "ITransactionValidator.cs",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 1,
        "Text": "using TransactionMonitoringService.Models;\n\nnamespace TransactionMonitoringService.Services\n{\n    public interface ITransactionValidator\n    {\n        Alert Validate(Transaction transaction);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "92b8bf16-2bdd-4c71-88bf-1bd685af1bc0",
        "Name": "TransactionValidator.cs",
        "ParentId": "422dfb94-df9c-4726-8ee0-0b838e28562f",
        "Type": 1,
        "Text": "using System;\nusing TransactionMonitoringService.Models;\n\nnamespace TransactionMonitoringService.Services\n{\n    public class TransactionValidator : ITransactionValidator\n    {\n        private const decimal HighValueThreshold = 5000m;\n\n        public Alert Validate(Transaction transaction)\n        {\n            // Rule: Transactions with an amount exceeding the threshold are flagged as large transactions\n            if (transaction.Amount > HighValueThreshold)\n            {\n                return new Alert\n                {\n                    AlertId = Guid.NewGuid(),\n                    TransactionId = transaction.Id,\n                    Type = AlertType.LargeTransaction,\n                    Message = $\"Transaction amount {transaction.Amount} exceeds the threshold of {HighValueThreshold}.\",\n                    DetectedAt = DateTime.UtcNow\n                };\n            }\n            // Additional business rules could be implemented here for fraud detection\n            return null;\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "3380fc44-239a-40ab-925c-448b472a50a5",
    "Name": "BatchProcessingEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "fb0dd829-5285-42c9-a020-8d7856ce54d7",
        "Name": "Models",
        "ParentId": "3380fc44-239a-40ab-925c-448b472a50a5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fbb0fde4-da4d-4219-879a-629347f4dcc1",
        "Name": "Services",
        "ParentId": "3380fc44-239a-40ab-925c-448b472a50a5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7d75c8f6-0a63-4b64-82c5-868938a4c319",
        "Name": "Interfaces",
        "ParentId": "3380fc44-239a-40ab-925c-448b472a50a5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1830fddc-b164-4438-a48b-10e9bbe8ac00",
        "Name": "Config",
        "ParentId": "3380fc44-239a-40ab-925c-448b472a50a5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b8d04472-92f1-4181-88b3-d28a42f20064",
        "Name": "Utils",
        "ParentId": "3380fc44-239a-40ab-925c-448b472a50a5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ef2f3bee-7310-4d66-bd05-be6c44e9ba6f",
        "Name": "Data",
        "ParentId": "3380fc44-239a-40ab-925c-448b472a50a5",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8b7413a2-54ff-42a1-90d0-4f9dc1f633a1",
        "Name": "Program.cs",
        "ParentId": "3380fc44-239a-40ab-925c-448b472a50a5",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing BatchProcessingEngine.Interfaces;\nusing BatchProcessingEngine.Services;\nusing BatchProcessingEngine.Data;\n\nnamespace BatchProcessingEngine\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            using IHost host = CreateHostBuilder(args).Build();\n            var batchProcessor = host.Services.GetRequiredService<IBatchProcessor>();\n            batchProcessor.ProcessBatches();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureServices((hostContext, services) =>\n                {\n                    services.AddSingleton<IBatchProcessor, BatchProcessor>();\n                    services.AddSingleton<ITransactionService, TransactionService>();\n                    services.AddSingleton<TransactionRepository>();\n                });\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "32d115ed-cac1-4cf6-b8b6-a9be0396210d",
    "Name": "RealTimeAlertSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "e6c18e7f-626f-452c-a49a-021fa2c37057",
        "Name": "Core",
        "ParentId": "32d115ed-cac1-4cf6-b8b6-a9be0396210d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "cab9d196-1d82-4661-b76f-b56621efce1b",
        "Name": "Notifications",
        "ParentId": "32d115ed-cac1-4cf6-b8b6-a9be0396210d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "37e58eb6-416e-4a15-99dd-a48224c8b619",
        "Name": "Infrastructure",
        "ParentId": "32d115ed-cac1-4cf6-b8b6-a9be0396210d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e1da2217-afaf-458d-9a7e-cc7eb4f68c4e",
        "Name": "Program.cs",
        "ParentId": "32d115ed-cac1-4cf6-b8b6-a9be0396210d",
        "Type": 1,
        "Text": "using RealTimeAlertSystem.Core;\nusing RealTimeAlertSystem.Infrastructure;\nusing RealTimeAlertSystem.Notifications;\n\nnamespace RealTimeAlertSystem\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Initialize infrastructure components\n            Logger logger = new Logger();\n            ConfigurationManager configManager = new ConfigurationManager();\n            NotificationManager notificationManager = new NotificationManager();\n\n            // Initialize the alert service with its dependencies\n            IAlertService alertService = new AlertService(notificationManager, logger, configManager);\n\n            // Create an event processor to handle incoming system events\n            AlertEventProcessor processor = new AlertEventProcessor(alertService);\n            processor.ProcessEvent(\"ERR001\", \"Critical system error encountered.\", \"Critical\");\n\n            // Entry point confirmation\n            System.Console.WriteLine(\"Real-Time Alert System running.\");\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
    "Name": "ComplianceAuditTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "3eb39d6a-4f4f-4372-b790-e543b227dd92",
        "Name": "appsettings.json",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"AuditDatabase\": \"Server=your_server;Database=AuditDB;User Id=your_user;Password=your_password;\"\n  }\n}",
        "Language": 0
      },
      {
        "Id": "78126ab6-14bb-49db-a617-1baf6846b0c1",
        "Name": "App",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f5b7486f-3075-4219-a99d-20a70707d662",
        "Name": "Program.cs",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing ComplianceAuditTool.Services;\nusing ComplianceAuditTool.Infrastructure;\n\nnamespace ComplianceAuditTool.App\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Build configuration\n            var configuration = new ConfigurationBuilder()\n                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n                .Build();\n\n            var serviceCollection = new ServiceCollection();\n            ConfigureServices(serviceCollection, configuration);\n            var serviceProvider = serviceCollection.BuildServiceProvider();\n\n            var auditService = serviceProvider.GetService<IAuditService>();\n            auditService.ExecuteAudit();\n            Console.WriteLine(\"Audit completed successfully.\");\n        }\n\n        private static void ConfigureServices(IServiceCollection services, IConfiguration configuration)\n        {\n            services.AddSingleton(configuration);\n\n            // Register the AuditRepository with connection string from configuration\n            services.AddSingleton<IAuditRepository>(provider =>\n            {\n                var config = provider.GetRequiredService<IConfiguration>();\n                var connectionString = config.GetConnectionString(\"AuditDatabase\");\n                return new AuditRepository(connectionString);\n            });\n\n            services.AddSingleton<IAuditService, AuditService>();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "14c4cc8d-29f9-44a7-98e8-48d74de5b93e",
        "Name": "Domain",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "69aaf6fe-8678-414d-9774-598da4e90d69",
        "Name": "Audit.cs",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 1,
        "Text": "using System;\n\nnamespace ComplianceAuditTool.Domain\n{\n    public class Audit\n    {\n        public Guid Id { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Action { get; set; }\n        public string Details { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5fe64857-f777-45d0-9742-ac7578dc22b0",
        "Name": "AuditEvent.cs",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 1,
        "Text": "using System;\n\nnamespace ComplianceAuditTool.Domain\n{\n    public class AuditEvent\n    {\n        public string EventType { get; set; }\n        public DateTime OccurredOn { get; set; }\n        public string Description { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e2a2b1f6-55d4-4db7-8b2c-d3f6abdf5692",
        "Name": "Infrastructure",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "08fc29dc-b39f-40a7-adec-38edb91062d8",
        "Name": "IAuditRepository.cs",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 1,
        "Text": "using ComplianceAuditTool.Domain;\n\nnamespace ComplianceAuditTool.Infrastructure\n{\n    public interface IAuditRepository\n    {\n        void SaveAudit(Audit audit);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a0a0b001-861a-4326-8a88-bf1a311ff915",
        "Name": "AuditRepository.cs",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 1,
        "Text": "using System;\nusing System.Data.SqlClient;\nusing ComplianceAuditTool.Domain;\n\nnamespace ComplianceAuditTool.Infrastructure\n{\n    public class AuditRepository : IAuditRepository\n    {\n        private readonly string _connectionString;\n\n        public AuditRepository(string connectionString)\n        {\n            _connectionString = connectionString;\n        }\n\n        public void SaveAudit(Audit audit)\n        {\n            using (var connection = new SqlConnection(_connectionString))\n            {\n                connection.Open();\n                using (var command = connection.CreateCommand())\n                {\n                    command.CommandText = \"INSERT INTO Audits (Id, Timestamp, Action, Details) VALUES (@Id, @Timestamp, @Action, @Details)\";\n                    command.Parameters.AddWithValue(\"@Id\", audit.Id);\n                    command.Parameters.AddWithValue(\"@Timestamp\", audit.Timestamp);\n                    command.Parameters.AddWithValue(\"@Action\", audit.Action);\n                    command.Parameters.AddWithValue(\"@Details\", audit.Details);\n                    command.ExecuteNonQuery();\n                }\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8f71c621-ecd8-46b2-a57a-c07b7ec5dde5",
        "Name": "Services",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a6674113-0faa-4981-91fc-8193d406c189",
        "Name": "AuditService.cs",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 1,
        "Text": "using System;\nusing ComplianceAuditTool.Domain;\nusing ComplianceAuditTool.Infrastructure;\nusing ComplianceAuditTool.Utilities;\n\nnamespace ComplianceAuditTool.Services\n{\n    public interface IAuditService\n    {\n        void ExecuteAudit();\n    }\n\n    public class AuditService : IAuditService\n    {\n        private readonly IAuditRepository _repository;\n\n        public AuditService(IAuditRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public void ExecuteAudit()\n        {\n            // Create an audit event based on a regulatory compliance check\n            var auditEvent = new AuditEvent\n            {\n                EventType = \"REGULATORY_CHECK\",\n                OccurredOn = DateTime.UtcNow,\n                Description = \"Automated compliance audit triggered.\"\n            };\n\n            // Validate the audit event data\n            AuditValidator.Validate(auditEvent);\n\n            // Map audit event to audit entity\n            var audit = new Audit\n            {\n                Id = Guid.NewGuid(),\n                Timestamp = DateTime.UtcNow,\n                Action = auditEvent.EventType,\n                Details = auditEvent.Description\n            };\n\n            // Persist the audit record\n            _repository.SaveAudit(audit);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "18b45ee7-12a7-4393-88d8-8e2a40a76793",
        "Name": "Utilities",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d8774183-88f7-41bb-bf1e-3b46bc131c84",
        "Name": "AuditValidator.cs",
        "ParentId": "e43184f8-7c6d-4ac5-b396-cea237ae3953",
        "Type": 1,
        "Text": "using System;\nusing ComplianceAuditTool.Domain;\n\nnamespace ComplianceAuditTool.Utilities\n{\n    public static class AuditValidator\n    {\n        public static void Validate(AuditEvent auditEvent)\n        {\n            if (string.IsNullOrWhiteSpace(auditEvent.EventType))\n                throw new ArgumentException(\"Event type is required.\");\n            \n            if (auditEvent.OccurredOn == default(DateTime))\n                throw new ArgumentException(\"OccurredOn must be a valid date and time.\");\n            \n            if (string.IsNullOrWhiteSpace(auditEvent.Description))\n                throw new ArgumentException(\"Description is required.\");\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
    "Name": "DataEncryptionService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "396ef700-c13e-489f-88aa-c9ed13dd89b8",
        "Name": "Core",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "da2c0099-1175-4db7-9dfb-3411d47bcde6",
        "Name": "Interfaces",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b64929a9-4c87-4330-a41c-abf9f0478ef6",
        "Name": "Config",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "733ee55b-f4a5-424b-9062-483b4130029b",
        "Name": "Models",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7340f05d-33b3-41d8-a7a8-45eb7c74117e",
        "Name": "Utilities",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0457dc33-f46e-4285-bdaf-785576bb7f63",
        "Name": "Extensions",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0979dd15-f970-42c4-a83d-56913f2af4d7",
        "Name": "Services",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4f3d5b9d-a02c-4d13-9741-021349ef5877",
        "Name": "IEncryptionService.cs",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 1,
        "Text": "using System;\n\nnamespace DataEncryptionService.Interfaces\n{\n    public interface IEncryptionService\n    {\n        string Encrypt(string plainText);\n        string Decrypt(string cipherText);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "991b0250-ff66-4817-93ed-e9469f64440d",
        "Name": "EncryptionService.cs",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing DataEncryptionService.Config;\nusing DataEncryptionService.Interfaces;\n\nnamespace DataEncryptionService.Core\n{\n    public class EncryptionService : IEncryptionService\n    {\n        private readonly byte[] key;\n        private readonly byte[] iv;\n\n        public EncryptionService(EncryptionSettings settings)\n        {\n            if (settings == null || string.IsNullOrWhiteSpace(settings.Key) || string.IsNullOrWhiteSpace(settings.IV))\n                throw new ArgumentException(\"Encryption settings are not properly configured.\");\n            key = Convert.FromBase64String(settings.Key);\n            iv = Convert.FromBase64String(settings.IV);\n        }\n\n        public string Encrypt(string plainText)\n        {\n            if (plainText == null)\n                throw new ArgumentNullException(nameof(plainText));\n\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = key;\n                aesAlg.IV = iv;\n                aesAlg.Mode = CipherMode.CBC;\n                aesAlg.Padding = PaddingMode.PKCS7;\n\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n                using (var msEncrypt = new MemoryStream())\n                {\n                    using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    using (var swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    byte[] encrypted = msEncrypt.ToArray();\n                    return Convert.ToBase64String(encrypted);\n                }\n            }\n        }\n\n        public string Decrypt(string cipherText)\n        {\n            if (cipherText == null)\n                throw new ArgumentNullException(nameof(cipherText));\n\n            byte[] cipherBytes = Convert.FromBase64String(cipherText);\n\n            using (Aes aesAlg = Aes.Create())\n            {\n                aesAlg.Key = key;\n                aesAlg.IV = iv;\n                aesAlg.Mode = CipherMode.CBC;\n                aesAlg.Padding = PaddingMode.PKCS7;\n\n                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n                using (var msDecrypt = new MemoryStream(cipherBytes))\n                using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                using (var srDecrypt = new StreamReader(csDecrypt))\n                {\n                    return srDecrypt.ReadToEnd();\n                }\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ab9c8a0b-e39e-47ce-869b-bca1256c25dd",
        "Name": "EncryptionSettings.cs",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 1,
        "Text": "namespace DataEncryptionService.Config\n{\n    public class EncryptionSettings\n    {\n        // Base64 encoded encryption key\n        public string Key { get; set; }\n        // Base64 encoded initialization vector\n        public string IV { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "68d920ad-e6b7-4c4c-bc7a-f6e98738a554",
        "Name": "EncryptedData.cs",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 1,
        "Text": "using System;\n\nnamespace DataEncryptionService.Models\n{\n    public class EncryptedData\n    {\n        public string CipherText { get; set; }\n        public DateTime EncryptedAt { get; set; }\n        public string DataHash { get; set; }\n\n        public EncryptedData(string cipherText, DateTime encryptedAt, string dataHash)\n        {\n            CipherText = cipherText;\n            EncryptedAt = encryptedAt;\n            DataHash = dataHash;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0f82efb6-1bcb-4c32-9bd3-660e27c8e64f",
        "Name": "EncryptionHelper.cs",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 1,
        "Text": "using System;\nusing System.Security.Cryptography;\n\nnamespace DataEncryptionService.Utilities\n{\n    public static class EncryptionHelper\n    {\n        public static (string Key, string IV) GenerateAesKeyAndIV()\n        {\n            using (Aes aes = Aes.Create())\n            {\n                aes.KeySize = 256;\n                aes.GenerateKey();\n                aes.GenerateIV();\n                return (Convert.ToBase64String(aes.Key), Convert.ToBase64String(aes.IV));\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b3e39cfc-3238-43c5-add7-8f4c5279ee26",
        "Name": "EncryptionExtensions.cs",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 1,
        "Text": "using DataEncryptionService.Core;\n\nnamespace DataEncryptionService.Extensions\n{\n    public static class EncryptionExtensions\n    {\n        public static string EncryptData(this string plainText, EncryptionService encryptionService)\n        {\n            return encryptionService.Encrypt(plainText);\n        }\n\n        public static string DecryptData(this string cipherText, EncryptionService encryptionService)\n        {\n            return encryptionService.Decrypt(cipherText);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e254b626-8062-4b78-b94d-9f5cafe71a4f",
        "Name": "KeyManagementService.cs",
        "ParentId": "20e02c20-4ccc-408e-974b-40b2e89ed1e4",
        "Type": 1,
        "Text": "using DataEncryptionService.Config;\nusing DataEncryptionService.Utilities;\n\nnamespace DataEncryptionService.Services\n{\n    public class KeyManagementService\n    {\n        private readonly EncryptionSettings _settings;\n\n        public KeyManagementService(EncryptionSettings settings)\n        {\n            _settings = settings;\n        }\n\n        // Rotates the current encryption keys by generating new ones\n        public void RotateKeys()\n        {\n            var newKeys = EncryptionHelper.GenerateAesKeyAndIV();\n            _settings.Key = newKeys.Key;\n            _settings.IV = newKeys.IV;\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
    "Name": "SecureFileTransferSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "b56e3e15-78ef-4d1d-a6a5-88aee7cf97db",
        "Name": "SecureFileTransferSystem.csproj",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\n  </ItemGroup>\n</Project>\n",
        "Language": 0
      },
      {
        "Id": "bb6c2520-452a-4db9-aca4-79ca17420068",
        "Name": "Program.cs",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SecureFileTransferSystem\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5d1f4dfd-0942-47bd-b266-5f08eb47181d",
        "Name": "Startup.cs",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SecureFileTransferSystem.Services;\nusing SecureFileTransferSystem.Security;\n\nnamespace SecureFileTransferSystem\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IEncryptionService, EncryptionService>();\n            services.AddSingleton<IFileTransferService, FileTransferService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bcee929d-e78f-4fb9-bf03-6b3e96b0a90c",
        "Name": "appsettings.json",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"Encryption\": {\n    \"Algorithm\": \"AES\",\n    \"Key\": \"0123456789ABCDEF\",\n    \"IV\": \"ABCDEF0123456789\"\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "99332206-165d-44f5-9216-85495af2d8bb",
        "Name": "README.md",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "# Secure File Transfer System\n\nFacilitates encrypted file transfers between services in a secure and reliable manner.\n",
        "Language": 0
      },
      {
        "Id": "3bedc82a-22d9-4461-8497-6e01eb3e51f0",
        "Name": "Controllers",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "dc557cf9-a155-40b0-a08a-171364e433bb",
        "Name": "Models",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "bf347fb0-0eb9-41fe-8a45-84aec85029dd",
        "Name": "Services",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "85cbc431-2ee0-4a6e-9ac9-03332d22aec0",
        "Name": "Security",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "55f70d45-f38c-415b-becb-a16806b370ba",
        "Name": "Controllers/FileTransferController.cs",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing SecureFileTransferSystem.Models;\nusing SecureFileTransferSystem.Services;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace SecureFileTransferSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class FileTransferController : ControllerBase\n    {\n        private readonly IFileTransferService _service;\n\n        public FileTransferController(IFileTransferService service)\n        {\n            _service = service;\n        }\n\n        [HttpPost(\"transfer\")]\n        public async Task<IActionResult> Transfer([FromBody] FileTransferRequest request)\n        {\n            if (request == null || !ModelState.IsValid)\n            {\n                return BadRequest(\"Invalid request.\");\n            }\n\n            try\n            {\n                bool result = await _service.TransferFileAsync(request);\n                if(result)\n                    return Ok(\"File transfer initiated successfully.\");\n                else\n                    return StatusCode(500, \"Failed to initiate file transfer.\");\n            }\n            catch(Exception ex)\n            {\n                return StatusCode(500, ex.Message);\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d4011fc8-d65c-4c6e-b4ec-ae571051bccf",
        "Name": "Models/FileTransferRequest.cs",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "using System.ComponentModel.DataAnnotations;\n\nnamespace SecureFileTransferSystem.Models\n{\n    public class FileTransferRequest\n    {\n        [Required]\n        public string SourcePath { get; set; }\n\n        [Required]\n        public string DestinationPath { get; set; }\n\n        [Required]\n        public string FileName { get; set; }\n\n        public string EncryptionAlgorithm { get; set; } = \"AES\";\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "18f11fee-a63c-4837-921b-8d2d5661ffe9",
        "Name": "Services/IFileTransferService.cs",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "using SecureFileTransferSystem.Models;\nusing System.Threading.Tasks;\n\nnamespace SecureFileTransferSystem.Services\n{\n    public interface IFileTransferService\n    {\n        Task<bool> TransferFileAsync(FileTransferRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "06ebb98c-378a-449e-b13d-478f8ab31fc9",
        "Name": "Services/FileTransferService.cs",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "using SecureFileTransferSystem.Models;\nusing SecureFileTransferSystem.Security;\nusing System;\nusing System.IO;\nusing System.Threading.Tasks;\n\nnamespace SecureFileTransferSystem.Services\n{\n    public class FileTransferService : IFileTransferService\n    {\n        private readonly IEncryptionService _encryptionService;\n\n        public FileTransferService(IEncryptionService encryptionService)\n        {\n            _encryptionService = encryptionService;\n        }\n\n        public async Task<bool> TransferFileAsync(FileTransferRequest request)\n        {\n            string fullSourcePath = Path.Combine(request.SourcePath, request.FileName);\n            if(!File.Exists(fullSourcePath))\n                throw new FileNotFoundException(\"Source file not found.\", fullSourcePath);\n\n            try\n            {\n                byte[] fileContent = await File.ReadAllBytesAsync(fullSourcePath);\n\n                byte[] encryptedData = _encryptionService.Encrypt(fileContent, request.EncryptionAlgorithm);\n\n                string fullDestinationPath = Path.Combine(request.DestinationPath, request.FileName);\n                await File.WriteAllBytesAsync(fullDestinationPath, encryptedData);\n\n                return true;\n            }\n            catch(Exception)\n            {\n                return false;\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ffca0bf8-2704-4166-aa0b-14de437f125a",
        "Name": "Security/IEncryptionService.cs",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "namespace SecureFileTransferSystem.Security\n{\n    public interface IEncryptionService\n    {\n        byte[] Encrypt(byte[] data, string algorithm);\n        byte[] Decrypt(byte[] data, string algorithm);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3e9c7e55-08f4-4ba1-be2d-243880981f18",
        "Name": "Security/EncryptionService.cs",
        "ParentId": "e6c77d11-4f30-4f3c-8690-05648f1a776e",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace SecureFileTransferSystem.Security\n{\n    public class EncryptionService : IEncryptionService\n    {\n        private readonly byte[] key;\n        private readonly byte[] iv;\n\n        public EncryptionService()\n        {\n            // In production, these should be securely retrieved from configuration or a key vault\n            key = Encoding.UTF8.GetBytes(\"0123456789ABCDEF\");\n            iv = Encoding.UTF8.GetBytes(\"ABCDEF0123456789\");\n        }\n\n        public byte[] Encrypt(byte[] data, string algorithm)\n        {\n            if(algorithm.ToUpper() == \"AES\")\n            {\n                using(Aes aesAlg = Aes.Create())\n                {\n                    aesAlg.Key = key;\n                    aesAlg.IV = iv;\n                    \n                    using(MemoryStream msEncrypt = new MemoryStream())\n                    {\n                        using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, aesAlg.CreateEncryptor(), CryptoStreamMode.Write))\n                        {\n                            csEncrypt.Write(data, 0, data.Length);\n                            csEncrypt.FlushFinalBlock();\n                            return msEncrypt.ToArray();\n                        }\n                    }\n                }\n            }\n            else\n            {\n                throw new NotSupportedException(\"Only AES is supported.\");\n            }\n        }\n\n        public byte[] Decrypt(byte[] data, string algorithm)\n        {\n            if(algorithm.ToUpper() == \"AES\")\n            {\n                using(Aes aesAlg = Aes.Create())\n                {\n                    aesAlg.Key = key;\n                    aesAlg.IV = iv;\n                    \n                    using(MemoryStream msDecrypt = new MemoryStream(data))\n                    using(CryptoStream csDecrypt = new CryptoStream(msDecrypt, aesAlg.CreateDecryptor(), CryptoStreamMode.Read))\n                    using(MemoryStream resultStream = new MemoryStream())\n                    {\n                        csDecrypt.CopyTo(resultStream);\n                        return resultStream.ToArray();\n                    }\n                }\n            }\n            else\n            {\n                throw new NotSupportedException(\"Only AES is supported.\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
    "Name": "BiometricAuthenticationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "786099fd-bbea-414d-9471-a5620f8e108d",
        "Name": "Program.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace BiometricAuthenticationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b713a1f4-a376-4a89-8f89-63b21119bf9d",
        "Name": "Startup.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing BiometricAuthenticationService.Services;\nusing BiometricAuthenticationService.Repositories;\n\nnamespace BiometricAuthenticationService\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddScoped<IBiometricAuthService, BiometricAuthService>();\n            services.AddScoped<IBiometricRepository, BiometricRepository>();\n            services.AddLogging();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            app.UseRouting();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "2c86164b-d03a-4a5f-836b-f3245e0fce5d",
        "Name": "Controllers",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "408381b5-6e6b-4212-a358-aa5004e31b29",
        "Name": "BiometricAuthController.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing BiometricAuthenticationService.Models;\nusing BiometricAuthenticationService.Services;\n\nnamespace BiometricAuthenticationService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BiometricAuthController : ControllerBase\n    {\n        private readonly IBiometricAuthService _biometricAuthService;\n\n        public BiometricAuthController(IBiometricAuthService biometricAuthService)\n        {\n            _biometricAuthService = biometricAuthService;\n        }\n\n        [HttpPost(\"authenticate\")]\n        public async Task<ActionResult<AuthResponse>> Authenticate([FromBody] BiometricData biometricData)\n        {\n            var response = await _biometricAuthService.AuthenticateAsync(biometricData);\n            if (response.IsAuthenticated)\n            {\n                return Ok(response);\n            }\n            return Unauthorized(response);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a8116207-0fe4-4fb0-8868-0f54b35c14f6",
        "Name": "Models",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "26386324-5e33-4381-9800-140da97e96fd",
        "Name": "BiometricData.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "namespace BiometricAuthenticationService.Models\n{\n    public class BiometricData\n    {\n        public string UserId { get; set; }\n        public byte[] BiometricTemplate { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "70c4f41a-e57c-48a9-ac33-972f7c6b6657",
        "Name": "AuthResponse.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "namespace BiometricAuthenticationService.Models\n{\n    public class AuthResponse\n    {\n        public bool IsAuthenticated { get; set; }\n        public string Token { get; set; }\n        public string Message { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "8390933a-698d-4f47-9449-74b05df3d1e4",
        "Name": "Services",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "eb55539f-c486-4c14-9430-3b679d73dbc1",
        "Name": "IBiometricAuthService.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing BiometricAuthenticationService.Models;\n\nnamespace BiometricAuthenticationService.Services\n{\n    public interface IBiometricAuthService\n    {\n        Task<AuthResponse> AuthenticateAsync(BiometricData data);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "832d77b3-2b24-40d4-99d8-85a31ed22d44",
        "Name": "BiometricAuthService.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing BiometricAuthenticationService.Models;\nusing BiometricAuthenticationService.Repositories;\nusing BiometricAuthenticationService.Utilities;\n\nnamespace BiometricAuthenticationService.Services\n{\n    public class BiometricAuthService : IBiometricAuthService\n    {\n        private readonly IBiometricRepository _repository;\n\n        public BiometricAuthService(IBiometricRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<AuthResponse> AuthenticateAsync(BiometricData data)\n        {\n            var storedTemplate = await _repository.GetStoredBiometricTemplateAsync(data.UserId);\n            if (storedTemplate == null)\n            {\n                return new AuthResponse\n                {\n                    IsAuthenticated = false,\n                    Token = null,\n                    Message = \"User not found.\"\n                };\n            }\n            \n            bool match = BiometricComparer.CompareTemplates(data.BiometricTemplate, storedTemplate);\n            if (match)\n            {\n                string token = TokenGenerator.GenerateToken(data.UserId);\n                return new AuthResponse\n                {\n                    IsAuthenticated = true,\n                    Token = token,\n                    Message = \"Authentication successful.\"\n                };\n            }\n            \n            return new AuthResponse\n            {\n                IsAuthenticated = false,\n                Token = null,\n                Message = \"Biometric authentication failed.\"\n            };\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c1da9eeb-ce66-4ef8-b3d0-edef3e9031e9",
        "Name": "Repositories",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "dee77143-ff88-4b83-acba-d4db95c3a782",
        "Name": "IBiometricRepository.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\n\nnamespace BiometricAuthenticationService.Repositories\n{\n    public interface IBiometricRepository\n    {\n        Task<byte[]> GetStoredBiometricTemplateAsync(string userId);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "91adc93d-46f8-4065-ae22-defebf607ec6",
        "Name": "BiometricRepository.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing System.Collections.Concurrent;\n\nnamespace BiometricAuthenticationService.Repositories\n{\n    public class BiometricRepository : IBiometricRepository\n    {\n        private static ConcurrentDictionary<string, byte[]> _userBiometrics = new ConcurrentDictionary<string, byte[]>();\n\n        static BiometricRepository()\n        {\n            _userBiometrics.TryAdd(\"user123\", new byte[] { 0x10, 0x20, 0x30, 0x40 });\n        }\n\n        public Task<byte[]> GetStoredBiometricTemplateAsync(string userId)\n        {\n            _userBiometrics.TryGetValue(userId, out var template);\n            return Task.FromResult(template);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e6444460-492c-4eb0-8090-f3ec628c0519",
        "Name": "Utilities",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c42e041b-f7e3-4f26-aa08-5242ab30bec7",
        "Name": "BiometricComparer.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "namespace BiometricAuthenticationService.Utilities\n{\n    public static class BiometricComparer\n    {\n        public static bool CompareTemplates(byte[] provided, byte[] stored)\n        {\n            if (provided == null || stored == null || provided.Length != stored.Length)\n                return false;\n\n            int diff = 0;\n            for (int i = 0; i < provided.Length; i++)\n            {\n                diff |= provided[i] ^ stored[i];\n            }\n            return diff == 0;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "42f7bd2d-2cbb-4185-b6b7-545893680385",
        "Name": "TokenGenerator.cs",
        "ParentId": "423b1640-313a-4f14-a4e8-8aceef5fef9f",
        "Type": 1,
        "Text": "using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing Microsoft.IdentityModel.Tokens;\nusing System.Text;\n\nnamespace BiometricAuthenticationService.Utilities\n{\n    public static class TokenGenerator\n    {\n        public static string GenerateToken(string userId)\n        {\n            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"Your-256-bit-Secret-For-JWT\"));\n            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);\n\n            var claims = new[]\n            {\n                new Claim(JwtRegisteredClaimNames.Sub, userId),\n                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())\n            };\n\n            var token = new JwtSecurityToken(\n                issuer: \"DigitalBank\",\n                audience: \"DigitalBankUsers\",\n                claims: claims,\n                expires: DateTime.Now.AddMinutes(30),\n                signingCredentials: credentials);\n\n            return new JwtSecurityTokenHandler().WriteToken(token);\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
    "Name": "IdentityVerificationSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "96dcccde-cdbe-4801-b1e2-94d29539632a",
        "Name": "Program.cs",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing IdentityVerificationSystem.Services;\nusing IdentityVerificationSystem.Infrastructure;\nusing IdentityVerificationSystem.Configuration;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddHttpClient();\nbuilder.Services.AddSingleton<IIdentityVerificationService, IdentityVerificationService>();\nbuilder.Services.AddSingleton<KycClient>();\nbuilder.Services.Configure<IdentityVerificationSettings>(builder.Configuration.GetSection(\"IdentityVerificationSettings\"));\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllers();\n});\n\napp.Run();\n",
        "Language": 0
      },
      {
        "Id": "9a1216e9-3ed0-4c1f-ad3b-742696271254",
        "Name": "Controllers",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "52f4f61e-9f4f-4d3c-8fc7-389f0bc6a113",
        "Name": "VerificationController.cs",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\nusing IdentityVerificationSystem.Services;\n\nnamespace IdentityVerificationSystem.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class VerificationController : ControllerBase\n    {\n        private readonly IIdentityVerificationService _verificationService;\n\n        public VerificationController(IIdentityVerificationService verificationService)\n        {\n            _verificationService = verificationService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> VerifyIdentity([FromBody] IdentityVerificationRequest request)\n        {\n            if (request == null)\n            {\n                return BadRequest(\"Request payload is null.\");\n            }\n            \n            var result = await _verificationService.VerifyAsync(request);\n            if (result.IsVerified)\n            {\n                return Ok(result);\n            }\n\n            return BadRequest(result);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "51eda005-712f-4004-b749-764a69ad7a00",
        "Name": "Models",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f8137236-901e-47d6-a538-ebb1d8b763b4",
        "Name": "IdentityVerificationRequest.cs",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 1,
        "Text": "using System;\n\nnamespace IdentityVerificationSystem.Models\n{\n    public class IdentityVerificationRequest\n    {\n        public string UserId { get; set; }\n        public string DocumentNumber { get; set; }\n        public DateTime DateOfBirth { get; set; }\n        public string DocumentType { get; set; } // e.g., Passport, DriverLicense\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ee413ce8-d0c8-4f8d-a337-98877a152287",
        "Name": "IdentityVerificationResponse.cs",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 1,
        "Text": "namespace IdentityVerificationSystem.Models\n{\n    public class IdentityVerificationResponse\n    {\n        public bool IsVerified { get; set; }\n        public string Message { get; set; }\n        public string ReferenceNumber { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0063905b-3ab2-438d-a438-bcd4406aa06f",
        "Name": "Services",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5fd4c1e5-5505-44e2-a4a0-5b1994dcb6d9",
        "Name": "IIdentityVerificationService.cs",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\n\nnamespace IdentityVerificationSystem.Services\n{\n    public interface IIdentityVerificationService\n    {\n        Task<IdentityVerificationResponse> VerifyAsync(IdentityVerificationRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "561c4159-d063-47cb-a282-45912a5bc4d1",
        "Name": "IdentityVerificationService.cs",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing IdentityVerificationSystem.Models;\nusing IdentityVerificationSystem.Infrastructure;\n\nnamespace IdentityVerificationSystem.Services\n{\n    public class IdentityVerificationService : IIdentityVerificationService\n    {\n        private readonly KycClient _kycClient;\n\n        public IdentityVerificationService(KycClient kycClient)\n        {\n            _kycClient = kycClient;\n        }\n\n        public async Task<IdentityVerificationResponse> VerifyAsync(IdentityVerificationRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.UserId) || string.IsNullOrWhiteSpace(request.DocumentNumber))\n            {\n                return new IdentityVerificationResponse\n                {\n                    IsVerified = false,\n                    Message = \"Missing required verification data.\",\n                    ReferenceNumber = Guid.NewGuid().ToString()\n                };\n            }\n\n            // Perform external KYC verification\n            bool kycResult = await _kycClient.VerifyDocumentAsync(request.DocumentNumber, request.DocumentType, request.DateOfBirth);\n\n            if (kycResult)\n            {\n                return new IdentityVerificationResponse\n                {\n                    IsVerified = true,\n                    Message = \"User identity verified successfully.\",\n                    ReferenceNumber = Guid.NewGuid().ToString()\n                };\n            }\n            else\n            {\n                return new IdentityVerificationResponse\n                {\n                    IsVerified = false,\n                    Message = \"Verification failed. Document details did not match.\",\n                    ReferenceNumber = Guid.NewGuid().ToString()\n                };\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1acf065a-e6b0-4d72-b9c2-3dc72803cd5b",
        "Name": "Infrastructure",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "684e8472-3546-4205-bac8-13de3f34a92e",
        "Name": "KycClient.cs",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Options;\nusing IdentityVerificationSystem.Configuration;\n\nnamespace IdentityVerificationSystem.Infrastructure\n{\n    public class KycClient\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IdentityVerificationSettings _settings;\n\n        public KycClient(IHttpClientFactory httpClientFactory, IOptions<IdentityVerificationSettings> settings)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _settings = settings.Value;\n        }\n\n        public async Task<bool> VerifyDocumentAsync(string documentNumber, string documentType, DateTime dateOfBirth)\n        {\n            var payload = new\n            {\n                DocumentNumber = documentNumber,\n                DocumentType = documentType,\n                DateOfBirth = dateOfBirth\n            };\n\n            var response = await _httpClient.PostAsJsonAsync(_settings.ExternalKycUrl, payload);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var result = await response.Content.ReadFromJsonAsync<KycResponse>();\n                return result != null && result.IsValid;\n            }\n\n            return false;\n        }\n    }\n\n    public class KycResponse\n    {\n        public bool IsValid { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "56649809-3885-4a83-92ac-818dbcd26dda",
        "Name": "Configuration",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8a9eefcd-0d19-4cba-8c6c-460f75d0d78a",
        "Name": "IdentityVerificationSettings.cs",
        "ParentId": "fcc1f188-ebd4-40c1-b121-eb2708bce076",
        "Type": 1,
        "Text": "namespace IdentityVerificationSystem.Configuration\n{\n    public class IdentityVerificationSettings\n    {\n        public string ExternalKycUrl { get; set; }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "b33660f5-e4f1-4810-9278-097df6702f7d",
    "Name": "ThirdPartyIntegrationHub",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9483e614-3cca-4000-81ed-7f1df79fe86f",
        "Name": "Adapters",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fadd4fd9-5a68-4257-a43a-ddbc935f8d1c",
        "Name": "IIntegrationAdapter.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\n\nnamespace ThirdPartyIntegrationHub.Adapters\n{\n    public interface IIntegrationAdapter\n    {\n        Task<Models.IntegrationResponse> ExecuteIntegrationAsync(Models.IntegrationRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0d9ec08a-cfa1-4a1e-9718-11c77dfe2c79",
        "Name": "BaseIntegrationAdapter.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing ThirdPartyIntegrationHub.Configurations;\nusing ThirdPartyIntegrationHub.Logging;\nusing ThirdPartyIntegrationHub.Models;\n\nnamespace ThirdPartyIntegrationHub.Adapters\n{\n    public abstract class BaseIntegrationAdapter : IIntegrationAdapter\n    {\n        protected readonly IntegrationConfig config;\n        protected readonly IntegrationLogger logger;\n\n        public BaseIntegrationAdapter(IntegrationConfig config, IntegrationLogger logger)\n        {\n            this.config = config;\n            this.logger = logger;\n        }\n\n        public abstract Task<IntegrationResponse> ExecuteIntegrationAsync(IntegrationRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5f15f45c-94c2-4784-9d73-1e471f2d38fc",
        "Name": "Implementations",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b0bfa0bc-cd6d-458a-a012-7fb5e2bd4c2f",
        "Name": "PaymentGatewayAdapter.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing ThirdPartyIntegrationHub.Adapters;\nusing ThirdPartyIntegrationHub.Models;\nusing ThirdPartyIntegrationHub.Configurations;\nusing ThirdPartyIntegrationHub.Logging;\nusing Newtonsoft.Json;\n\nnamespace ThirdPartyIntegrationHub.Adapters.Implementations\n{\n    public class PaymentGatewayAdapter : BaseIntegrationAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public PaymentGatewayAdapter(IntegrationConfig config, IntegrationLogger logger, HttpClient httpClient)\n            : base(config, logger)\n        {\n            _httpClient = httpClient;\n        }\n\n        public override async Task<IntegrationResponse> ExecuteIntegrationAsync(IntegrationRequest request)\n        {\n            try\n            {\n                var payload = JsonConvert.SerializeObject(request);\n                var content = new StringContent(payload, Encoding.UTF8, \"application/json\");\n                \n                var response = await _httpClient.PostAsync(config.PaymentGatewayEndpoint, content);\n                response.EnsureSuccessStatusCode();\n                var jsonResponse = await response.Content.ReadAsStringAsync();\n                var integrationResponse = JsonConvert.DeserializeObject<IntegrationResponse>(jsonResponse);\n                \n                logger.LogInformation(\"Payment integration executed successfully.\");\n                return integrationResponse;\n            }\n            catch (Exception ex)\n            {\n                logger.LogError(\"Payment integration failed.\", ex);\n                throw;\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d341d7aa-1a72-4795-8a93-4d4bf776aeb7",
        "Name": "NotificationAdapter.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing ThirdPartyIntegrationHub.Adapters;\nusing ThirdPartyIntegrationHub.Models;\nusing ThirdPartyIntegrationHub.Configurations;\nusing ThirdPartyIntegrationHub.Logging;\nusing Newtonsoft.Json;\n\nnamespace ThirdPartyIntegrationHub.Adapters.Implementations\n{\n    public class NotificationAdapter : BaseIntegrationAdapter\n    {\n        private readonly HttpClient _httpClient;\n\n        public NotificationAdapter(IntegrationConfig config, IntegrationLogger logger, HttpClient httpClient)\n            : base(config, logger)\n        {\n            _httpClient = httpClient;\n        }\n\n        public override async Task<IntegrationResponse> ExecuteIntegrationAsync(IntegrationRequest request)\n        {\n            try\n            {\n                var payload = JsonConvert.SerializeObject(request);\n                var content = new StringContent(payload, Encoding.UTF8, \"application/json\");\n                \n                var response = await _httpClient.PostAsync(config.NotificationEndpoint, content);\n                response.EnsureSuccessStatusCode();\n                var jsonResponse = await response.Content.ReadAsStringAsync();\n                var integrationResponse = JsonConvert.DeserializeObject<IntegrationResponse>(jsonResponse);\n\n                logger.LogInformation(\"Notification integration executed successfully.\");\n                return integrationResponse;\n            }\n            catch (Exception ex)\n            {\n                logger.LogError(\"Notification integration failed.\", ex);\n                throw;\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b2b3fb79-0afa-4c30-80c9-05768fff5e77",
        "Name": "Configurations",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3b371965-808c-4602-8ac3-e04ac6920c90",
        "Name": "IntegrationConfig.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "namespace ThirdPartyIntegrationHub.Configurations\n{\n    public class IntegrationConfig\n    {\n        public string PaymentGatewayEndpoint { get; set; }\n        public string NotificationEndpoint { get; set; }\n        public string ApiKey { get; set; }\n        // Additional configuration properties as needed\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "332e23d6-99ff-477d-aca9-a4eac405a539",
        "Name": "ConfigurationManager.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System.IO;\nusing Newtonsoft.Json;\n\nnamespace ThirdPartyIntegrationHub.Configurations\n{\n    public static class ConfigurationManager\n    {\n        public static IntegrationConfig Load(string configFilePath)\n        {\n            if (!File.Exists(configFilePath))\n            {\n                throw new FileNotFoundException(\"Configuration file not found.\", configFilePath);\n            }\n            var json = File.ReadAllText(configFilePath);\n            var config = JsonConvert.DeserializeObject<IntegrationConfig>(json);\n            if (config == null)\n            {\n                throw new System.Exception(\"Failed to deserialize configuration.\");\n            }\n            return config;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "545e48c4-e62d-4ab7-bd6b-de3c2f60fa0e",
        "Name": "Logging",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5b320453-e121-4a30-af50-cab309b27486",
        "Name": "IntegrationLogger.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\n\nnamespace ThirdPartyIntegrationHub.Logging\n{\n    public class IntegrationLogger\n    {\n        private readonly string logFilePath;\n\n        public IntegrationLogger(string logFilePath)\n        {\n            this.logFilePath = logFilePath;\n        }\n\n        public void LogInformation(string message)\n        {\n            WriteLog(\"INFO\", message, null);\n        }\n\n        public void LogError(string message, Exception ex)\n        {\n            WriteLog(\"ERROR\", message, ex);\n        }\n\n        private void WriteLog(string level, string message, Exception ex)\n        {\n            var logMessage = $\"{DateTime.UtcNow:o} [{level}] {message}\";\n            if (ex != null)\n            {\n                logMessage += $\" Exception: {ex.Message}\";\n            }\n            File.AppendAllText(logFilePath, logMessage + Environment.NewLine);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3b28dc78-a5dc-495c-9540-dded2946d90f",
        "Name": "Services",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "72c1613a-ef72-436b-83d5-30e58093f8eb",
        "Name": "IntegrationService.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing ThirdPartyIntegrationHub.Adapters;\nusing ThirdPartyIntegrationHub.Models;\nusing ThirdPartyIntegrationHub.Adapters.Implementations;\nusing ThirdPartyIntegrationHub.Configurations;\nusing ThirdPartyIntegrationHub.Logging;\nusing ThirdPartyIntegrationHub.Utils;\n\nnamespace ThirdPartyIntegrationHub.Services\n{\n    public class IntegrationService\n    {\n        private readonly IIntegrationAdapter paymentAdapter;\n        private readonly IIntegrationAdapter notificationAdapter;\n\n        public IntegrationService(IntegrationConfig config, IntegrationLogger logger)\n        {\n            var httpClient = HttpClientFactory.Create();\n            paymentAdapter = new PaymentGatewayAdapter(config, logger, httpClient);\n            notificationAdapter = new NotificationAdapter(config, logger, httpClient);\n        }\n\n        public async Task<IntegrationResponse> ProcessIntegrationAsync(IntegrationRequest request)\n        {\n            if (request.Provider == \"PaymentGateway\")\n            {\n                return await paymentAdapter.ExecuteIntegrationAsync(request);\n            }\n            else if (request.Provider == \"Notification\")\n            {\n                return await notificationAdapter.ExecuteIntegrationAsync(request);\n            }\n            else\n            {\n                throw new ArgumentException(\"Unsupported provider.\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "23c03a71-f5c6-4690-8dd3-79ca7811474c",
        "Name": "Models",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7e59032b-ba86-41b6-a160-99a341ea8ac5",
        "Name": "IntegrationRequest.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "namespace ThirdPartyIntegrationHub.Models\n{\n    public class IntegrationRequest\n    {\n        public string Provider { get; set; }\n        public string Operation { get; set; }\n        public object Payload { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c87a0010-9e56-438a-9efd-1555c86625b5",
        "Name": "IntegrationResponse.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "namespace ThirdPartyIntegrationHub.Models\n{\n    public class IntegrationResponse\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public object Data { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e1a9799f-d0d1-479f-8340-180a72bb038a",
        "Name": "Utils",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "18e943c0-5883-47b4-b9d4-1a55daaa244f",
        "Name": "HttpClientFactory.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\n\nnamespace ThirdPartyIntegrationHub.Utils\n{\n    public static class HttpClientFactory\n    {\n        public static HttpClient Create()\n        {\n            var client = new HttpClient();\n            client.Timeout = TimeSpan.FromSeconds(30);\n            return client;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1b0ecd21-89ba-4b5f-b98f-6c6ac584bd6e",
        "Name": "ThirdPartyIntegrationHub.cs",
        "ParentId": "b33660f5-e4f1-4810-9278-097df6702f7d",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing ThirdPartyIntegrationHub.Configurations;\nusing ThirdPartyIntegrationHub.Logging;\nusing ThirdPartyIntegrationHub.Services;\nusing ThirdPartyIntegrationHub.Models;\n\nnamespace ThirdPartyIntegrationHub\n{\n    public class ThirdPartyIntegrationHubApp\n    {\n        public static async Task Main(string[] args)\n        {\n            if (args.Length == 0)\n            {\n                Console.WriteLine(\"Configuration file path required.\");\n                return;\n            }\n            var configFilePath = args[0];\n            IntegrationConfig config = ConfigurationManager.Load(configFilePath);\n            \n            var logger = new IntegrationLogger(\"integrationhub.log\");\n            var integrationService = new IntegrationService(config, logger);\n            \n            var request = new IntegrationRequest\n            {\n                Provider = \"PaymentGateway\",\n                Operation = \"ProcessPayment\",\n                Payload = new { Amount = 100, Currency = \"USD\", OrderId = \"ORD12345\" }\n            };\n            \n            try\n            {\n                IntegrationResponse response = await integrationService.ProcessIntegrationAsync(request);\n                if (response.Success)\n                {\n                    Console.WriteLine(\"Integration call succeeded: \" + response.Message);\n                }\n                else\n                {\n                    Console.WriteLine(\"Integration call failed: \" + response.Message);\n                }\n            }\n            catch (Exception ex)\n            {\n                logger.LogError(\"Error processing integration.\", ex);\n                Console.WriteLine(\"An error occurred. Check logs for details.\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "17e162dd-5bf7-4484-b95a-5331ef97904f",
    "Name": "API Rate Limiting Service",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "89c02fa3-08ec-42ac-a79b-368e41e8596d",
        "Name": "Program.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ApiRateLimitingService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "23a5addc-01a0-4ebe-9438-97023e345d38",
        "Name": "Startup.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "using ApiRateLimitingService.Configurations;\nusing ApiRateLimitingService.Middleware;\nusing ApiRateLimitingService.Services;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ApiRateLimitingService\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // Bind RateLimitOptions from configuration\n            services.Configure<RateLimitOptions>(Configuration.GetSection(\"RateLimitOptions\"));\n            // Register Rate Limiting Service as a singleton\n            services.AddSingleton<IRateLimitingService, RateLimitingService>();\n            services.AddControllers();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            // Insert rate limiting middleware in the pipeline\n            app.UseMiddleware<RateLimitingMiddleware>();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0e6642e3-6949-4b1a-bbfc-e0e4b50f06c9",
        "Name": "Controllers",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "08229369-c994-4f46-891e-8044e2c3cc8e",
        "Name": "RateLimitController.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "using ApiRateLimitingService.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace ApiRateLimitingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RateLimitController : ControllerBase\n    {\n        private readonly IRateLimitingService _rateLimitingService;\n\n        public RateLimitController(IRateLimitingService rateLimitingService)\n        {\n            _rateLimitingService = rateLimitingService;\n        }\n\n        [HttpGet(\"status\")]\n        public IActionResult GetStatus()\n        {\n            // Returns a simple status. In production, this might include metrics and current limits.\n            return Ok(new { Message = \"API Rate Limiting Service is operational.\" });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3ae0484c-bf54-4456-ad08-4998e801b1eb",
        "Name": "Middleware",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3cb3f26e-90bd-4bfb-a178-c3b3be506e89",
        "Name": "RateLimitingMiddleware.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing ApiRateLimitingService.Services;\n\nnamespace ApiRateLimitingService.Middleware\n{\n    public class RateLimitingMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly IRateLimitingService _rateLimitingService;\n\n        public RateLimitingMiddleware(RequestDelegate next, IRateLimitingService rateLimitingService)\n        {\n            _next = next;\n            _rateLimitingService = rateLimitingService;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            string clientIdentifier = context.Connection.RemoteIpAddress?.ToString();\n            if (!string.IsNullOrEmpty(clientIdentifier) && !_rateLimitingService.IsRequestAllowed(clientIdentifier))\n            {\n                context.Response.StatusCode = StatusCodes.Status429TooManyRequests;\n                await context.Response.WriteAsync(\"Too Many Requests\");\n                return;\n            }\n            await _next(context);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c356effa-96b9-4bfb-85c1-1bc9a4d171cb",
        "Name": "Services",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "37ca5a07-4088-436d-a1c6-c2c57ce86f20",
        "Name": "IRateLimitingService.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "namespace ApiRateLimitingService.Services\n{\n    public interface IRateLimitingService\n    {\n        bool IsRequestAllowed(string clientIdentifier);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "82e55e04-f918-4d36-8937-4f4e7c5b8f11",
        "Name": "RateLimitingService.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Concurrent;\nusing ApiRateLimitingService.Configurations;\nusing Microsoft.Extensions.Options;\n\nnamespace ApiRateLimitingService.Services\n{\n    public class RateLimitingService : IRateLimitingService\n    {\n        private readonly RateLimitOptions _options;\n        private readonly ConcurrentDictionary<string, RateLimitEntry> _clients = new ConcurrentDictionary<string, RateLimitEntry>();\n\n        public RateLimitingService(IOptions<RateLimitOptions> options)\n        {\n            _options = options.Value;\n        }\n\n        public bool IsRequestAllowed(string clientIdentifier)\n        {\n            var now = DateTime.UtcNow;\n            var entry = _clients.GetOrAdd(clientIdentifier, id => new RateLimitEntry { RequestCount = 0, WindowStart = now });\n            lock (entry)\n            {\n                if ((now - entry.WindowStart).TotalSeconds > _options.WindowInSeconds)\n                {\n                    entry.RequestCount = 0;\n                    entry.WindowStart = now;\n                }\n                entry.RequestCount++;\n                return entry.RequestCount <= _options.MaxRequests;\n            }\n        }\n\n        private class RateLimitEntry\n        {\n            public int RequestCount { get; set; }\n            public DateTime WindowStart { get; set; }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0f3764d3-c7db-49d2-b32f-abdeed6d11f1",
        "Name": "Configurations",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "02fa1408-1213-49af-8506-6c9f2d61b70f",
        "Name": "RateLimitOptions.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "namespace ApiRateLimitingService.Configurations\n{\n    public class RateLimitOptions\n    {\n        public int MaxRequests { get; set; } = 100;\n        public int WindowInSeconds { get; set; } = 60;\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5a6fc991-9b11-4b69-8276-99218b77fa11",
        "Name": "Models",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a7624361-f53b-4843-8b90-9a24f6db20c0",
        "Name": "RateLimitRule.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "namespace ApiRateLimitingService.Models\n{\n    public class RateLimitRule\n    {\n        public int MaxRequests { get; set; }\n        public int WindowInSeconds { get; set; }\n        public string Endpoint { get; set; }\n        public bool IsEnabled { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c1a05618-49ef-4d2c-a154-f409b2468ed0",
        "Name": "RateLimitStatus.cs",
        "ParentId": "17e162dd-5bf7-4484-b95a-5331ef97904f",
        "Type": 1,
        "Text": "using System;\n\nnamespace ApiRateLimitingService.Models\n{\n    public class RateLimitStatus\n    {\n        public string ClientIdentifier { get; set; }\n        public int RequestCount { get; set; }\n        public DateTime WindowStart { get; set; }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "b923fd21-586e-4c06-8d75-560b0a26323f",
    "Name": "ServiceRateLimiter",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "d8cce600-1c08-4c88-943a-18ad94e24d95",
        "Name": "Program.cs",
        "ParentId": "b923fd21-586e-4c06-8d75-560b0a26323f",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing ServiceRateLimiter;\nusing ServiceRateLimiter.Middleware;\nusing ServiceRateLimiter.RateLimiting;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure logging and rate limiting options\nbuilder.Services.AddLogging();\n\n// In a real application, these options would be loaded from configuration\nvar rateLimitingOptions = new RateLimitingOptions {\n    Limit = 100,         // Maximum 100 requests\n    WindowSeconds = 60   // Per 60 seconds window\n};\n\nbuilder.Services.AddSingleton(rateLimitingOptions);\n\nbuilder.Services.AddSingleton<IRateLimiter>(sp => {\n    var logger = sp.GetRequiredService<ILogger<FixedWindowRateLimiter>>();\n    return RateLimiterFactory.CreateFixedWindowRateLimiter(rateLimitingOptions, logger);\n});\n\nvar app = builder.Build();\n\n// Use global rate limiting middleware\napp.UseMiddleware<RateLimitingMiddleware>();\n\n// A sample endpoint for testing\napp.MapGet(\"/\", () => \"Welcome to the Digital Bank API\");\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "840d0a26-9aad-452d-9413-c711bf2b25ea",
        "Name": "RateLimitingOptions.cs",
        "ParentId": "b923fd21-586e-4c06-8d75-560b0a26323f",
        "Type": 1,
        "Text": "namespace ServiceRateLimiter\n{\n    public class RateLimitingOptions\n    {\n        // Maximum number of allowed requests within the window\n        public int Limit { get; set; }\n\n        // Duration of the fixed window in seconds\n        public int WindowSeconds { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "740584c6-3de1-405b-aa4f-54d254b8947e",
        "Name": "RateLimiting",
        "ParentId": "b923fd21-586e-4c06-8d75-560b0a26323f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0422840d-0cee-40c8-a0e1-b053b9f611c8",
        "Name": "IRateLimiter.cs",
        "ParentId": "b923fd21-586e-4c06-8d75-560b0a26323f",
        "Type": 1,
        "Text": "namespace ServiceRateLimiter.RateLimiting\n{\n    public interface IRateLimiter\n    {\n        // Determines if a request is allowed based on the provided key\n        bool IsAllowed(string key);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e132a998-0353-422e-bb11-fa45bbb930a2",
        "Name": "FixedWindowRateLimiter.cs",
        "ParentId": "b923fd21-586e-4c06-8d75-560b0a26323f",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Concurrent;\nusing Microsoft.Extensions.Logging;\n\nnamespace ServiceRateLimiter.RateLimiting\n{\n    public class FixedWindowRateLimiter : IRateLimiter\n    {\n        private readonly int _limit;\n        private readonly TimeSpan _window;\n        private readonly ConcurrentDictionary<string, (DateTime WindowStart, int Count)> _counters = new ConcurrentDictionary<string, (DateTime, int)>();\n        private readonly ConcurrentDictionary<string, object> _locks = new ConcurrentDictionary<string, object>();\n        private readonly ILogger<FixedWindowRateLimiter> _logger;\n\n        public FixedWindowRateLimiter(int limit, TimeSpan window, ILogger<FixedWindowRateLimiter> logger)\n        {\n            _limit = limit;\n            _window = window;\n            _logger = logger;\n        }\n\n        public bool IsAllowed(string key)\n        {\n            var now = DateTime.UtcNow;\n            var keyLock = _locks.GetOrAdd(key, k => new object());\n            lock(keyLock)\n            {\n                var counter = _counters.GetOrAdd(key, k => (now, 0));\n                if (now - counter.WindowStart >= _window)\n                {\n                    counter = (now, 0);\n                }\n\n                if (counter.Count < _limit)\n                {\n                    counter = (counter.WindowStart, counter.Count + 1);\n                    _counters[key] = counter;\n                    _logger.LogInformation(\"Allowed request for {Key}. Count: {Count}\", key, counter.Count);\n                    return true;\n                }\n                else\n                {\n                    _logger.LogWarning(\"Rate limit exceeded for {Key}\", key);\n                    return false;\n                }\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "500b02c3-db02-4665-b21b-b2585b9475ab",
        "Name": "RateLimiterFactory.cs",
        "ParentId": "b923fd21-586e-4c06-8d75-560b0a26323f",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Logging;\nusing ServiceRateLimiter.RateLimiting;\n\nnamespace ServiceRateLimiter\n{\n    public static class RateLimiterFactory\n    {\n        public static IRateLimiter CreateFixedWindowRateLimiter(RateLimitingOptions options, ILogger<FixedWindowRateLimiter> logger)\n        {\n            return new FixedWindowRateLimiter(options.Limit, TimeSpan.FromSeconds(options.WindowSeconds), logger);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e8906ccb-ae54-4f35-a057-d4a3a90da074",
        "Name": "Middleware",
        "ParentId": "b923fd21-586e-4c06-8d75-560b0a26323f",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b68c980a-bd8f-4d2e-a0ba-c7a136c461d6",
        "Name": "RateLimitingMiddleware.cs",
        "ParentId": "b923fd21-586e-4c06-8d75-560b0a26323f",
        "Type": 1,
        "Text": "using System.Net;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing ServiceRateLimiter.RateLimiting;\n\nnamespace ServiceRateLimiter.Middleware\n{\n    public class RateLimitingMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private readonly IRateLimiter _rateLimiter;\n        private readonly ILogger<RateLimitingMiddleware> _logger;\n\n        public RateLimitingMiddleware(RequestDelegate next, IRateLimiter rateLimiter, ILogger<RateLimitingMiddleware> logger)\n        {\n            _next = next;\n            _rateLimiter = rateLimiter;\n            _logger = logger;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            // Use the remote IP address as the identifier\n            string clientIdentifier = context.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            \n            if (!_rateLimiter.IsAllowed(clientIdentifier))\n            {\n                _logger.LogWarning(\"Request rate limited for client {Client}\", clientIdentifier);\n                context.Response.StatusCode = (int)HttpStatusCode.TooManyRequests;\n                await context.Response.WriteAsync(\"Too many requests. Please try again later.\");\n                return;\n            }\n\n            await _next(context);\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "a2c16d9f-7705-427a-aa92-98264523d7e0",
    "Name": "ServiceHealthMonitor",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "9ef2afd7-0d74-42a5-b8a5-d0e599f2785e",
        "Name": "Program.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Logging;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddHttpClient();\n\n// Register configuration for health monitor\nbuilder.Services.AddSingleton(new Configurations.HealthMonitorConfig {\n    ServiceEndpoints = new List<Models.ServiceEndpoint> {\n        new Models.ServiceEndpoint { Name = \"AccountService\", Url = \"https://account.bank.com/health\" },\n        new Models.ServiceEndpoint { Name = \"TransactionService\", Url = \"https://transaction.bank.com/health\" }\n    },\n    CheckInterval = TimeSpan.FromSeconds(30)\n});\n\n// Register the status repository\nbuilder.Services.AddSingleton<Services.IStatusRepository, Services.StatusRepository>();\n\n// Register custom logger for health monitoring\nbuilder.Services.AddSingleton<Logging.HealthMonitorLogger>();\n\n// Register health check background service\nbuilder.Services.AddHostedService<HealthChecks.HealthCheckService>();\n\n// Add controllers for API endpoints\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => {\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "1d0c6bcb-6c1d-454b-9b2b-8288cd442467",
        "Name": "ServiceHealthMonitor.csproj",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net7.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"7.0.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.2.5\" />\n  </ItemGroup>\n</Project>\n",
        "Language": 0
      },
      {
        "Id": "88264977-e307-4fdb-87e0-99892c313c79",
        "Name": "API",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "59c827a5-2175-4fd4-a5ae-219379da38a4",
        "Name": "HealthController.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing Microsoft.AspNetCore.Mvc;\nusing Services;\nusing Models;\n\nnamespace API\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class HealthController : ControllerBase\n    {\n        private readonly IStatusRepository _repository;\n\n        public HealthController(IStatusRepository repository)\n        {\n            _repository = repository;\n        }\n\n        [HttpGet]\n        public ActionResult<IReadOnlyCollection<ServiceStatus>> Get()\n        {\n            var statuses = _repository.GetStatuses();\n            return Ok(statuses);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "2186ab24-1c86-4718-8a52-c7cfddd3aa9c",
        "Name": "Configurations",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "11eae41b-a440-4ebd-ba1a-7deadc0f19ac",
        "Name": "HealthMonitorConfig.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing Models;\n\nnamespace Configurations\n{\n    public class HealthMonitorConfig\n    {\n        public List<ServiceEndpoint> ServiceEndpoints { get; set; } = new List<ServiceEndpoint>();\n        public TimeSpan CheckInterval { get; set; } = TimeSpan.FromSeconds(30);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9d8219a0-a730-459b-93c9-6ca56973725a",
        "Name": "HealthChecks",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d48d924b-65e0-448b-89fe-61392c26160a",
        "Name": "HealthChecker.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System;\nusing System.Diagnostics;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Models;\n\nnamespace HealthChecks\n{\n    public class HealthChecker\n    {\n        private readonly HttpClient _httpClient;\n\n        public HealthChecker(HttpClient httpClient)\n        {\n            _httpClient = httpClient;\n        }\n\n        public async Task<ServiceStatus> CheckAsync(Models.ServiceEndpoint endpoint)\n        {\n            var status = new ServiceStatus { ServiceName = endpoint.Name, CheckedAt = DateTime.UtcNow };\n            var stopwatch = Stopwatch.StartNew();\n            try\n            {\n                var response = await _httpClient.GetAsync(endpoint.Url);\n                stopwatch.Stop();\n                status.ResponseTime = stopwatch.Elapsed;\n                status.IsHealthy = response.IsSuccessStatusCode;\n                status.ResponseMessage = response.ReasonPhrase ?? \"OK\";\n            }\n            catch (Exception ex)\n            {\n                stopwatch.Stop();\n                status.ResponseTime = stopwatch.Elapsed;\n                status.IsHealthy = false;\n                status.ResponseMessage = ex.Message;\n            }\n            return status;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c660a7b3-cd75-4cab-bc6d-63f5b992a3fe",
        "Name": "HealthCheckService.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Configurations;\nusing Models;\nusing Services;\n\nnamespace HealthChecks\n{\n    public class HealthCheckService : BackgroundService\n    {\n        private readonly HealthMonitorConfig _config;\n        private readonly IHttpClientFactory _clientFactory;\n        private readonly IStatusRepository _repository;\n        private readonly Logging.HealthMonitorLogger _logger;\n\n        public HealthCheckService(HealthMonitorConfig config, IHttpClientFactory clientFactory, IStatusRepository repository, Logging.HealthMonitorLogger logger)\n        {\n            _config = config;\n            _clientFactory = clientFactory;\n            _repository = repository;\n            _logger = logger;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                foreach (var endpoint in _config.ServiceEndpoints)\n                {\n                    var client = _clientFactory.CreateClient();\n                    var checker = new HealthChecker(client);\n                    ServiceStatus status = await checker.CheckAsync(endpoint);\n                    _repository.UpdateStatus(status);\n                    _logger.LogStatus(status);\n                }\n                await Task.Delay(_config.CheckInterval, stoppingToken);\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9451f1b1-a813-4587-82ba-4132720b8a85",
        "Name": "Models",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "dea10320-14db-440e-99cb-da27a84f3030",
        "Name": "ServiceEndpoint.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "namespace Models\n{\n    public class ServiceEndpoint\n    {\n        public string Name { get; set; } = string.Empty;\n        public string Url { get; set; } = string.Empty;\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6c0df253-fbae-4f1e-baef-6d988b81239f",
        "Name": "ServiceStatus.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System;\n\nnamespace Models\n{\n    public class ServiceStatus\n    {\n        public string ServiceName { get; set; } = string.Empty;\n        public bool IsHealthy { get; set; }\n        public TimeSpan ResponseTime { get; set; }\n        public DateTime CheckedAt { get; set; }\n        public string ResponseMessage { get; set; } = string.Empty;\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9a3378e9-62ed-4c52-857e-1026453b72f1",
        "Name": "Services",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a46a3da8-8722-438e-a1c2-b6daadc3f9df",
        "Name": "IStatusRepository.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing Models;\n\nnamespace Services\n{\n    public interface IStatusRepository\n    {\n        void UpdateStatus(ServiceStatus status);\n        IReadOnlyCollection<ServiceStatus> GetStatuses();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3f13cf21-9f05-477e-8a24-64320c42b3b0",
        "Name": "StatusRepository.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Linq;\nusing Models;\n\nnamespace Services\n{\n    public class StatusRepository : IStatusRepository\n    {\n        private readonly Dictionary<string, ServiceStatus> _statuses = new Dictionary<string, ServiceStatus>();\n        private readonly object _lock = new object();\n\n        public void UpdateStatus(ServiceStatus status)\n        {\n            lock (_lock)\n            {\n                _statuses[status.ServiceName] = status;\n            }\n        }\n\n        public IReadOnlyCollection<ServiceStatus> GetStatuses()\n        {\n            lock (_lock)\n            {\n                return _statuses.Values.ToList().AsReadOnly();\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1e0959eb-9737-40cd-8592-6f0f6992ffac",
        "Name": "Logging",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "61a7bd1c-74b4-4f2a-9a66-c52405a8d5f0",
        "Name": "HealthMonitorLogger.cs",
        "ParentId": "a2c16d9f-7705-427a-aa92-98264523d7e0",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Logging;\nusing Models;\n\nnamespace Logging\n{\n    public class HealthMonitorLogger\n    {\n        private readonly ILogger<HealthMonitorLogger> _logger;\n\n        public HealthMonitorLogger(ILogger<HealthMonitorLogger> logger)\n        {\n            _logger = logger;\n        }\n\n        public void LogStatus(ServiceStatus status)\n        {\n            _logger.LogInformation(\"Service: {ServiceName} checked at {CheckedAt}. Healthy: {IsHealthy}. ResponseTime: {ResponseTime}ms. Message: {ResponseMessage}\",\n                status.ServiceName, status.CheckedAt, status.IsHealthy, status.ResponseTime.TotalMilliseconds, status.ResponseMessage);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
    "Name": "IncidentManagementSystem",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "01df8855-7f79-4cf7-af00-6b59216b1d8e",
        "Name": "Program.cs",
        "ParentId": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing IncidentManagementSystem.Data;\nusing IncidentManagementSystem.Services;\nusing IncidentManagementSystem.Repositories;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddDbContext<IncidentDbContext>(options =>\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\")));\n\nbuilder.Services.AddScoped<IIncidentService, IncidentService>();\nbuilder.Services.AddScoped<IIncidentRepository, IncidentRepository>();\n\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseRouting();\napp.UseAuthorization();\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "e723eb69-b12f-431c-af38-0c66c4a34fbb",
        "Name": "AppSettings.json",
        "ParentId": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=YOUR_SERVER;Database=IncidentManagementDb;User Id=YOUR_USER;Password=YOUR_PASSWORD;\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}",
        "Language": 0
      },
      {
        "Id": "2f7f1d14-06b7-4887-876b-f886e4055784",
        "Name": "Controllers",
        "ParentId": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "975f5d2c-d8c1-4ad9-911a-e397f006f28f",
        "Name": "Models",
        "ParentId": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0ac36377-b830-4797-8f8d-033d76a36735",
        "Name": "Services",
        "ParentId": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "148833af-0d9b-4f6c-bdbc-01e19928444e",
        "Name": "Repositories",
        "ParentId": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2955353f-1d68-4204-a640-4063304f366a",
        "Name": "Data",
        "ParentId": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f592d9bf-95ef-44bc-8943-3f5f4b9e32b9",
        "Name": "Exceptions",
        "ParentId": "4829c0a1-3c11-454d-a88b-aeefb4be726a",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "62339083-7b30-4dba-b282-5986bea3a2d1",
    "Name": "BackupAndRecoveryService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "812622fa-9ef4-4874-905e-7fd4e6ba1484",
        "Name": "Program.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing BackupAndRecoveryService.Infrastructure;\nusing BackupAndRecoveryService.Services;\nusing BackupAndRecoveryService.Repositories;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddDbContext<DatabaseContext>(options =>\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\")));\n\nbuilder.Services.AddScoped<IBackupService, BackupService>();\nbuilder.Services.AddScoped<IRecoveryService, RecoveryService>();\nbuilder.Services.AddScoped<IBackupRepository, BackupRepository>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => { endpoints.MapControllers(); });\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "47bdaa5a-dbb5-4490-855a-8dedda519136",
        "Name": "AppSettings.json",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=.;Database=BackupRecoveryDB;Trusted_Connection=True;\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  }\n}",
        "Language": 0
      },
      {
        "Id": "cf4eb426-3ea1-4cd8-9cb1-ee124cf11f78",
        "Name": "Controllers",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "06fb8252-af81-431c-8abf-b07f1bc74dc4",
        "Name": "BackupController.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing BackupAndRecoveryService.Services;\n\nnamespace BackupAndRecoveryService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BackupController : ControllerBase\n    {\n        private readonly IBackupService _backupService;\n        \n        public BackupController(IBackupService backupService)\n        {\n            _backupService = backupService;\n        }\n        \n        [HttpPost]\n        public async Task<IActionResult> ExecuteBackup()\n        {\n            bool result = await _backupService.ExecuteBackupAsync();\n            return result ? Ok(\"Backup completed successfully.\") : StatusCode(500, \"Backup failed.\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "cc6fee04-66aa-4f7b-ab8c-a039117cb8f7",
        "Name": "RecoveryController.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing BackupAndRecoveryService.Services;\n\nnamespace BackupAndRecoveryService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RecoveryController : ControllerBase\n    {\n        private readonly IRecoveryService _recoveryService;\n        \n        public RecoveryController(IRecoveryService recoveryService)\n        {\n            _recoveryService = recoveryService;\n        }\n        \n        [HttpPost]\n        public async Task<IActionResult> ExecuteRecovery()\n        {\n            bool result = await _recoveryService.ExecuteRecoveryAsync();\n            return result ? Ok(\"Recovery completed successfully.\") : StatusCode(500, \"Recovery failed.\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "eb3a968c-96d3-499c-951e-7e152b1b10bd",
        "Name": "Services",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fcda2a2b-2c51-4023-9445-7b23d6c55fd4",
        "Name": "IBackupService.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\n\nnamespace BackupAndRecoveryService.Services\n{\n    public interface IBackupService\n    {\n        Task<bool> ExecuteBackupAsync();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "71a5d68b-5c98-4d58-bc27-5f1970b8da81",
        "Name": "BackupService.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing BackupAndRecoveryService.Repositories;\nusing BackupAndRecoveryService.Models;\n\nnamespace BackupAndRecoveryService.Services\n{\n    public class BackupService : IBackupService\n    {\n        private readonly IBackupRepository _backupRepository;\n        \n        public BackupService(IBackupRepository backupRepository)\n        {\n            _backupRepository = backupRepository;\n        }\n        \n        public async Task<bool> ExecuteBackupAsync()\n        {\n            // Create a new backup job record with production-ready logic\n            BackupJob job = new BackupJob\n            {\n                Id = Guid.NewGuid(),\n                BackupTime = DateTime.UtcNow,\n                Status = \"Completed\"\n            };\n            \n            return await _backupRepository.RecordBackupJobAsync(job);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ed9bc788-8382-46a0-95a2-cdacbd7d79b0",
        "Name": "IRecoveryService.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\n\nnamespace BackupAndRecoveryService.Services\n{\n    public interface IRecoveryService\n    {\n        Task<bool> ExecuteRecoveryAsync();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "53ab9d63-78e5-4a3c-ace8-c2c309f4a261",
        "Name": "RecoveryService.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing BackupAndRecoveryService.Repositories;\nusing BackupAndRecoveryService.Models;\n\nnamespace BackupAndRecoveryService.Services\n{\n    public class RecoveryService : IRecoveryService\n    {\n        private readonly IBackupRepository _backupRepository;\n        \n        public RecoveryService(IBackupRepository backupRepository)\n        {\n            _backupRepository = backupRepository;\n        }\n        \n        public async Task<bool> ExecuteRecoveryAsync()\n        {\n            // Implement recovery logic with production-level validation and error handling\n            RecoveryJob job = new RecoveryJob\n            {\n                Id = Guid.NewGuid(),\n                RecoveryTime = DateTime.UtcNow,\n                Status = \"Completed\"\n            };\n            \n            // In a complete implementation, persist or log recovery job details\n            // For now, return true to indicate successful recovery\n            return await Task.FromResult(true);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "47fa1e3c-ee4f-4357-a5b4-51585e5fb876",
        "Name": "Models",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "29ee2f2b-3f9c-4f0a-84f9-a4130e8a43c1",
        "Name": "BackupJob.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace BackupAndRecoveryService.Models\n{\n    public class BackupJob\n    {\n        [Key]\n        public Guid Id { get; set; }\n        public DateTime BackupTime { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5a73c0ba-7438-4765-ba06-601562a89e70",
        "Name": "RecoveryJob.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace BackupAndRecoveryService.Models\n{\n    public class RecoveryJob\n    {\n        [Key]\n        public Guid Id { get; set; }\n        public DateTime RecoveryTime { get; set; }\n        public string Status { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "83c2899f-2100-4063-9d3e-5d23c11951c2",
        "Name": "Repositories",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "303ba72d-2057-43d2-adc0-4633977ea8fd",
        "Name": "IBackupRepository.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing BackupAndRecoveryService.Models;\n\nnamespace BackupAndRecoveryService.Repositories\n{\n    public interface IBackupRepository\n    {\n        Task<bool> RecordBackupJobAsync(BackupJob job);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6e622f53-d14c-4cb7-827f-d905105f5405",
        "Name": "BackupRepository.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing BackupAndRecoveryService.Models;\nusing BackupAndRecoveryService.Infrastructure;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace BackupAndRecoveryService.Repositories\n{\n    public class BackupRepository : IBackupRepository\n    {\n        private readonly DatabaseContext _context;\n        \n        public BackupRepository(DatabaseContext context)\n        {\n            _context = context;\n        }\n        \n        public async Task<bool> RecordBackupJobAsync(BackupJob job)\n        {\n            _context.BackupJobs.Add(job);\n            int records = await _context.SaveChangesAsync();\n            return records > 0;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8dd1236e-4a76-4c6c-9b53-c13a6750f858",
        "Name": "Infrastructure",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fdbadd7e-6c28-4dec-a9e4-f761ebaf6d9b",
        "Name": "DatabaseContext.cs",
        "ParentId": "62339083-7b30-4dba-b282-5986bea3a2d1",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing BackupAndRecoveryService.Models;\n\nnamespace BackupAndRecoveryService.Infrastructure\n{\n    public class DatabaseContext : DbContext\n    {\n        public DatabaseContext(DbContextOptions<DatabaseContext> options) : base(options)\n        {\n        }\n        \n        public DbSet<BackupJob> BackupJobs { get; set; }\n        public DbSet<RecoveryJob> RecoveryJobs { get; set; }\n        \n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n            // Model configurations can be added here if needed\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "12d7ffc4-7abe-4d03-872a-a66169110997",
    "Name": "DisasterRecoveryModule",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "ed5b4057-a7ed-4e02-a915-98a72d74bb25",
        "Name": "Program.cs",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.Configuration;\nusing DisasterRecoveryModule.Services;\nusing DisasterRecoveryModule.Utilities;\n\nnamespace DisasterRecoveryModule\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var configuration = new ConfigurationBuilder()\n                                  .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n                                  .Build();\n\n            // Initialize custom logger with configuration\n            CustomLogger.Initialize(configuration);\n            \n            // Initialize Recovery Manager\n            var recoveryManager = new RecoveryManager(configuration);\n            recoveryManager.ExecuteRecovery();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ec180a67-ac7e-4baa-bb9d-2f21674098a9",
        "Name": "appsettings.json",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 1,
        "Text": "{\n  \"Logging\": {\n    \"LogFilePath\": \"disaster_recovery.log\"\n  },\n  \"RecoverySettings\": {\n    \"DefaultPlanName\": \"Standard Recovery\",\n    \"RetryCount\": 3,\n    \"Timeout\": 30\n  },\n  \"Notification\": {\n    \"SmtpHost\": \"smtp.example.com\",\n    \"SmtpPort\": \"587\",\n    \"FromAddress\": \"noreply@example.com\",\n    \"Username\": \"smtp_user\",\n    \"Password\": \"smtp_password\",\n    \"EnableSsl\": \"true\"\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "f5ac748f-e5ec-4b09-9940-cda58eda02bb",
        "Name": "Controllers",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3ee6bc74-dd79-4c52-8f43-b3b957bd96d9",
        "Name": "Services",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4a32c3f3-98f4-4969-b350-bea79001fe0d",
        "Name": "Models",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "56e6190d-de4f-4341-bb73-976e705b2e4a",
        "Name": "Configuration",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7550bba1-c05e-4fbe-91b4-81e5b2690331",
        "Name": "Utilities",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6504e327-f169-4b60-af3b-1af0de31502b",
        "Name": "DisasterRecoveryController.cs",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 1,
        "Text": "using DisasterRecoveryModule.Services;\nusing DisasterRecoveryModule.Utilities;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DisasterRecoveryModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DisasterRecoveryController : ControllerBase\n    {\n        private readonly RecoveryManager _recoveryManager;\n        \n        public DisasterRecoveryController(RecoveryManager recoveryManager)\n        {\n            _recoveryManager = recoveryManager;\n        }\n        \n        [HttpPost(\"execute\")]\n        public IActionResult ExecuteRecovery()\n        {\n            try\n            {\n                _recoveryManager.ExecuteRecovery();\n                return Ok(\"Recovery process executed successfully.\");\n            }\n            catch (System.Exception ex)\n            {\n                CustomLogger.LogError(\"Recovery process failed.\", ex);\n                return StatusCode(500, \"An error occurred during recovery.\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a1f9c4ae-729f-49e5-846e-b76784f5930e",
        "Name": "RecoveryManager.cs",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing Microsoft.Extensions.Configuration;\nusing DisasterRecoveryModule.Configuration;\nusing DisasterRecoveryModule.Models;\nusing DisasterRecoveryModule.Utilities;\n\nnamespace DisasterRecoveryModule.Services\n{\n    public class RecoveryManager\n    {\n        private readonly RecoverySettings _settings;\n        private readonly NotificationService _notificationService;\n        \n        public RecoveryManager(IConfiguration configuration)\n        {\n            _settings = new RecoverySettings();\n            configuration.GetSection(\"RecoverySettings\").Bind(_settings);\n            _notificationService = new NotificationService(configuration);\n        }\n        \n        public void ExecuteRecovery()\n        {\n            CustomLogger.LogInfo(\"Starting disaster recovery process...\");\n\n            try\n            {\n                // Evaluate system health and decide if recovery is needed\n                if (!IsSystemHealthy())\n                {\n                    RecoveryPlan plan = DetermineRecoveryPlan();\n                    CustomLogger.LogInfo($\"Initiating recovery plan: {plan.PlanName}\");\n\n                    // Execute each recovery step\n                    foreach (var step in plan.Steps)\n                    {\n                        CustomLogger.LogInfo($\"Executing step: {step}\");\n                        // Insert production-grade logic for each recovery step here\n                    }\n\n                    CustomLogger.LogInfo(\"Recovery plan executed successfully.\");\n\n                    // Optionally send notification upon successful recovery\n                    _notificationService.SendNotification(\n                        \"admin@example.com\", \n                        \"Recovery Executed\",\n                        $\"The recovery plan '{plan.PlanName}' has been executed successfully.\");\n                }\n                else\n                {\n                    CustomLogger.LogInfo(\"System is healthy. No recovery needed.\");\n                }\n            }\n            catch (Exception ex)\n            {\n                CustomLogger.LogError(\"An error occurred during the recovery process.\", ex);\n                // Optionally send a failure notification\n                _notificationService.SendNotification(\n                    \"admin@example.com\",\n                    \"Recovery Failure\",\n                    $\"An error occurred during recovery: {ex.Message}\");\n                \n                // In a production system, more robust error handling would be implemented\n            }\n        }\n        \n        private bool IsSystemHealthy()\n        {\n            // Implement real logic to evaluate system health using monitoring metrics\n            return false;\n        }\n        \n        private RecoveryPlan DetermineRecoveryPlan()\n        {\n            // Select an appropriate recovery plan based on system status and configuration\n            return new RecoveryPlan\n            {\n                PlanName = _settings.DefaultPlanName,\n                Description = \"Default recovery plan executed due to system failure.\",\n                Steps = new List<string>\n                {\n                    \"Step1: Shutdown non-critical services\",\n                    \"Step2: Switch to backup systems\",\n                    \"Step3: Restart critical services\"\n                }\n            };\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a0beada0-5ac8-4fb7-ac8e-b11ca6bca246",
        "Name": "NotificationService.cs",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 1,
        "Text": "using System.Net;\nusing System.Net.Mail;\nusing Microsoft.Extensions.Configuration;\nusing DisasterRecoveryModule.Utilities;\n\nnamespace DisasterRecoveryModule.Services\n{\n    public class NotificationService\n    {\n        private readonly SmtpClient _smtpClient;\n        private readonly string _fromAddress;\n        \n        public NotificationService(IConfiguration configuration)\n        {\n            var smtpHost = configuration[\"Notification:SmtpHost\"];\n            var smtpPort = int.Parse(configuration[\"Notification:SmtpPort\"] ?? \"25\");\n            _fromAddress = configuration[\"Notification:FromAddress\"];\n            \n            _smtpClient = new SmtpClient(smtpHost, smtpPort)\n            {\n                Credentials = new NetworkCredential(\n                    configuration[\"Notification:Username\"], \n                    configuration[\"Notification:Password\"]),\n                EnableSsl = bool.Parse(configuration[\"Notification:EnableSsl\"] ?? \"false\")\n            };\n        }\n        \n        public void SendNotification(string toAddress, string subject, string body)\n        {\n            var mailMessage = new MailMessage(_fromAddress, toAddress, subject, body);\n            _smtpClient.Send(mailMessage);\n            CustomLogger.LogInfo($\"Notification sent to {toAddress} with subject: {subject}\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "27f43abb-96ac-4230-8b3d-73f180fd76a8",
        "Name": "RecoveryPlan.cs",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 1,
        "Text": "using System.Collections.Generic;\n\nnamespace DisasterRecoveryModule.Models\n{\n    public class RecoveryPlan\n    {\n        public string PlanName { get; set; }\n        public string Description { get; set; }\n        public List<string> Steps { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7c102da6-2704-408b-bce7-499c76384e71",
        "Name": "RecoverySettings.cs",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 1,
        "Text": "namespace DisasterRecoveryModule.Configuration\n{\n    public class RecoverySettings\n    {\n        public string DefaultPlanName { get; set; }\n        public int RetryCount { get; set; }\n        public int Timeout { get; set; } // Timeout in seconds\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d492e346-eb8f-4ec5-b66c-f2a04c7627d2",
        "Name": "CustomLogger.cs",
        "ParentId": "12d7ffc4-7abe-4d03-872a-a66169110997",
        "Type": 1,
        "Text": "using System;\nusing System.IO;\nusing Microsoft.Extensions.Configuration;\n\nnamespace DisasterRecoveryModule.Utilities\n{\n    public static class CustomLogger\n    {\n        private static string _logFilePath;\n        \n        public static void Initialize(IConfiguration configuration)\n        {\n            _logFilePath = configuration[\"Logging:LogFilePath\"];\n            if (string.IsNullOrEmpty(_logFilePath))\n            {\n                _logFilePath = \"disaster_recovery.log\";\n            }\n        }\n        \n        public static void LogInfo(string message)\n        {\n            Log(\"INFO\", message, null);\n        }\n        \n        public static void LogError(string message, Exception ex)\n        {\n            Log(\"ERROR\", message, ex);\n        }\n        \n        private static void Log(string level, string message, Exception ex)\n        {\n            string logEntry = $\"{DateTime.UtcNow:o} [{level}] - {message}\";\n            if (ex != null)\n            {\n                logEntry += $\" Exception: {ex}\";\n            }\n            File.AppendAllText(_logFilePath, logEntry + Environment.NewLine);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
    "Name": "SystemPerformanceProfiler",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "75016b46-8b5b-457a-a008-52e18a4feafc",
        "Name": "Program.cs",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing SystemPerformanceProfiler.Services;\n\nnamespace SystemPerformanceProfiler\n{\n    class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            // Initialize system components if necessary\n            Startup.Initialize();\n            var performanceService = new PerformanceService();\n            await performanceService.RunProfilingAsync();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f28740ee-f9aa-4681-9cda-6797c55136e4",
        "Name": "Startup.cs",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 1,
        "Text": "using System;\n\nnamespace SystemPerformanceProfiler\n{\n    public static class Startup\n    {\n        public static void Initialize()\n        {\n            // Production-ready initialization logic, such as configuration and dependency injection setups\n            // Could be extended to initialize logging services, load configurations, etc.\n            Console.WriteLine(\"SystemPerformanceProfiler is initializing...\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "ec895b34-8a0d-4831-87d4-07f82d2a7c62",
        "Name": "Profilers",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "759bb473-36b4-46fc-af0f-bc3211b12ecf",
        "Name": "PerformanceProfiler.cs",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 1,
        "Text": "using System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nnamespace SystemPerformanceProfiler.Profilers\n{\n    public class PerformanceProfiler\n    {\n        private readonly Stopwatch _stopwatch;\n\n        public PerformanceProfiler()\n        {\n            _stopwatch = new Stopwatch();\n        }\n\n        public async Task<TimeSpan> ProfileAsync(Func<Task> action)\n        {\n            _stopwatch.Restart();\n            await action();\n            _stopwatch.Stop();\n            return _stopwatch.Elapsed;\n        }\n\n        public async Task<TimeSpan> ProfileActionAsync(Action action)\n        {\n            _stopwatch.Restart();\n            await Task.Run(action);\n            _stopwatch.Stop();\n            return _stopwatch.Elapsed;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "51a98b5d-e27e-41eb-8b0a-a0ca7debc3ef",
        "Name": "Services",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ffa1be6f-8b25-4ab3-8337-3042d2cece09",
        "Name": "PerformanceService.cs",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing SystemPerformanceProfiler.Profilers;\nusing SystemPerformanceProfiler.Data;\nusing SystemPerformanceProfiler.Utils;\n\nnamespace SystemPerformanceProfiler.Services\n{\n    public class PerformanceService\n    {\n        private readonly PerformanceProfiler _profiler;\n\n        public PerformanceService()\n        {\n            _profiler = new PerformanceProfiler();\n        }\n\n        public async Task RunProfilingAsync()\n        {\n            // Profile a workload and check for potential bottlenecks\n            TimeSpan duration = await _profiler.ProfileAsync(async () =>\n            {\n                await SimulatedWorkload();\n            });\n\n            // Identify bottleneck if execution time exceeds threshold (e.g., 500ms)\n            if (duration.TotalMilliseconds > 500)\n            {\n                var log = new PerformanceLog\n                {\n                    Timestamp = DateTime.UtcNow,\n                    Message = \"Performance bottleneck detected.\",\n                    Duration = duration\n                };\n                PerformanceLogger.Log(log);\n            }\n        }\n\n        private async Task SimulatedWorkload()\n        {\n            // Execute production-grade business logic; here we simulate workload delay\n            await Task.Delay(600);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "8f026366-9de5-41fa-bdc3-ca8616e6f7b3",
        "Name": "Data",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e2ed7e58-eea2-485f-8995-97ba88ec4428",
        "Name": "PerformanceLog.cs",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 1,
        "Text": "using System;\n\nnamespace SystemPerformanceProfiler.Data\n{\n    public class PerformanceLog\n    {\n        public DateTime Timestamp { get; set; }\n        public string Message { get; set; }\n        public TimeSpan Duration { get; set; }\n\n        public override string ToString()\n        {\n            return $\"{Timestamp:o}: {Message} (Duration: {Duration.TotalMilliseconds} ms)\";\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c9b1d99b-9419-4266-9910-573a33161774",
        "Name": "Utils",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "db8cb250-7d69-4799-abc5-6bc8bb3006e5",
        "Name": "TimerUtility.cs",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 1,
        "Text": "using System;\nusing System.Diagnostics;\n\nnamespace SystemPerformanceProfiler.Utils\n{\n    public static class TimerUtility\n    {\n        public static TimeSpan Measure(Action action)\n        {\n            Stopwatch stopwatch = Stopwatch.StartNew();\n            action();\n            stopwatch.Stop();\n            return stopwatch.Elapsed;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "710a0c4d-eaf4-440f-913b-d8b1cee52f61",
        "Name": "PerformanceLogger.cs",
        "ParentId": "eb9934ba-b747-429a-8981-e32bbe58f7c3",
        "Type": 1,
        "Text": "using System;\nusing SystemPerformanceProfiler.Data;\n\nnamespace SystemPerformanceProfiler.Utils\n{\n    public static class PerformanceLogger\n    {\n        public static void Log(PerformanceLog log)\n        {\n            // In a production environment, this method would record logs to a centralized logging system or persist them in a database\n            Console.WriteLine(log.ToString());\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "9af9569d-8b49-4177-a93e-b34726ebd207",
    "Name": "ErrorReportingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "62a8445a-f50b-4bc0-ab07-b556f439cc7f",
        "Name": "Program.cs",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ErrorReportingService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "da0ae7c7-079b-46e9-9ce2-d37702d97c9d",
        "Name": "Startup.cs",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 1,
        "Text": "using ErrorReportingService.Interfaces;\nusing ErrorReportingService.Services;\nusing ErrorReportingService.Repositories;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace ErrorReportingService\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddScoped<IErrorReporter, ErrorReporter>();\n            services.AddScoped<IErrorReportRepository, ErrorReportRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1bcf128a-835c-425e-9db5-27f4f204d9aa",
        "Name": "Models",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7a8f5a89-d56e-48c1-ad5f-c4991badc1e5",
        "Name": "ErrorReport.cs",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 1,
        "Text": "using System;\n\nnamespace ErrorReportingService.Models\n{\n    public class ErrorReport\n    {\n        public Guid ErrorId { get; set; }\n        public string Message { get; set; }\n        public string StackTrace { get; set; }\n        public DateTime OccurredAt { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "50c1bef6-c75f-4999-8cac-57bb67dc13cf",
        "Name": "Interfaces",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4f459f84-22ef-4030-a721-e98cc6c04da6",
        "Name": "IErrorReporter.cs",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 1,
        "Text": "using ErrorReportingService.Models;\n\nnamespace ErrorReportingService.Interfaces\n{\n    public interface IErrorReporter\n    {\n        void ReportError(ErrorReport report);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f6b897c3-0b69-4dcb-8de0-91000029cf4b",
        "Name": "Repositories",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8750364c-8267-414e-b1ea-b5b1cbe91a19",
        "Name": "IErrorReportRepository.cs",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 1,
        "Text": "using ErrorReportingService.Models;\n\nnamespace ErrorReportingService.Repositories\n{\n    public interface IErrorReportRepository\n    {\n        void Save(ErrorReport report);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7b9b4ec2-4f32-47c5-bb29-d0b93f8969ab",
        "Name": "ErrorReportRepository.cs",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 1,
        "Text": "using System;\nusing System.Data.SqlClient;\nusing ErrorReportingService.Models;\n\nnamespace ErrorReportingService.Repositories\n{\n    public class ErrorReportRepository : IErrorReportRepository\n    {\n        private readonly string _connectionString;\n\n        public ErrorReportRepository()\n        {\n            // Connection string should be retrieved from a secure configuration in production\n            _connectionString = \"YourConnectionString\";\n        }\n\n        public void Save(ErrorReport report)\n        {\n            if (report == null)\n                throw new ArgumentNullException(nameof(report));\n\n            using (var connection = new SqlConnection(_connectionString))\n            {\n                connection.Open();\n                using (var command = connection.CreateCommand())\n                {\n                    command.CommandText = \"INSERT INTO ErrorReports (ErrorId, Message, StackTrace, OccurredAt) VALUES (@ErrorId, @Message, @StackTrace, @OccurredAt)\";\n                    command.Parameters.Add(new SqlParameter(\"@ErrorId\", report.ErrorId));\n                    command.Parameters.Add(new SqlParameter(\"@Message\", report.Message));\n                    command.Parameters.Add(new SqlParameter(\"@StackTrace\", report.StackTrace));\n                    command.Parameters.Add(new SqlParameter(\"@OccurredAt\", report.OccurredAt));\n                    command.ExecuteNonQuery();\n                }\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5067b33e-5504-41b6-a154-1e96013d3f7b",
        "Name": "Services",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3ddfe3e5-150a-429b-873e-4c9da52d68fc",
        "Name": "ErrorReporter.cs",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 1,
        "Text": "using System;\nusing ErrorReportingService.Interfaces;\nusing ErrorReportingService.Models;\nusing ErrorReportingService.Repositories;\n\nnamespace ErrorReportingService.Services\n{\n    public class ErrorReporter : IErrorReporter\n    {\n        private readonly IErrorReportRepository _repository;\n\n        public ErrorReporter(IErrorReportRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public void ReportError(ErrorReport report)\n        {\n            if (report == null)\n                throw new ArgumentNullException(nameof(report));\n\n            // Additional business logic could include validation, enrichment, or deduplication\n            _repository.Save(report);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a5426353-757d-4082-91e0-bb23d096c0d3",
        "Name": "Controllers",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c048629d-a866-4f4a-a04c-b5cdc3105aa1",
        "Name": "ErrorReportController.cs",
        "ParentId": "9af9569d-8b49-4177-a93e-b34726ebd207",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Mvc;\nusing ErrorReportingService.Interfaces;\nusing ErrorReportingService.Models;\n\nnamespace ErrorReportingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ErrorReportController : ControllerBase\n    {\n        private readonly IErrorReporter _errorReporter;\n\n        public ErrorReportController(IErrorReporter errorReporter)\n        {\n            _errorReporter = errorReporter;\n        }\n\n        [HttpPost]\n        public IActionResult PostErrorReport([FromBody] ErrorReport report)\n        {\n            if (report == null)\n            {\n                return BadRequest(\"Invalid error report data.\");\n            }\n\n            try\n            {\n                _errorReporter.ReportError(report);\n                return Ok(\"Error report processed successfully.\");\n            }\n            catch (Exception)\n            {\n                return StatusCode(500, \"An error occurred while processing the error report.\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "a73de85e-c9c8-4de1-8908-07206b8d55d2",
    "Name": "BusinessIntelligenceDashboard",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "82c713f4-6d8c-46d9-9383-d5d6e213330b",
        "Name": "Program.cs",
        "ParentId": "a73de85e-c9c8-4de1-8908-07206b8d55d2",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing BusinessIntelligenceDashboard.Data;\nusing BusinessIntelligenceDashboard.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddControllers();\nbuilder.Services.AddDbContext<DashboardDbContext>(options =>\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DashboardDb\")));\nbuilder.Services.AddScoped<AnalyticsService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "f30144c3-f909-495e-828a-a414505fe60d",
        "Name": "Controllers",
        "ParentId": "a73de85e-c9c8-4de1-8908-07206b8d55d2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "cb893f37-54c8-4029-8185-d216253ae84f",
        "Name": "Models",
        "ParentId": "a73de85e-c9c8-4de1-8908-07206b8d55d2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e537ed76-0949-479f-b66b-848f439d9f0c",
        "Name": "Data",
        "ParentId": "a73de85e-c9c8-4de1-8908-07206b8d55d2",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6eafbc50-d378-49ef-8820-fef91fae11f2",
        "Name": "Services",
        "ParentId": "a73de85e-c9c8-4de1-8908-07206b8d55d2",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "66fbaca9-f84f-4004-bfc0-642429839b9e",
    "Name": "DataWarehouseConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "e5f75a44-7ce3-4ffb-9f6c-8c2722439c06",
        "Name": "DataWarehouseConnector.csproj",
        "ParentId": "66fbaca9-f84f-4004-bfc0-642429839b9e",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n    <RootNamespace>DataWarehouseConnector</RootNamespace>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"6.0.0\" />\n  </ItemGroup>\n</Project>",
        "Language": 0
      },
      {
        "Id": "f68711b9-1a3d-4bf0-8f85-311d9d99c566",
        "Name": "Program.cs",
        "ParentId": "66fbaca9-f84f-4004-bfc0-642429839b9e",
        "Type": 1,
        "Text": "using Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing DataWarehouseConnector.Configuration;\nusing DataWarehouseConnector.Connectors;\nusing DataWarehouseConnector.Services;\n\nvar configuration = new ConfigurationBuilder()\n    .SetBasePath(AppContext.BaseDirectory)\n    .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n    .Build();\n\nvar services = new ServiceCollection();\nservices.AddSingleton<IConfiguration>(configuration);\nservices.AddLogging(configure => configure.AddConsole());\nservices.Configure<AppSettings>(configuration.GetSection(\"AppSettings\"));\n\n// Register connectors and services.\nservices.AddTransient<IDataWarehouseConnector, SqlDataWarehouseConnector>();\nservices.AddTransient<IDataWarehouseConnector, SnowflakeConnector>();\nservices.AddTransient<DataWarehouseService>();\n\nvar serviceProvider = services.BuildServiceProvider();\nvar logger = serviceProvider.GetService<ILoggerFactory>().CreateLogger(\"Main\");\n\ntry {\n    var service = serviceProvider.GetService<DataWarehouseService>();\n    service.Run();\n} catch(Exception ex) {\n    logger.LogError(ex, \"An error occurred during application execution.\");\n}",
        "Language": 0
      },
      {
        "Id": "6938dbaf-f77c-4b7f-85c2-b775965dd68a",
        "Name": "appsettings.json",
        "ParentId": "66fbaca9-f84f-4004-bfc0-642429839b9e",
        "Type": 1,
        "Text": "{\n  \"AppSettings\": {\n    \"DefaultConnector\": \"Sql\",\n    \"DataWarehouseConnection\": {\n      \"ConnectionType\": \"Sql\",\n      \"ConnectionString\": \"Server=your_server;Database=your_db;User Id=your_user;Password=your_password;\"\n    }\n  }\n}",
        "Language": 0
      },
      {
        "Id": "67c232eb-71b9-409d-bba5-0219172b2680",
        "Name": "Configuration",
        "ParentId": "66fbaca9-f84f-4004-bfc0-642429839b9e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0b18444a-4e25-47ff-abff-3befce38c5a7",
        "Name": "Connectors",
        "ParentId": "66fbaca9-f84f-4004-bfc0-642429839b9e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e6c0238f-4ff2-4eec-9ff5-48583c9cfb62",
        "Name": "Services",
        "ParentId": "66fbaca9-f84f-4004-bfc0-642429839b9e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5d25cbfa-890a-4133-a8ba-c154bc0ddca1",
        "Name": "Models",
        "ParentId": "66fbaca9-f84f-4004-bfc0-642429839b9e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9e010a9d-f494-4f12-bb70-c7e31e019e54",
        "Name": "Utils",
        "ParentId": "66fbaca9-f84f-4004-bfc0-642429839b9e",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
    "Name": "MachineLearningIntegration",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "6dc4055c-1fc9-49e2-9e41-b42bd033e4e3",
        "Name": "Program.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MachineLearningIntegration\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n        \n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "340c49c5-5365-44c3-a921-0b4a9d6065ee",
        "Name": "Startup.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using MachineLearningIntegration.Controllers;\nusing MachineLearningIntegration.Infrastructure;\nusing MachineLearningIntegration.Services;\nusing MachineLearningIntegration.Utilities;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MachineLearningIntegration\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<IConfigurationManager, ConfigurationManager>();\n            services.AddSingleton<ILoggingService, LoggingService>();\n            services.AddSingleton<IMachineLearningService, MachineLearningService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggingService logger)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n\n            app.UseEndpoints(endpoints => endpoints.MapControllers());\n\n            logger.LogInfo(\"Machine Learning Integration service started.\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9df9bc5d-d5d2-4d56-89ac-32e60c7514c2",
        "Name": "appsettings.json",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "{\n  \"MLSettings\": {\n    \"ModelPath\": \"model.zip\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\"\n    }\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "9dd791a3-cd1a-4cc2-b8aa-23961f75e3a3",
        "Name": "Controllers",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "55f1f791-5770-48cf-bb04-5446c3bfedf0",
        "Name": "AnalyticsController.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using MachineLearningIntegration.Models;\nusing MachineLearningIntegration.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\n\nnamespace MachineLearningIntegration.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AnalyticsController : ControllerBase\n    {\n        private readonly IMachineLearningService _mlService;\n        \n        public AnalyticsController(IMachineLearningService mlService)\n        {\n            _mlService = mlService;\n        }\n        \n        [HttpPost(\"predict\")]\n        public async Task<ActionResult<PredictionResponse>> Predict([FromBody] PredictionRequest request)\n        {\n            if (!ModelState.IsValid) return BadRequest(ModelState);\n            var response = await _mlService.PredictAsync(request);\n            return Ok(response);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3e5b21ce-4198-4b68-ba77-c9d9d8932c0d",
        "Name": "Services",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ef376930-703d-4d59-9d4e-869488082daa",
        "Name": "IMachineLearningService.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using MachineLearningIntegration.Models;\nusing System.Threading.Tasks;\n\nnamespace MachineLearningIntegration.Services\n{\n    public interface IMachineLearningService\n    {\n        Task<PredictionResponse> PredictAsync(PredictionRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3b343296-fc46-4855-ae94-4d49324bf853",
        "Name": "MachineLearningService.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using MachineLearningIntegration.ML;\nusing MachineLearningIntegration.Models;\nusing MachineLearningIntegration.Utilities;\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Configuration;\n\nnamespace MachineLearningIntegration.Services\n{\n    public class MachineLearningService : IMachineLearningService\n    {\n        private readonly Predictor _predictor;\n        private readonly ILoggingService _logger;\n        \n        public MachineLearningService(ILoggingService logger, IConfiguration configuration)\n        {\n            _logger = logger;\n            string modelPath = configuration.GetSection(\"MLSettings:ModelPath\").Value;\n            _predictor = new Predictor(ModelLoader.LoadModel(modelPath));\n        }\n        \n        public async Task<PredictionResponse> PredictAsync(PredictionRequest request)\n        {\n            try\n            {\n                var prediction = await Task.Run(() => _predictor.Predict(request));\n                return new PredictionResponse { Score = prediction.Score, Outcome = prediction.Outcome };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($\"Error during prediction: {ex.Message}\");\n                throw;\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "66c8ce87-3c6a-4d52-9517-f592ac608a7f",
        "Name": "Models",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ba48b966-910c-454c-9feb-b1d22b86d3c3",
        "Name": "PredictionRequest.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "namespace MachineLearningIntegration.Models\n{\n    public class PredictionRequest\n    {\n        public float Feature1 { get; set; }\n        public float Feature2 { get; set; }\n        public float Feature3 { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d2148694-52d9-46c8-9e1b-55e9503ab16d",
        "Name": "PredictionResponse.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "namespace MachineLearningIntegration.Models\n{\n    public class PredictionResponse\n    {\n        public float Score { get; set; }\n        public string Outcome { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "49d1728d-3ddf-4422-b093-ee60cd3865f0",
        "Name": "ML",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "150b3961-2da6-4868-b6ce-7d6d09bdcce4",
        "Name": "ModelLoader.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using System.IO;\nusing Microsoft.ML;\nusing Microsoft.ML.Data;\n\nnamespace MachineLearningIntegration.ML\n{\n    public static class ModelLoader\n    {\n        public static ITransformer LoadModel(string modelPath)\n        {\n            var mlContext = new MLContext();\n            using var stream = new FileStream(modelPath, FileMode.Open, FileAccess.Read, FileShare.Read);\n            return mlContext.Model.Load(stream, out DataViewSchema schema);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f0db7020-15f7-4c84-9990-eab203f90539",
        "Name": "Predictor.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using MachineLearningIntegration.Models;\nusing Microsoft.ML;\nusing Microsoft.ML.Data;\n\nnamespace MachineLearningIntegration.ML\n{\n    public class Predictor\n    {\n        private readonly ITransformer _model;\n        private readonly PredictionEngine<PredictionInput, PredictionOutput> _predictionEngine;\n        private readonly MLContext _mlContext;\n        \n        public Predictor(ITransformer model)\n        {\n            _model = model;\n            _mlContext = new MLContext();\n            _predictionEngine = _mlContext.Model.CreatePredictionEngine<PredictionInput, PredictionOutput>(_model);\n        }\n        \n        public PredictionOutput Predict(PredictionRequest request)\n        {\n            var input = new PredictionInput\n            {\n                Feature1 = request.Feature1,\n                Feature2 = request.Feature2,\n                Feature3 = request.Feature3\n            };\n            return _predictionEngine.Predict(input);\n        }\n    }\n\n    public class PredictionInput\n    {\n        public float Feature1 { get; set; }\n        public float Feature2 { get; set; }\n        public float Feature3 { get; set; }\n    }\n    \n    public class PredictionOutput\n    {\n        public float Score { get; set; }\n        public string Outcome { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "41b2ef5e-5e66-43e4-b518-9d571876fcb9",
        "Name": "Infrastructure",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2ee40813-5842-4189-9889-75ae9ea82c80",
        "Name": "ConfigurationManager.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using Microsoft.Extensions.Configuration;\n\nnamespace MachineLearningIntegration.Infrastructure\n{\n    public interface IConfigurationManager\n    {\n        string GetSetting(string key);\n    }\n\n    public class ConfigurationManager : IConfigurationManager\n    {\n        private readonly IConfiguration _configuration;\n        \n        public ConfigurationManager(IConfiguration configuration)\n        {\n            _configuration = configuration;\n        }\n        \n        public string GetSetting(string key)\n        {\n            return _configuration[key];\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "36ec5c10-292b-4371-a50b-1aae366ba306",
        "Name": "Utilities",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7d715732-5592-4081-b6df-518395dfbaa4",
        "Name": "LoggingService.cs",
        "ParentId": "24e45956-7069-4bcf-b3f2-83cd08513ca7",
        "Type": 1,
        "Text": "using System;\n\nnamespace MachineLearningIntegration.Utilities\n{\n    public interface ILoggingService\n    {\n        void LogInfo(string message);\n        void LogError(string message);\n    }\n    \n    public class LoggingService : ILoggingService\n    {\n        public void LogInfo(string message)\n        {\n            Console.WriteLine($\"INFO: {message}\");\n        }\n        \n        public void LogError(string message)\n        {\n            Console.WriteLine($\"ERROR: {message}\");\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "8afc10a0-bcbd-43a0-a92f-d820a0f07529",
    "Name": "AnomalyDetectionEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "2cde0c69-fecf-4526-8129-fe613ff8343d",
        "Name": "AnomalyDetectionEngine.csproj",
        "ParentId": "8afc10a0-bcbd-43a0-a92f-d820a0f07529",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"6.0.0\" />\n    <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.8.5\" />\n  </ItemGroup>\n</Project>",
        "Language": 0
      },
      {
        "Id": "49e26c08-7618-492b-815c-a0d3a09081fd",
        "Name": "Program.cs",
        "ParentId": "8afc10a0-bcbd-43a0-a92f-d820a0f07529",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing AnomalyDetectionEngine.Data;\nusing AnomalyDetectionEngine.Models;\nusing AnomalyDetectionEngine.Services;\nusing AnomalyDetectionEngine.Utilities;\n\nnamespace AnomalyDetectionEngine\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                // Load configuration\n                var config = ConfigurationManager.LoadConfiguration(\"appsettings.json\");\n                decimal anomalyThreshold = config.GetValue<decimal>(\"AnomalyThreshold\");\n\n                Logger.LogInfo(\"Anomaly Detection Engine started.\");\n\n                // Retrieve transactions from repository\n                ITransactionRepository repository = new TransactionRepository();\n                List<Transaction> transactions = repository.GetTransactions();\n\n                // Process anomaly detection\n                IAnomalyDetector detector = new AnomalyDetector(anomalyThreshold);\n                List<Transaction> anomalies = detector.DetectAnomalies(transactions);\n\n                if (anomalies.Count > 0)\n                {\n                    Logger.LogInfo($\"{anomalies.Count} anomalies detected.\");\n                    foreach (var tx in anomalies)\n                    {\n                        Logger.LogInfo($\"Anomaly detected: Transaction ID {tx.Id}, Amount {tx.Amount}, Account {tx.AccountId}\");\n                    }\n                }\n                else\n                {\n                    Logger.LogInfo(\"No anomalies detected.\");\n                }\n\n                Logger.LogInfo(\"Anomaly Detection Engine completed.\");\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError(\"Fatal error occurred in the engine.\", ex);\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "70b384b0-4aa2-4114-a6b5-e2d5b0c15434",
        "Name": "appsettings.json",
        "ParentId": "8afc10a0-bcbd-43a0-a92f-d820a0f07529",
        "Type": 1,
        "Text": "{\n  \"ConnectionString\": \"Server=YOUR_SERVER;Database=DigitalBank;User Id=YOUR_USER;Password=YOUR_PASSWORD;\",\n  \"AnomalyThreshold\": 10000.00\n}\n",
        "Language": 0
      },
      {
        "Id": "e57bdad9-8b8f-48f6-af73-1cd440c4c174",
        "Name": "Models",
        "ParentId": "8afc10a0-bcbd-43a0-a92f-d820a0f07529",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3436ccad-b50e-48ab-9a02-9cfb28a13f42",
        "Name": "Services",
        "ParentId": "8afc10a0-bcbd-43a0-a92f-d820a0f07529",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2bfc0c4b-7ec9-48c2-a5da-f0f2a7020078",
        "Name": "Data",
        "ParentId": "8afc10a0-bcbd-43a0-a92f-d820a0f07529",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "67db6cf2-4336-4807-9c6c-33ceab26abb3",
        "Name": "Utilities",
        "ParentId": "8afc10a0-bcbd-43a0-a92f-d820a0f07529",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "e7cff28d-9fb4-4b52-bfc8-7aea89b783d3",
    "Name": "CustomerSegmentationTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "928c0799-097a-48dc-9300-241cdce1c6c5",
        "Name": "Program.cs",
        "ParentId": "e7cff28d-9fb4-4b52-bfc8-7aea89b783d3",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing CustomerSegmentationTool.Models;\nusing CustomerSegmentationTool.Services;\nusing CustomerSegmentationTool.Data;\n\nnamespace CustomerSegmentationTool\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                CustomerRepository repository = new CustomerRepository();\n                List<Customer> customers = repository.GetCustomers();\n\n                CustomerSegmentationService segmentationService = new CustomerSegmentationService();\n                var segments = segmentationService.SegmentCustomers(customers);\n\n                foreach (var segment in segments)\n                {\n                    Console.WriteLine($\"Segment: {segment.Key}\");\n                    foreach (var customer in segment.Value)\n                    {\n                        Console.WriteLine($\"  {customer.FirstName} {customer.LastName} (Age: {customer.Age})\");\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "27c94327-4356-4a1b-abc2-00336f4d5d5d",
        "Name": "Models",
        "ParentId": "e7cff28d-9fb4-4b52-bfc8-7aea89b783d3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "18f70609-cb60-4a16-87f5-372e067ed8e3",
        "Name": "Services",
        "ParentId": "e7cff28d-9fb4-4b52-bfc8-7aea89b783d3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f3a2470c-f0c2-45ca-ba9c-dcb1b32207d8",
        "Name": "Data",
        "ParentId": "e7cff28d-9fb4-4b52-bfc8-7aea89b783d3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6f5b75fa-42db-436c-b55d-6cad476ed811",
        "Name": "Configurations",
        "ParentId": "e7cff28d-9fb4-4b52-bfc8-7aea89b783d3",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "77ab9515-8023-4b60-ba27-bf99ef7d6007",
        "Name": "Utils",
        "ParentId": "e7cff28d-9fb4-4b52-bfc8-7aea89b783d3",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "e8defb57-eed8-4163-b102-32cdd67dea80",
    "Name": "MarketingCampaignManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "5bd37251-055e-4734-9baf-0c1ff383fa08",
        "Name": "Program.cs",
        "ParentId": "e8defb57-eed8-4163-b102-32cdd67dea80",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace MarketingCampaignManager\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9a105fac-d1b9-4b4c-ad37-a3b5497a0188",
        "Name": "Startup.cs",
        "ParentId": "e8defb57-eed8-4163-b102-32cdd67dea80",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing MarketingCampaignManager.Interfaces;\nusing MarketingCampaignManager.Services;\nusing MarketingCampaignManager.Repositories;\n\nnamespace MarketingCampaignManager\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSingleton<ICampaignRepository, CampaignRepository>();\n            services.AddScoped<ICampaignService, CampaignService>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d5b6cfae-406d-4748-bdfe-c32040090604",
        "Name": "Controllers",
        "ParentId": "e8defb57-eed8-4163-b102-32cdd67dea80",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "baedc1c7-cc79-4a01-9990-17e304c0c329",
        "Name": "Models",
        "ParentId": "e8defb57-eed8-4163-b102-32cdd67dea80",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "61f5c55e-b26e-4db2-bb13-e7247a2c2565",
        "Name": "Interfaces",
        "ParentId": "e8defb57-eed8-4163-b102-32cdd67dea80",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6886bca2-ed8e-4694-8066-0f8c2aaed118",
        "Name": "Services",
        "ParentId": "e8defb57-eed8-4163-b102-32cdd67dea80",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6d950bdd-c3d4-465e-b8d4-67b8bf9bf835",
        "Name": "Repositories",
        "ParentId": "e8defb57-eed8-4163-b102-32cdd67dea80",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "46fdd497-b75e-4ea9-85e9-039d1874d33b",
        "Name": "Configurations",
        "ParentId": "e8defb57-eed8-4163-b102-32cdd67dea80",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "1953ed79-5b1a-4a3f-a84e-e1b0cc2bbdf6",
    "Name": "SocialMediaIntegrationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "16bc56d6-e5ef-4d43-8276-b8689e580b1e",
        "Name": "Program.cs",
        "ParentId": "1953ed79-5b1a-4a3f-a84e-e1b0cc2bbdf6",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SocialMediaIntegrationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f6793b92-10a1-4a50-87d6-ee4844b26a7c",
        "Name": "Startup.cs",
        "ParentId": "1953ed79-5b1a-4a3f-a84e-e1b0cc2bbdf6",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SocialMediaIntegrationService.Adapters;\nusing SocialMediaIntegrationService.Services;\n\nnamespace SocialMediaIntegrationService\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n        \n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n        \n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.Configure<SocialMediaSettings>(Configuration.GetSection(\"SocialMediaSettings\"));\n            services.AddHttpClient();\n            services.AddScoped<ISocialMediaService, SocialMediaService>();\n            services.AddScoped<IFacebookAdapter, FacebookAdapter>();\n            services.AddScoped<ITwitterAdapter, TwitterAdapter>();\n            services.AddScoped<IInstagramAdapter, InstagramAdapter>();\n            services.AddControllers();\n        }\n\n        public void Configure(IApplicationBuilder app, IHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            \n            app.UseRouting();\n            \n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d9d7a472-928e-46c4-b8fa-4c131bc9143c",
        "Name": "Controllers",
        "ParentId": "1953ed79-5b1a-4a3f-a84e-e1b0cc2bbdf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "da0e1928-5ccb-4c72-adb5-0db331f62820",
        "Name": "Services",
        "ParentId": "1953ed79-5b1a-4a3f-a84e-e1b0cc2bbdf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e271a883-9c74-4e71-a182-e7b0bc6f65ca",
        "Name": "Adapters",
        "ParentId": "1953ed79-5b1a-4a3f-a84e-e1b0cc2bbdf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "72656ea9-7ff4-431e-81fe-4b5ad47b8406",
        "Name": "Models",
        "ParentId": "1953ed79-5b1a-4a3f-a84e-e1b0cc2bbdf6",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "589dff17-16b4-4393-82a5-513b3cc996f4",
        "Name": "Configurations",
        "ParentId": "1953ed79-5b1a-4a3f-a84e-e1b0cc2bbdf6",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "624dc139-8f90-4525-864f-2a6075ee4639",
    "Name": "SMSGatewayConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "92ce6a50-2dc9-4593-9467-d54201b6d75b",
        "Name": "Program.cs",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing SMSGatewayConnector.Configuration;\nusing SMSGatewayConnector.Models;\nusing SMSGatewayConnector.Services;\nusing SMSGatewayConnector.Adapters;\n\nnamespace SMSGatewayConnector\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            using IHost host = CreateHostBuilder(args).Build();\n\n            var smsService = host.Services.GetRequiredService<SmsGatewayService>();\n\n            var message = new SmsMessage\n            {\n                To = \"+1234567890\",\n                Body = \"Your OTP is 123456\",\n                ScheduledTime = null\n            };\n\n            var result = await smsService.SendSmsAsync(message);\n            Console.WriteLine($\"Message sent status: {result.IsSuccess}\");\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration((hostingContext, config) =>\n                {\n                    config.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true);\n                })\n                .ConfigureServices((context, services) =>\n                {\n                    services.Configure<SmsGatewayOptions>(context.Configuration.GetSection(\"SmsGateway\"));\n\n                    // Register the Twilio adapter as ISmsGateway implementation\n                    services.AddTransient<Interfaces.ISmsGateway, TwilioSmsGateway>();\n                    services.AddTransient<SmsGatewayService>();\n\n                    services.AddHttpClient(\"SmsGatewayClient\");\n                })\n                .ConfigureLogging(logging =>\n                {\n                    logging.ClearProviders();\n                    logging.AddConsole();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "73fd8d4d-2014-47ce-a6f9-51797618e62b",
        "Name": "appsettings.json",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "{\n  \"SmsGateway\": {\n    \"Provider\": \"Twilio\",\n    \"ApiKey\": \"YourApiKey\",\n    \"ApiSecret\": \"YourApiSecret\",\n    \"BaseUrl\": \"https://api.twilio.com\"\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "41268014-6b1c-4eb8-a3f3-36773b5528af",
        "Name": "Models",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "34d9e866-8ac9-49fc-85e4-c042bfe2b679",
        "Name": "SmsMessage.cs",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "namespace SMSGatewayConnector.Models\n{\n    public class SmsMessage\n    {\n        public string To { get; set; }\n        public string Body { get; set; }\n        public System.DateTime? ScheduledTime { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7d68f988-f0eb-45b8-b208-3922b2366426",
        "Name": "GatewayResponse.cs",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "namespace SMSGatewayConnector.Models\n{\n    public class GatewayResponse\n    {\n        public bool IsSuccess { get; set; }\n        public string MessageId { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9e3a13c9-44cd-409a-9f88-49e453c52054",
        "Name": "Configuration",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "076cb7ff-9dc4-4f4a-a33c-c8a552cdb356",
        "Name": "SmsGatewayOptions.cs",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "namespace SMSGatewayConnector.Configuration\n{\n    public class SmsGatewayOptions\n    {\n        public string Provider { get; set; }\n        public string ApiKey { get; set; }\n        public string ApiSecret { get; set; }\n        public string BaseUrl { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "340eab5d-0c3b-49e2-a471-8996d5656676",
        "Name": "Interfaces",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f698e885-5545-4cf5-9a22-7ec71eae0f81",
        "Name": "ISmsGateway.cs",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing SMSGatewayConnector.Models;\n\nnamespace SMSGatewayConnector.Interfaces\n{\n    public interface ISmsGateway\n    {\n        Task<GatewayResponse> SendSmsAsync(SmsMessage message);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "66c1ffe5-309a-4826-ac86-8aea9e39fbda",
        "Name": "Adapters",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "7478809e-5b18-43ac-b0ba-ff630523fc7e",
        "Name": "TwilioSmsGateway.cs",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing SMSGatewayConnector.Configuration;\nusing SMSGatewayConnector.Interfaces;\nusing SMSGatewayConnector.Models;\nusing System.Net.Http.Headers;\nusing System.Text.Json;\n\nnamespace SMSGatewayConnector.Adapters\n{\n    public class TwilioSmsGateway : ISmsGateway\n    {\n        private readonly HttpClient _httpClient;\n        private readonly SmsGatewayOptions _options;\n        private readonly ILogger<TwilioSmsGateway> _logger;\n\n        public TwilioSmsGateway(IHttpClientFactory httpClientFactory, IOptions<SmsGatewayOptions> options, ILogger<TwilioSmsGateway> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient(\"SmsGatewayClient\");\n            _options = options.Value;\n            _logger = logger;\n            _httpClient.BaseAddress = new Uri(_options.BaseUrl);\n            var authToken = Convert.ToBase64String(Encoding.ASCII.GetBytes($\"{_options.ApiKey}:{_options.ApiSecret}\"));\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Basic\", authToken);\n        }\n\n        public async Task<GatewayResponse> SendSmsAsync(SmsMessage message)\n        {\n            var payload = new\n            {\n                to = message.To,\n                body = message.Body,\n                schedule = message.ScheduledTime?.ToString(\"o\")\n            };\n            \n            var json = JsonSerializer.Serialize(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            try\n            {\n                var response = await _httpClient.PostAsync(\"/sms/send\", content);\n                if (response.IsSuccessStatusCode)\n                {\n                    var responseContent = await response.Content.ReadAsStringAsync();\n                    var result = JsonSerializer.Deserialize<GatewayResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                    return result ?? new GatewayResponse { IsSuccess = true };\n                }\n                else\n                {\n                    _logger.LogError($\"Failed to send SMS. Status Code: {response.StatusCode}\");\n                    return new GatewayResponse { IsSuccess = false, ErrorMessage = $\"HTTP Error: {response.StatusCode}\" };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception occurred while sending SMS\");\n                return new GatewayResponse { IsSuccess = false, ErrorMessage = ex.Message };\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "f4b35eba-e1bd-433a-a74a-8b15f9b7a57e",
        "Name": "NexmoSmsGateway.cs",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing SMSGatewayConnector.Configuration;\nusing SMSGatewayConnector.Interfaces;\nusing SMSGatewayConnector.Models;\nusing System.Text.Json;\n\nnamespace SMSGatewayConnector.Adapters\n{\n    public class NexmoSmsGateway : ISmsGateway\n    {\n        private readonly HttpClient _httpClient;\n        private readonly SmsGatewayOptions _options;\n        private readonly ILogger<NexmoSmsGateway> _logger;\n\n        public NexmoSmsGateway(IHttpClientFactory httpClientFactory, IOptions<SmsGatewayOptions> options, ILogger<NexmoSmsGateway> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient(\"SmsGatewayClient\");\n            _options = options.Value;\n            _logger = logger;\n            _httpClient.BaseAddress = new Uri(_options.BaseUrl);\n            // Additional Nexmo-specific configuration can be added here\n        }\n\n        public async Task<GatewayResponse> SendSmsAsync(SmsMessage message)\n        {\n            var payload = new\n            {\n                to = message.To,\n                text = message.Body,\n                timestamp = message.ScheduledTime?.ToString(\"o\")\n            };\n\n            var json = JsonSerializer.Serialize(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            try\n            {\n                var response = await _httpClient.PostAsync(\"/sms/json\", content);\n                if (response.IsSuccessStatusCode)\n                {\n                    var responseContent = await response.Content.ReadAsStringAsync();\n                    var result = JsonSerializer.Deserialize<GatewayResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                    return result ?? new GatewayResponse { IsSuccess = true };\n                }\n                else\n                {\n                    _logger.LogError($\"Failed to send SMS via Nexmo. Status Code: {response.StatusCode}\");\n                    return new GatewayResponse { IsSuccess = false, ErrorMessage = $\"HTTP Error: {response.StatusCode}\" };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception occurred while sending SMS via Nexmo\");\n                return new GatewayResponse { IsSuccess = false, ErrorMessage = ex.Message };\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a1e0a044-3f53-40a0-981a-e763711c65d0",
        "Name": "Services",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "33b010be-a291-4b2f-a203-3643a6d0db99",
        "Name": "SmsGatewayService.cs",
        "ParentId": "624dc139-8f90-4525-864f-2a6075ee4639",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing SMSGatewayConnector.Interfaces;\nusing SMSGatewayConnector.Models;\n\nnamespace SMSGatewayConnector.Services\n{\n    public class SmsGatewayService\n    {\n        private readonly ISmsGateway _smsGateway;\n\n        public SmsGatewayService(ISmsGateway smsGateway)\n        {\n            _smsGateway = smsGateway;\n        }\n\n        public async Task<GatewayResponse> SendSmsAsync(SmsMessage message)\n        {\n            // Additional processing, logging or validation logic can be implemented here\n            return await _smsGateway.SendSmsAsync(message);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
    "Name": "ComplianceDashboard",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "6a32fe59-d6de-467a-abd6-e23ed02ec61c",
        "Name": "Program.cs",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing ComplianceDashboard.Data;\nusing ComplianceDashboard.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\n\n// Configure DbContext with SQL Server. Adjust the connection string in appsettings.json for production.\nbuilder.Services.AddDbContext<ComplianceDbContext>(options =>\n    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\")));\n\n// Register business services.\nbuilder.Services.AddScoped<IComplianceService, ComplianceService>();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\napp.UseHttpsRedirection();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "8ab4d124-2462-43c9-b30f-a16fc83f16a8",
        "Name": "appsettings.json",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=ComplianceDb;Trusted_Connection=True;MultipleActiveResultSets=true\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  }\n}",
        "Language": 0
      },
      {
        "Id": "8982ea2e-3953-454c-aa44-3fb43ed16dba",
        "Name": "Controllers",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8aadfb1e-de06-40f3-9ca0-f8be3eec3846",
        "Name": "ComplianceController.cs",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing ComplianceDashboard.Services;\n\nnamespace ComplianceDashboard.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ComplianceController : ControllerBase\n    {\n        private readonly IComplianceService _complianceService;\n\n        public ComplianceController(IComplianceService complianceService)\n        {\n            _complianceService = complianceService;\n        }\n\n        [HttpGet(\"metrics\")]\n        public async Task<IActionResult> GetComplianceMetrics()\n        {\n            var metrics = await _complianceService.GetComplianceMetricsAsync();\n            return Ok(metrics);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "0491379a-9bd3-4dc4-a0a4-6eb0bde3939c",
        "Name": "Models",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "8ba5108b-aaaf-4796-aef6-07820f20deec",
        "Name": "ComplianceMetric.cs",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 1,
        "Text": "using System;\n\nnamespace ComplianceDashboard.Models\n{\n    public class ComplianceMetric\n    {\n        public int Id { get; set; }\n        public string Regulation { get; set; }\n        public decimal ComplianceScore { get; set; }\n        public DateTime ReportDate { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b8f65c08-7798-4cc5-815d-d2aed277c578",
        "Name": "Services",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a0bd7aec-b2bf-486e-9ea8-87c6af0fb81c",
        "Name": "IComplianceService.cs",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing ComplianceDashboard.Models;\n\nnamespace ComplianceDashboard.Services\n{\n    public interface IComplianceService\n    {\n        Task<IEnumerable<ComplianceMetric>> GetComplianceMetricsAsync();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d513c2f3-83f3-4632-a57b-c6c75c9a016c",
        "Name": "ComplianceService.cs",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 1,
        "Text": "using ComplianceDashboard.Models;\nusing ComplianceDashboard.Data;\nusing Microsoft.EntityFrameworkCore;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System;\n\nnamespace ComplianceDashboard.Services\n{\n    public class ComplianceService : IComplianceService\n    {\n        private readonly ComplianceDbContext _context;\n\n        public ComplianceService(ComplianceDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<IEnumerable<ComplianceMetric>> GetComplianceMetricsAsync()\n        {\n            var metrics = await _context.ComplianceMetrics.ToListAsync();\n\n            foreach (var metric in metrics)\n            {\n                metric.ComplianceScore = CalculateComplianceScore(metric);\n            }\n\n            return metrics;\n        }\n\n        private decimal CalculateComplianceScore(ComplianceMetric metric)\n        {\n            var daysOld = (DateTime.UtcNow - metric.ReportDate).Days;\n            var adjustedScore = metric.ComplianceScore - daysOld * 0.1m;\n            return Math.Max(adjustedScore, 0);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "5ec5feb3-8140-4558-9117-a7881f601cd8",
        "Name": "Data",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "692730b7-3f30-4102-aa66-f705a84aa6b4",
        "Name": "ComplianceDbContext.cs",
        "ParentId": "7d7be2ba-e9d5-44e7-ab85-e91fe093075c",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing ComplianceDashboard.Models;\nusing System;\n\nnamespace ComplianceDashboard.Data\n{\n    public class ComplianceDbContext : DbContext\n    {\n        public ComplianceDbContext(DbContextOptions<ComplianceDbContext> options)\n            : base(options)\n        {\n        }\n\n        public DbSet<ComplianceMetric> ComplianceMetrics { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<ComplianceMetric>(entity =>\n            {\n                entity.HasKey(e => e.Id);\n                entity.Property(e => e.Regulation)\n                      .IsRequired()\n                      .HasMaxLength(100);\n                entity.Property(e => e.ComplianceScore)\n                      .HasColumnType(\"decimal(18,2)\");\n                entity.Property(e => e.ReportDate)\n                      .IsRequired();\n            });\n\n            // Seed initial data for production setup\n            modelBuilder.Entity<ComplianceMetric>().HasData(\n                new ComplianceMetric { Id = 1, Regulation = \"AML\", ComplianceScore = 95.5m, ReportDate = DateTime.UtcNow.AddDays(-5) },\n                new ComplianceMetric { Id = 2, Regulation = \"KYC\", ComplianceScore = 88.0m, ReportDate = DateTime.UtcNow.AddDays(-3) }\n            );\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "e1bdf167-c0a4-4ad7-8f39-c83f529f32ed",
    "Name": "InterestAccrualCalculator",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "c259a714-c946-4773-9c49-45d1ba960fb5",
        "Name": "Program.cs",
        "ParentId": "e1bdf167-c0a4-4ad7-8f39-c83f529f32ed",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing InterestAccrualCalculator.Models;\nusing InterestAccrualCalculator.Services;\nusing InterestAccrualCalculator.Configuration;\nusing InterestAccrualCalculator.Infrastructure;\n\nnamespace InterestAccrualCalculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Setup configuration with daily accrual frequency\n            var interestConfig = new InterestConfiguration(1);\n            \n            // Initialize interest accrual service\n            var accrualService = new InterestAccrualService();\n\n            // Sample data: In a production scenario, these would be fetched from a database\n            var savingsAccounts = new List<SavingsAccount>\n            {\n                new SavingsAccount(Guid.NewGuid(), 10000m, 1.5m, DateTime.UtcNow.AddDays(-5))\n            };\n\n            var loanAccounts = new List<LoanAccount>\n            {\n                new LoanAccount(Guid.NewGuid(), 5000m, 5.0m, DateTime.UtcNow.AddDays(-5))\n            };\n\n            DateTime currentDate = DateTime.UtcNow;\n\n            // Process interest accrual\n            accrualService.ProcessSavingsAccounts(savingsAccounts, currentDate);\n            Logger.Log(\"Processed savings account interest accrual.\");\n\n            accrualService.ProcessLoanAccounts(loanAccounts, currentDate);\n            Logger.Log(\"Processed loan account interest accrual.\");\n\n            // Output updated account information\n            foreach (var account in savingsAccounts)\n            {\n                Logger.Log($\"Savings Account {account.AccountId} new balance: {account.Balance}\");\n            }\n\n            foreach (var account in loanAccounts)\n            {\n                Logger.Log($\"Loan Account {account.AccountId} accrued interest: {account.AccruedInterest}\");\n            }\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e3b10611-4f1e-45b8-805a-c59457e87973",
        "Name": "Calculator",
        "ParentId": "e1bdf167-c0a4-4ad7-8f39-c83f529f32ed",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e011cd11-beb5-4fec-a107-cecd0cb36d5b",
        "Name": "Models",
        "ParentId": "e1bdf167-c0a4-4ad7-8f39-c83f529f32ed",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "dacce69d-f963-47e0-a423-a8a4b4ef2e4e",
        "Name": "Services",
        "ParentId": "e1bdf167-c0a4-4ad7-8f39-c83f529f32ed",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "76e37b63-6f96-42c2-b2bf-9d0525ce3f5a",
        "Name": "Configuration",
        "ParentId": "e1bdf167-c0a4-4ad7-8f39-c83f529f32ed",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e9f01755-24ed-4d7f-bceb-0d076f183328",
        "Name": "Infrastructure",
        "ParentId": "e1bdf167-c0a4-4ad7-8f39-c83f529f32ed",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
    "Name": "DividendDistributionManager",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "17e6ec64-ec7b-4edb-bc81-599dfeddd604",
        "Name": "Program.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace DividendDistributionManager\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "49265585-99d9-4bcf-9af2-0ce6e80fefa4",
        "Name": "Startup.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DividendDistributionManager\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            // Dependency Injection for production services\n            services.AddSingleton<Infrastructure.LoggingService>();\n            services.AddSingleton<Infrastructure.NotificationService>();\n            services.AddSingleton<Infrastructure.ConfigurationManager>();\n            services.AddScoped<Services.DividendDistributionService>();\n            services.AddScoped<Data.DividendDistributionRepository>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "e12017bc-473f-4fd0-bd0e-7d6f33fa880c",
        "Name": "Controllers",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6bad2dfb-869f-4ef1-87a9-34fb1efd71af",
        "Name": "DividendDistributionController.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing DividendDistributionManager.Services;\nusing DividendDistributionManager.Domain.Entities;\nusing System;\nusing System.Collections.Generic;\n\nnamespace DividendDistributionManager.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class DividendDistributionController : ControllerBase\n    {\n        private readonly DividendDistributionService _service;\n\n        public DividendDistributionController(DividendDistributionService service)\n        {\n            _service = service;\n        }\n\n        [HttpPost(\"distribute\")]\n        public IActionResult DistributeDividends([FromBody] List<Dividend> dividends)\n        {\n            var result = _service.DistributeDividends(dividends);\n            if (result.Success)\n                return Ok(result);\n            else\n                return BadRequest(result);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "db5e57f4-cc1c-486f-a13a-4b7b68f8fd36",
        "Name": "Domain",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "612e453d-73b7-4c39-87d6-c5cd148a9c14",
        "Name": "Entities",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "004ef9bd-8067-400f-bf80-b40ac493dadc",
        "Name": "Dividend.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using System;\n\nnamespace DividendDistributionManager.Domain.Entities\n{\n    public class Dividend\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public Guid InvestorId { get; set; }\n        public decimal Amount { get; set; }\n        public DateTime? DistributionDate { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "14d05db3-6714-4597-b38e-af3d4947dc7e",
        "Name": "Investor.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using System;\n\nnamespace DividendDistributionManager.Domain.Entities\n{\n    public class Investor\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public string BankAccountNumber { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "4efccdf5-2a88-4336-8a56-96bd1cc1fe32",
        "Name": "Interfaces",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3251636c-a15e-414e-9d73-6a7d6bc3156f",
        "Name": "IRepository.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using System.Collections.Generic;\n\nnamespace DividendDistributionManager.Domain.Interfaces\n{\n    public interface IRepository<T>\n    {\n        void Add(T entity);\n        IEnumerable<T> GetAll();\n    }\n}",
        "Language": 0
      },
      {
        "Id": "4f445a11-fee3-4f53-8ae3-03c857fbbe1c",
        "Name": "Services",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "271f88f6-74dd-4362-a106-71ada8486240",
        "Name": "DividendDistributionService.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using DividendDistributionManager.Domain.Entities;\nusing DividendDistributionManager.Data;\nusing DividendDistributionManager.Infrastructure;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace DividendDistributionManager.Services\n{\n    public class DividendDistributionService\n    {\n        private readonly DividendDistributionRepository _repository;\n        private readonly LoggingService _logger;\n        private readonly NotificationService _notifier;\n\n        public DividendDistributionService(DividendDistributionRepository repository, LoggingService logger, NotificationService notifier)\n        {\n            _repository = repository;\n            _logger = logger;\n            _notifier = notifier;\n        }\n\n        public DistributionResult DistributeDividends(List<Dividend> dividends)\n        {\n            if (dividends == null || !dividends.Any())\n            {\n                return new DistributionResult { Success = false, Message = \"No dividends provided\" };\n            }\n\n            try\n            {\n                foreach (var dividend in dividends)\n                {\n                    // Calculate distribution logic\n                    if (dividend.DistributionDate == null)\n                    {\n                        dividend.DistributionDate = DateTime.UtcNow;\n                    }\n\n                    // Persist the distribution record\n                    _repository.SaveDividend(dividend);\n\n                    // Notify the investor about the distribution\n                    _notifier.SendNotification(dividend.InvestorId, $\"Dividend of {dividend.Amount:C} distributed on {dividend.DistributionDate}.\");\n                }\n                \n                _logger.LogInfo(\"Dividends distributed successfully.\");\n                return new DistributionResult { Success = true, Message = \"Dividends distributed successfully.\" };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error during dividend distribution: \" + ex.Message);\n                return new DistributionResult { Success = false, Message = \"Distribution failed due to internal error.\" };\n            }\n        }\n    }\n\n    public class DistributionResult\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "b7610c33-ccd0-4518-852b-abcec42fb52e",
        "Name": "Data",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "20741271-456a-4926-8173-3b353abfb555",
        "Name": "DividendDistributionRepository.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using DividendDistributionManager.Domain.Entities;\nusing System.Collections.Generic;\n\nnamespace DividendDistributionManager.Data\n{\n    public class DividendDistributionRepository\n    {\n        // In production, this would interface with a database\n        private static readonly List<Dividend> _dividends = new List<Dividend>();\n\n        public void SaveDividend(Dividend dividend)\n        {\n            _dividends.Add(dividend);\n        }\n\n        public IEnumerable<Dividend> GetAllDividends()\n        {\n            return _dividends;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "45023dfa-7405-4539-926b-73d2b9bec171",
        "Name": "Infrastructure",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f4e660dc-a0af-48cb-911c-f6153e3b36a2",
        "Name": "LoggingService.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using System;\n\nnamespace DividendDistributionManager.Infrastructure\n{\n    public class LoggingService\n    {\n        public void LogInfo(string message)\n        {\n            // Implement production-ready logging\n            Console.WriteLine($\"[INFO] {message}\");\n        }\n\n        public void LogError(string message)\n        {\n            // Implement error logging with production diagnostics\n            Console.WriteLine($\"[ERROR] {message}\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "27c5e73d-f0b0-44d4-91e9-ce5ae2099935",
        "Name": "NotificationService.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using System;\n\nnamespace DividendDistributionManager.Infrastructure\n{\n    public class NotificationService\n    {\n        public void SendNotification(Guid investorId, string message)\n        {\n            // Implement integration with email/SMS services\n            Console.WriteLine($\"Notification sent to Investor {investorId}: {message}\");\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "1016ad36-f5a7-419a-ae42-a8a81c1ac541",
        "Name": "ConfigurationManager.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using Microsoft.Extensions.Configuration;\n\nnamespace DividendDistributionManager.Infrastructure\n{\n    public class ConfigurationManager\n    {\n        public IConfiguration Configuration { get; }\n\n        public ConfigurationManager(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public string GetConfigurationValue(string key)\n        {\n            return Configuration[key];\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "81bb6784-c442-477d-9095-0a6f7eb52e47",
        "Name": "Integration",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "29ea3ccd-4fab-4422-b15b-5c62beaa5578",
        "Name": "ExternalPaymentAdapter.cs",
        "ParentId": "02916c3b-40d9-4de3-8f00-666a2efc7cdb",
        "Type": 1,
        "Text": "using System;\n\nnamespace DividendDistributionManager.Integration\n{\n    public class ExternalPaymentAdapter\n    {\n        // Processes payments via an external gateway for dividend settlements\n        public bool ProcessPayment(Guid investorId, decimal amount)\n        {\n            // A robust production implementation would involve secure API calls, error handling, and transaction logging\n            Console.WriteLine($\"Processing payment of {amount:C} for investor {investorId}\");\n            return true;\n        }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "49003883-027b-498a-af43-b1601797f033",
    "Name": "WealthManagementPlatform",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "713fbcab-3175-40ea-92c3-a9e14f5f7607",
        "Name": "Program.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace WealthManagementPlatform\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d7fcb587-116a-48af-a186-ba4ec67bab34",
        "Name": "Startup.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing WealthManagementPlatform.Data;\nusing Microsoft.EntityFrameworkCore;\nusing WealthManagementPlatform.Services;\nusing WealthManagementPlatform.Repositories;\nusing WealthManagementPlatform.Configuration;\n\nnamespace WealthManagementPlatform\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddDbContext<BankContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n            // Register services and repositories\n            services.AddScoped<IAccountService, AccountService>();\n            services.AddScoped<IWealthService, WealthService>();\n            services.AddScoped<IKYCService, KYCService>();\n            services.AddScoped<IAnalyticsService, AnalyticsService>();\n            services.AddScoped<IIntegrationService, IntegrationService>();\n\n            services.AddScoped<IUserRepository, UserRepository>();\n            services.AddScoped<IAssetRepository, AssetRepository>();\n\n            // Configuration binding\n            services.Configure<AppSettings>(Configuration.GetSection(\"AppSettings\"));\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n            app.UseAuthorization();\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "12eb3bfe-0388-4d89-8daa-0ddc3bcf7652",
        "Name": "Controllers",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "371573d7-c644-461a-bc2a-865c4f29e7c2",
        "Name": "AccountController.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing WealthManagementPlatform.Services;\nusing WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AccountController : ControllerBase\n    {\n        private readonly IAccountService _accountService;\n\n        public AccountController(IAccountService accountService)\n        {\n            _accountService = accountService;\n        }\n\n        [HttpPost(\"login\")]\n        public IActionResult Login([FromBody] LoginRequest request)\n        {\n            var result = _accountService.Login(request.Email, request.Password);\n            if (result == null)\n                return Unauthorized();\n            return Ok(result);\n        }\n\n        [HttpPost(\"register\")]\n        public IActionResult Register([FromBody] RegisterRequest request)\n        {\n            var user = _accountService.Register(request);\n            if (user == null)\n                return BadRequest(\"Registration failed.\");\n            return Ok(user);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "93a8a655-f5c1-4d36-9038-f314e68a2667",
        "Name": "AssetController.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing WealthManagementPlatform.Services;\nusing WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AssetController : ControllerBase\n    {\n        private readonly IWealthService _wealthService;\n\n        public AssetController(IWealthService wealthService)\n        {\n            _wealthService = wealthService;\n        }\n\n        [HttpGet(\"portfolio/{userId}\")]\n        public IActionResult GetPortfolio(int userId)\n        {\n            var portfolio = _wealthService.GetPortfolio(userId);\n            if (portfolio == null)\n                return NotFound();\n            return Ok(portfolio);\n        }\n\n        [HttpPost(\"transaction\")]\n        public IActionResult ExecuteTransaction([FromBody] TransactionRequest request)\n        {\n            var transactionResult = _wealthService.ProcessTransaction(request);\n            if (!transactionResult.Success)\n                return BadRequest(transactionResult.Message);\n            return Ok(transactionResult);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7f07a62f-227b-49fd-9e3e-cfe79bcfa684",
        "Name": "Models",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f8b2a3e4-42b1-412e-a5bc-eff9d60e8a4a",
        "Name": "User.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Models\n{\n    public class User\n    {\n        public int Id { get; set; }\n        public string Email { get; set; }\n        public string PasswordHash { get; set; }\n        public string FullName { get; set; }\n        public bool IsVerified { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c3d27609-bff6-4e5d-8d69-aa00a7d08484",
        "Name": "Asset.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Models\n{\n    public class Asset\n    {\n        public int Id { get; set; }\n        public int UserId { get; set; }\n        public string AssetType { get; set; }\n        public decimal Value { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "9d3014a7-29c4-4137-914d-3f473b79f5e8",
        "Name": "Portfolio.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using System.Collections.Generic;\n\nnamespace WealthManagementPlatform.Models\n{\n    public class Portfolio\n    {\n        public int UserId { get; set; }\n        public List<Asset> Assets { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6feb4de3-39a6-43d8-b03d-97a2dbe0f801",
        "Name": "Transaction.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using System;\n\nnamespace WealthManagementPlatform.Models\n{\n    public class Transaction\n    {\n        public int Id { get; set; }\n        public int UserId { get; set; }\n        public decimal Amount { get; set; }\n        public string TransactionType { get; set; } // Deposit or Withdrawal\n        public DateTime TransactionDate { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7011717b-f28c-4d4b-bd39-e6af6e0adc42",
        "Name": "RiskAssessment.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Models\n{\n    public class RiskAssessment\n    {\n        public int Id { get; set; }\n        public int UserId { get; set; }\n        public int Score { get; set; }\n        public string Assessment { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "859ec22e-987b-4bbe-ae30-132e585be2b0",
        "Name": "LoginRequest.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Models\n{\n    public class LoginRequest\n    {\n        public string Email { get; set; }\n        public string Password { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0c0d804b-2adb-4dfd-855e-66211b4d5374",
        "Name": "RegisterRequest.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Models\n{\n    public class RegisterRequest\n    {\n        public string Email { get; set; }\n        public string Password { get; set; }\n        public string FullName { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b95e1f8b-e8ea-4677-9cf6-70e0d2054a38",
        "Name": "TransactionRequest.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Models\n{\n    public class TransactionRequest\n    {\n        public int UserId { get; set; }\n        public decimal Amount { get; set; }\n        public string TransactionType { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "2d8a6e9b-0908-4b86-afa8-3f6aac808678",
        "Name": "Services",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "733a7d88-8fb0-4f88-a2e6-c2b7da02bec0",
        "Name": "IAccountService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Services\n{\n    public interface IAccountService\n    {\n        User Login(string email, string password);\n        User Register(RegisterRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "408fdaaf-2968-4083-b613-019465fe7c1e",
        "Name": "AccountService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\nusing WealthManagementPlatform.Repositories;\nusing WealthManagementPlatform.Utilities;\n\nnamespace WealthManagementPlatform.Services\n{\n    public class AccountService : IAccountService\n    {\n        private readonly IUserRepository _userRepository;\n        private readonly IKYCService _kycService;\n\n        public AccountService(IUserRepository userRepository, IKYCService kycService)\n        {\n            _userRepository = userRepository;\n            _kycService = kycService;\n        }\n\n        public User Login(string email, string password)\n        {\n            var user = _userRepository.GetByEmail(email);\n            if (user != null && EncryptionUtil.VerifyHash(password, user.PasswordHash))\n                return user;\n            return null;\n        }\n\n        public User Register(RegisterRequest request)\n        {\n            if (_userRepository.GetByEmail(request.Email) != null)\n                return null;\n\n            var passwordHash = EncryptionUtil.HashPassword(request.Password);\n            var newUser = new User\n            {\n                Email = request.Email,\n                PasswordHash = passwordHash,\n                FullName = request.FullName,\n                IsVerified = false\n            };\n\n            // KYC verification process\n            if (!_kycService.VerifyUser(newUser))\n                return null;\n\n            _userRepository.Add(newUser);\n            return newUser;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "095d397a-51f3-4400-aa9a-616a142a63c5",
        "Name": "IWealthService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Services\n{\n    public interface IWealthService\n    {\n        Portfolio GetPortfolio(int userId);\n        TransactionResult ProcessTransaction(TransactionRequest request);\n    }\n\n    public class TransactionResult\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public Transaction Transaction { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a29c01a2-0d52-45d8-8e5b-b5e4fafd9b3e",
        "Name": "WealthService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\nusing WealthManagementPlatform.Repositories;\nusing System;\nusing System.Linq;\n\nnamespace WealthManagementPlatform.Services\n{\n    public class WealthService : IWealthService\n    {\n        private readonly IUserRepository _userRepository;\n        private readonly IAssetRepository _assetRepository;\n\n        public WealthService(IUserRepository userRepository, IAssetRepository assetRepository)\n        {\n            _userRepository = userRepository;\n            _assetRepository = assetRepository;\n        }\n\n        public Portfolio GetPortfolio(int userId)\n        {\n            var assets = _assetRepository.GetAssetsByUser(userId);\n            return new Portfolio { UserId = userId, Assets = assets.ToList() };\n        }\n\n        public TransactionResult ProcessTransaction(TransactionRequest request)\n        {\n            var user = _userRepository.GetById(request.UserId);\n            if (user == null)\n                return new TransactionResult { Success = false, Message = \"User not found.\" };\n\n            if (request.TransactionType != \"Deposit\" && request.TransactionType != \"Withdrawal\")\n                return new TransactionResult { Success = false, Message = \"Invalid transaction type.\" };\n\n            var transaction = new Transaction\n            {\n                UserId = request.UserId,\n                Amount = request.Amount,\n                TransactionType = request.TransactionType,\n                TransactionDate = DateTime.UtcNow\n            };\n\n            _assetRepository.RecordTransaction(transaction);\n            return new TransactionResult { Success = true, Message = \"Transaction processed successfully.\", Transaction = transaction };\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c274e3e9-cd9a-48ad-b43a-7d930aee1c06",
        "Name": "IKYCService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Services\n{\n    public interface IKYCService\n    {\n        bool VerifyUser(User user);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "7e58c078-72a3-4239-b8a4-2818d834654a",
        "Name": "KYCService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Services\n{\n    public class KYCService : IKYCService\n    {\n        public bool VerifyUser(User user)\n        {\n            // Implement production-ready KYC verification logic here\n            return !string.IsNullOrEmpty(user.Email) && user.Email.Contains(\"@\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "2166a4cc-77b7-494c-a46a-ef42d1b490dc",
        "Name": "IAnalyticsService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Services\n{\n    public interface IAnalyticsService\n    {\n        object GetAnalyticsReport();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a4d7c5a8-0b44-4da9-8d9c-b9abd9940647",
        "Name": "AnalyticsService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using System;\n\nnamespace WealthManagementPlatform.Services\n{\n    public class AnalyticsService : IAnalyticsService\n    {\n        public object GetAnalyticsReport()\n        {\n            // Implement analytics logic (asset performance, market trends, etc.)\n            return new { ReportDate = DateTime.UtcNow, Summary = \"Analytics report data\" };\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "6cf3c320-a87e-439d-b66a-c8597f40eeff",
        "Name": "IIntegrationService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Services\n{\n    public interface IIntegrationService\n    {\n        bool IntegrateWithExternalSystem(object data);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3689a643-9bf7-4577-8ee5-da145d8fe6f4",
        "Name": "IntegrationService.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Services\n{\n    public class IntegrationService : IIntegrationService\n    {\n        public bool IntegrateWithExternalSystem(object data)\n        {\n            // Implement integration with third-party systems\n            return true;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "47e77b43-adb7-4707-9c83-14482fe92680",
        "Name": "Repositories",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "15726996-9973-475b-b1a2-af8c41db1f7f",
        "Name": "IUserRepository.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Repositories\n{\n    public interface IUserRepository\n    {\n        User GetByEmail(string email);\n        User GetById(int id);\n        void Add(User user);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8af2be1e-f3b6-4046-af8a-08ed2820f673",
        "Name": "UserRepository.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\nusing WealthManagementPlatform.Data;\nusing System.Linq;\n\nnamespace WealthManagementPlatform.Repositories\n{\n    public class UserRepository : IUserRepository\n    {\n        private readonly BankContext _context;\n\n        public UserRepository(BankContext context)\n        {\n            _context = context;\n        }\n\n        public User GetByEmail(string email)\n        {\n            return _context.Users.FirstOrDefault(u => u.Email == email);\n        }\n\n        public User GetById(int id)\n        {\n            return _context.Users.FirstOrDefault(u => u.Id == id);\n        }\n\n        public void Add(User user)\n        {\n            _context.Users.Add(user);\n            _context.SaveChanges();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "8073bb31-ca5e-4f53-b41c-99ff7a700aa4",
        "Name": "IAssetRepository.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\nusing System.Collections.Generic;\n\nnamespace WealthManagementPlatform.Repositories\n{\n    public interface IAssetRepository\n    {\n        IEnumerable<Asset> GetAssetsByUser(int userId);\n        void RecordTransaction(Transaction transaction);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "865da685-5703-441b-bd3f-ec5f7f53a5db",
        "Name": "AssetRepository.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using WealthManagementPlatform.Models;\nusing WealthManagementPlatform.Data;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace WealthManagementPlatform.Repositories\n{\n    public class AssetRepository : IAssetRepository\n    {\n        private readonly BankContext _context;\n\n        public AssetRepository(BankContext context)\n        {\n            _context = context;\n        }\n\n        public IEnumerable<Asset> GetAssetsByUser(int userId)\n        {\n            return _context.Assets.Where(a => a.UserId == userId).ToList();\n        }\n\n        public void RecordTransaction(Transaction transaction)\n        {\n            _context.Transactions.Add(transaction);\n            _context.SaveChanges();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "747a7d76-03a3-4856-8a93-ed4a121b7501",
        "Name": "Data",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9c3cd7cf-6d70-4656-953f-8d0a148d5f3c",
        "Name": "BankContext.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing WealthManagementPlatform.Models;\n\nnamespace WealthManagementPlatform.Data\n{\n    public class BankContext : DbContext\n    {\n        public BankContext(DbContextOptions<BankContext> options) : base(options) { }\n\n        public DbSet<User> Users { get; set; }\n        public DbSet<Asset> Assets { get; set; }\n        public DbSet<Transaction> Transactions { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "44c75c87-a3d8-4dac-a6cd-183658b235e5",
        "Name": "Configuration",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "6a63507b-4270-45b0-b0c2-78c4871d80d6",
        "Name": "AppSettings.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "namespace WealthManagementPlatform.Configuration\n{\n    public class AppSettings\n    {\n        public string ConnectionString { get; set; }\n        public string ExternalServiceUrl { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "806e6e09-1628-4e07-8546-c2318ec6cb07",
        "Name": "Utilities",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d14155cd-5ccd-45bf-8d88-18123787f4ea",
        "Name": "Logger.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using System;\n\nnamespace WealthManagementPlatform.Utilities\n{\n    public static class Logger\n    {\n        public static void LogInfo(string message)\n        {\n            Console.WriteLine($\"INFO: {message}\");\n        }\n\n        public static void LogError(string message)\n        {\n            Console.WriteLine($\"ERROR: {message}\");\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d7012f0f-5e8f-40b2-844d-95ab3b960739",
        "Name": "EncryptionUtil.cs",
        "ParentId": "49003883-027b-498a-af43-b1601797f033",
        "Type": 1,
        "Text": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace WealthManagementPlatform.Utilities\n{\n    public static class EncryptionUtil\n    {\n        public static string HashPassword(string password)\n        {\n            using (var sha256 = SHA256.Create())\n            {\n                var bytes = Encoding.UTF8.GetBytes(password);\n                var hash = sha256.ComputeHash(bytes);\n                return Convert.ToBase64String(hash);\n            }\n        }\n\n        public static bool VerifyHash(string password, string hash)\n        {\n            return HashPassword(password) == hash;\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
    "Name": "MarketDataFeedConnector",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "40e85647-b73f-486a-8234-9a3bd2e6c3fa",
        "Name": "MarketDataFeedConnector.csproj",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0</TargetFramework>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />\n  </ItemGroup>\n</Project>",
        "Language": 0
      },
      {
        "Id": "7eb2f18a-a6b4-44e4-8ac5-81393bb21245",
        "Name": "Program.cs",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing MarketDataFeedConnector.Adapters;\nusing MarketDataFeedConnector.Configuration;\nusing MarketDataFeedConnector.Models;\nusing MarketDataFeedConnector.Services;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace MarketDataFeedConnector\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var serviceCollection = new ServiceCollection();\n            ConfigureServices(serviceCollection);\n            var serviceProvider = serviceCollection.BuildServiceProvider();\n            var logger = serviceProvider.GetService<ILogger<Program>>();\n            try\n            {\n                var service = serviceProvider.GetService<MarketDataService>();\n                var request = new MarketDataRequest { Symbol = \"AAPL\", Interval = \"1m\" };\n                MarketData data = await service.FetchMarketDataAsync(request);\n                logger.LogInformation(\"Market Data: Symbol={Symbol}, Price={Price}, Timestamp={Timestamp}\", data.Symbol, data.Price, data.Timestamp);\n            }\n            catch (Exception ex)\n            {\n                logger.LogError(ex, \"An error occurred while fetching market data.\");\n            }\n        }\n\n        private static void ConfigureServices(IServiceCollection services)\n        {\n            services.AddHttpClient();\n            services.AddLogging(configure => configure.AddConsole());\n            var config = new MarketDataConfiguration { FeedUrl = \"https://api.marketdatafeed.com/live\", TimeoutSeconds = 30 };\n            services.AddSingleton(config);\n            services.AddTransient<MarketDataAdapter>();\n            services.AddTransient<MarketDataService>();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d811f818-a4db-4931-a1b0-46abb7cbdd71",
        "Name": "Adapters",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "169c53b9-19ed-416a-867c-0f3677badbf8",
        "Name": "MarketDataAdapter.cs",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 1,
        "Text": "using System.Net.Http;\nusing System.Threading.Tasks;\nusing MarketDataFeedConnector.Models;\nusing MarketDataFeedConnector.Configuration;\nusing Newtonsoft.Json;\n\nnamespace MarketDataFeedConnector.Adapters\n{\n    public class MarketDataAdapter\n    {\n        private readonly HttpClient _httpClient;\n        private readonly MarketDataConfiguration _config;\n\n        public MarketDataAdapter(HttpClient httpClient, MarketDataConfiguration config)\n        {\n            _httpClient = httpClient;\n            _config = config;\n        }\n\n        public async Task<MarketData> GetLiveDataAsync(MarketDataRequest request)\n        {\n            string url = $\"{_config.FeedUrl}?symbol={request.Symbol}&interval={request.Interval}\";\n            HttpResponseMessage response = await _httpClient.GetAsync(url);\n            response.EnsureSuccessStatusCode();\n            string result = await response.Content.ReadAsStringAsync();\n            return JsonConvert.DeserializeObject<MarketData>(result);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "17c08922-dba0-4d04-ab48-021ce2821475",
        "Name": "Models",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9c26bd57-0b7a-4137-8aeb-e0e283d5e345",
        "Name": "MarketData.cs",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 1,
        "Text": "using System;\n\nnamespace MarketDataFeedConnector.Models\n{\n    public class MarketData\n    {\n        public string Symbol { get; set; }\n        public decimal Price { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "ab331be7-cfa5-41f0-8fb6-b80871c36d0b",
        "Name": "MarketDataRequest.cs",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 1,
        "Text": "namespace MarketDataFeedConnector.Models\n{\n    public class MarketDataRequest\n    {\n        public string Symbol { get; set; }\n        public string Interval { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c6e82247-aa0f-4c40-9e24-afabd85ee5aa",
        "Name": "Configuration",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2698ba22-3ee2-4f41-b62f-b2b0861def48",
        "Name": "MarketDataConfiguration.cs",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 1,
        "Text": "namespace MarketDataFeedConnector.Configuration\n{\n    public class MarketDataConfiguration\n    {\n        public string FeedUrl { get; set; }\n        public int TimeoutSeconds { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "3725a886-9e34-4d83-832e-b6dc6e0adcaa",
        "Name": "Services",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "85f0540e-ea99-4678-a459-63a893ca3542",
        "Name": "MarketDataService.cs",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing MarketDataFeedConnector.Adapters;\nusing MarketDataFeedConnector.Models;\nusing MarketDataFeedConnector.Exceptions;\n\nnamespace MarketDataFeedConnector.Services\n{\n    public class MarketDataService\n    {\n        private readonly MarketDataAdapter _adapter;\n\n        public MarketDataService(MarketDataAdapter adapter)\n        {\n            _adapter = adapter;\n        }\n\n        public async Task<MarketData> FetchMarketDataAsync(MarketDataRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.Symbol))\n            {\n                throw new MarketDataException(\"Market data request must include a symbol.\");\n            }\n            return await _adapter.GetLiveDataAsync(request);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "c966a99e-1de4-411b-9871-4ee94ad551f9",
        "Name": "Exceptions",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "311b0947-0cc5-4e5d-b08a-bcdcfed75eeb",
        "Name": "MarketDataException.cs",
        "ParentId": "e2c1d947-5171-4f4e-ae7b-6e5ef8022c35",
        "Type": 1,
        "Text": "using System;\n\nnamespace MarketDataFeedConnector.Exceptions\n{\n    public class MarketDataException : Exception\n    {\n        public MarketDataException() { }\n        public MarketDataException(string message) : base(message) { }\n        public MarketDataException(string message, Exception innerException) : base(message, innerException) { }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "1c778287-2540-4685-bbe4-18be9df67520",
    "Name": "DerivativesTradingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "bd646405-2f32-45c9-b7b5-ef5257965af9",
        "Name": "Program.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing DerivativesTradingService.Services;\nusing DerivativesTradingService.Repositories;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Register controllers and services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IOrderRepository, OrderRepository>();\nbuilder.Services.AddSingleton<IRiskAssessmentService, RiskAssessmentService>();\nbuilder.Services.AddSingleton<IComplianceService, ComplianceService>();\nbuilder.Services.AddSingleton<ITradingService, TradingService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints => {\n    endpoints.MapControllers();\n});\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "9dab3a7b-71ba-4772-9b57-1c71f678b9ee",
        "Name": "Controllers",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d1329e1c-66be-466d-ab66-7a1801b80e39",
        "Name": "TradingController.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing DerivativesTradingService.Models;\nusing DerivativesTradingService.Services;\n\nnamespace DerivativesTradingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TradingController : ControllerBase\n    {\n        private readonly ITradingService _tradingService;\n\n        public TradingController(ITradingService tradingService)\n        {\n            _tradingService = tradingService;\n        }\n\n        [HttpPost(\"place\")]\n        public ActionResult<TradeResult> PlaceOrder([FromBody] Order order)\n        {\n            if(order == null)\n            {\n                return BadRequest(\"Order data is required.\");\n            }\n            \n            var result = _tradingService.ExecuteTrade(order);\n            if(result.Success)\n            {\n                return Ok(result);\n            }\n            return BadRequest(result);\n        }\n\n        [HttpGet(\"{orderId}\")]\n        public ActionResult<Order> GetOrder(string orderId)\n        {\n            var order = _tradingService.GetOrderById(orderId);\n            if(order == null)\n            {\n                return NotFound(\"Order not found.\");\n            }\n            return Ok(order);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "aa844ed7-36c3-4858-9813-8c7ac0df3fe1",
        "Name": "Models",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d8f14e61-6d7b-4c49-b99b-91b8c93314b1",
        "Name": "Order.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using System;\n\nnamespace DerivativesTradingService.Models\n{\n    public class Order\n    {\n        public string OrderId { get; set; }\n        public string Instrument { get; set; } // e.g., Futures, Options, Swaps\n        public string OrderType { get; set; } // Buy or Sell\n        public int Quantity { get; set; }\n        public decimal Price { get; set; }\n        public DateTime OrderDate { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "568ff6ce-e2d7-4f4c-a60a-6f83a47732e7",
        "Name": "TradeResult.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using System;\n\nnamespace DerivativesTradingService.Models\n{\n    public class TradeResult\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public Order Order { get; set; }\n        public DateTime TradeDate { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d310e8f5-2ab2-4414-8358-6b134893163e",
        "Name": "Services",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "90e1a4cc-a67f-4d50-8589-8c9f2e0f1fc3",
        "Name": "TradingService.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using System;\nusing DerivativesTradingService.Models;\nusing DerivativesTradingService.Repositories;\n\nnamespace DerivativesTradingService.Services\n{\n    public interface ITradingService\n    {\n        TradeResult ExecuteTrade(Order order);\n        Order GetOrderById(string orderId);\n    }\n\n    public class TradingService : ITradingService\n    {\n        private readonly IOrderRepository _orderRepository;\n        private readonly IRiskAssessmentService _riskAssessmentService;\n        private readonly IComplianceService _complianceService;\n\n        public TradingService(IOrderRepository orderRepository, IRiskAssessmentService riskAssessmentService, IComplianceService complianceService)\n        {\n            _orderRepository = orderRepository;\n            _riskAssessmentService = riskAssessmentService;\n            _complianceService = complianceService;\n        }\n\n        public TradeResult ExecuteTrade(Order order)\n        {\n            // Validate order parameters\n            if(order.Quantity <= 0 || order.Price <= 0)\n            {\n                return new TradeResult\n                {\n                    Success = false,\n                    Message = \"Invalid order parameters.\",\n                    Order = order,\n                    TradeDate = DateTime.UtcNow\n                };\n            }\n\n            // Risk assessment\n            if(!_riskAssessmentService.AssessRisk(order))\n            {\n                return new TradeResult\n                {\n                    Success = false,\n                    Message = \"Order failed risk assessment.\",\n                    Order = order,\n                    TradeDate = DateTime.UtcNow\n                };\n            }\n\n            // Compliance verification\n            if(!_complianceService.VerifyCompliance(order))\n            {\n                return new TradeResult\n                {\n                    Success = false,\n                    Message = \"Order does not meet compliance requirements.\",\n                    Order = order,\n                    TradeDate = DateTime.UtcNow\n                };\n            }\n\n            // Process trade\n            order.OrderId = Guid.NewGuid().ToString();\n            order.OrderDate = DateTime.UtcNow;\n            _orderRepository.AddOrder(order);\n\n            return new TradeResult\n            {\n                Success = true,\n                Message = \"Order executed successfully.\",\n                Order = order,\n                TradeDate = DateTime.UtcNow\n            };\n        }\n\n        public Order GetOrderById(string orderId)\n        {\n            return _orderRepository.GetOrder(orderId);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bf3e1e54-7e70-4004-bd48-465359bccb00",
        "Name": "RiskAssessmentService.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing DerivativesTradingService.Models;\n\nnamespace DerivativesTradingService.Services\n{\n    public interface IRiskAssessmentService\n    {\n        bool AssessRisk(Order order);\n    }\n\n    public class RiskAssessmentService : IRiskAssessmentService\n    {\n        public bool AssessRisk(Order order)\n        {\n            // Implement business logic for risk assessment\n            // For demonstration, if order value exceeds a threshold, flag high risk\n            decimal orderValue = order.Quantity * order.Price;\n            decimal threshold = 1000000m; // Example threshold\n            return orderValue <= threshold;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "54dc5d59-f070-48cd-8759-983737e3c5be",
        "Name": "ComplianceService.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing DerivativesTradingService.Models;\n\nnamespace DerivativesTradingService.Services\n{\n    public interface IComplianceService\n    {\n        bool VerifyCompliance(Order order);\n    }\n\n    public class ComplianceService : IComplianceService\n    {\n        public bool VerifyCompliance(Order order)\n        {\n            // Check if the trading instrument is among the allowed derivatives\n            var allowedInstruments = new List<string> { \"Futures\", \"Options\", \"Swaps\", \"Forwards\" };\n            return allowedInstruments.Contains(order.Instrument);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e6832f29-bab9-45a7-912d-fe26586b7144",
        "Name": "Repositories",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "2bd19dcd-6f6f-4f14-b2f6-78591c34b318",
        "Name": "OrderRepository.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using System.Collections.Concurrent;\nusing DerivativesTradingService.Models;\n\nnamespace DerivativesTradingService.Repositories\n{\n    public interface IOrderRepository\n    {\n        void AddOrder(Order order);\n        Order GetOrder(string orderId);\n    }\n\n    public class OrderRepository : IOrderRepository\n    {\n        private readonly ConcurrentDictionary<string, Order> _orders = new ConcurrentDictionary<string, Order>();\n\n        public void AddOrder(Order order)\n        {\n            _orders.TryAdd(order.OrderId, order);\n        }\n\n        public Order GetOrder(string orderId)\n        {\n            _orders.TryGetValue(orderId, out var order);\n            return order;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "277cdd88-5651-4b5d-8fb9-c7af0df717a0",
        "Name": "Configurations",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f0b2e3b1-7997-49ef-975e-b637108c47a2",
        "Name": "AppSettings.cs",
        "ParentId": "1c778287-2540-4685-bbe4-18be9df67520",
        "Type": 1,
        "Text": "using System.Collections.Generic;\n\nnamespace DerivativesTradingService.Configurations\n{\n    public class AppSettings\n    {\n        public string DatabaseConnection { get; set; }\n        public int MaxOrderValue { get; set; }\n        public List<string> AllowedInstruments { get; set; }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
    "Name": "OptionsTradingService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "da2a02c3-6ddc-41e2-930f-43345eb42980",
        "Name": "Program.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing OptionsTradingService.Infrastructure;\nusing OptionsTradingService.Repositories;\nusing OptionsTradingService.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure services\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// Configure Database Context (using InMemory for illustration, replace with a real provider in production)\nbuilder.Services.AddDbContext<DatabaseContext>(options =>\n    options.UseInMemoryDatabase(\"OptionsTradingDb\"));\n\n// Dependency Injection\nbuilder.Services.AddScoped<IOptionService, OptionService>();\nbuilder.Services.AddScoped<IOptionRepository, OptionRepository>();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();",
        "Language": 0
      },
      {
        "Id": "79d84aee-cdc4-4930-8fdb-f1b4a57e3ee6",
        "Name": "OptionsTradingService.csproj",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>net6.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.NewtonsoftJson\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.2.3\" />\n  </ItemGroup>\n</Project>",
        "Language": 0
      },
      {
        "Id": "659d58e7-0635-4c1f-a740-eeb26f4de65a",
        "Name": "Controllers",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5ead88db-81d4-425b-8891-84675423a280",
        "Name": "OptionController.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing OptionsTradingService.Models;\nusing OptionsTradingService.Services;\n\nnamespace OptionsTradingService.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class OptionController : ControllerBase\n    {\n        private readonly IOptionService _optionService;\n\n        public OptionController(IOptionService optionService)\n        {\n            _optionService = optionService;\n        }\n\n        [HttpPost(\"trade\")]\n        public ActionResult<TradeResult> Trade([FromBody] TradeRequest tradeRequest)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            TradeResult result = _optionService.ExecuteTrade(tradeRequest);\n            return Ok(result);\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "d8e45746-c117-4d49-8cb0-d6ca3a5bfaea",
        "Name": "Services",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "427c1a3c-0da5-4c75-a623-8dd09a400c15",
        "Name": "IOptionService.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Services\n{\n    public interface IOptionService\n    {\n        TradeResult ExecuteTrade(TradeRequest request);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "83a27d57-924f-4226-a83b-e6c9f624a707",
        "Name": "OptionService.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using System;\nusing OptionsTradingService.Models;\nusing OptionsTradingService.Repositories;\n\nnamespace OptionsTradingService.Services\n{\n    public class OptionService : IOptionService\n    {\n        private readonly IOptionRepository _optionRepository;\n\n        public OptionService(IOptionRepository optionRepository)\n        {\n            _optionRepository = optionRepository;\n        }\n\n        public TradeResult ExecuteTrade(TradeRequest request)\n        {\n            if (request.Quantity <= 0)\n                throw new ArgumentException(\"Quantity must be greater than zero\");\n\n            // Calculate premium cost and total cost with a realistic business logic\n            decimal premium = CalculatePremium(request.StrikePrice, request.IsCall);\n            decimal totalCost = premium * request.Quantity;\n\n            var trade = new OptionTrade\n            {\n                OptionId = Guid.NewGuid(),\n                UnderlyingAsset = request.UnderlyingAsset,\n                StrikePrice = request.StrikePrice,\n                Quantity = request.Quantity,\n                IsCall = request.IsCall,\n                TradeDate = DateTime.UtcNow,\n                TotalCost = totalCost\n            };\n\n            _optionRepository.SaveTrade(trade);\n\n            return new TradeResult\n            {\n                TradeId = trade.OptionId,\n                Status = \"Success\",\n                ExecutedAt = trade.TradeDate,\n                TotalCost = totalCost\n            };\n        }\n\n        private decimal CalculatePremium(decimal strikePrice, bool isCall)\n        {\n            // Option premium calculation can be more complex with market data integration.\n            // Here we provide a simplified calculation.\n            decimal multiplier = isCall ? 0.12m : 0.10m;\n            return strikePrice * multiplier;\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "04cf6c75-dbe2-46e5-beaf-5b5cc3f4c6b4",
        "Name": "Models",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1e11e17b-5b73-468c-ad79-896da9a3933d",
        "Name": "OptionTrade.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using System;\n\nnamespace OptionsTradingService.Models\n{\n    public class OptionTrade\n    {\n        public Guid OptionId { get; set; }\n        public string UnderlyingAsset { get; set; } = string.Empty;\n        public decimal StrikePrice { get; set; }\n        public int Quantity { get; set; }\n        public bool IsCall { get; set; }\n        public DateTime TradeDate { get; set; }\n        public decimal TotalCost { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "da31e6f3-e2b5-40d8-b255-d6f5cbcc8b3f",
        "Name": "TradeRequest.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using System.ComponentModel.DataAnnotations;\n\nnamespace OptionsTradingService.Models\n{\n    public class TradeRequest\n    {\n        [Required]\n        public string UnderlyingAsset { get; set; } = string.Empty;\n\n        [Range(0.01, double.MaxValue)]\n        public decimal StrikePrice { get; set; }\n\n        [Range(1, int.MaxValue)]\n        public int Quantity { get; set; }\n\n        public bool IsCall { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "730097bd-a435-4242-8116-b50a424a4498",
        "Name": "TradeResult.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using System;\n\nnamespace OptionsTradingService.Models\n{\n    public class TradeResult\n    {\n        public Guid TradeId { get; set; }\n        public string Status { get; set; } = string.Empty;\n        public DateTime ExecutedAt { get; set; }\n        public decimal TotalCost { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "555d148f-a0fb-4bab-93af-90944a70acb3",
        "Name": "Repositories",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "24d18c33-659f-420e-b001-05feb4c4cb3c",
        "Name": "IOptionRepository.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Repositories\n{\n    public interface IOptionRepository\n    {\n        void SaveTrade(OptionTrade trade);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "a4f57dd9-9a31-4c52-8ee9-12447f8b67d7",
        "Name": "OptionRepository.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using OptionsTradingService.Infrastructure;\nusing OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Repositories\n{\n    public class OptionRepository : IOptionRepository\n    {\n        private readonly DatabaseContext _context;\n\n        public OptionRepository(DatabaseContext context)\n        {\n            _context = context;\n        }\n\n        public void SaveTrade(OptionTrade trade)\n        {\n            _context.OptionTrades.Add(trade);\n            _context.SaveChanges();\n        }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "51ec3e4a-fdcd-47f4-aa85-7217294950f1",
        "Name": "Infrastructure",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "25465359-02ff-4490-8153-6e42faeba86e",
        "Name": "DatabaseContext.cs",
        "ParentId": "c222e1c6-c76c-4c52-9a5d-c9735dd04b7c",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing OptionsTradingService.Models;\n\nnamespace OptionsTradingService.Infrastructure\n{\n    public class DatabaseContext : DbContext\n    {\n        public DatabaseContext(DbContextOptions<DatabaseContext> options) : base(options) { }\n\n        public DbSet<OptionTrade> OptionTrades { get; set; }\n    }\n}",
        "Language": 0
      }
    ]
  },
  {
    "Id": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
    "Name": "ClearingHouseInterface",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "727116a2-6c22-47d9-bbbc-6bf890ff87a5",
        "Name": "Program.cs",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing ClearingHouseInterface.Services;\nusing ClearingHouseInterface.Interfaces;\nusing ClearingHouseInterface.Configurations;\nusing ClearingHouseInterface.Models;\n\nnamespace ClearingHouseInterface\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            // Build configuration\n            var configuration = new ConfigurationBuilder()\n                .AddJsonFile(\"appsettings.json\", optional: false)\n                .Build();\n\n            // Setup dependency injection\n            var serviceProvider = new ServiceCollection()\n                .AddSingleton<IConfiguration>(configuration)\n                .AddLogging(configure => configure.AddConsole())\n                .AddHttpClient()\n                .AddTransient<IClearingHouseService, ClearingHouseService>()\n                .Configure<ClearingHouseSettings>(configuration.GetSection(\"ClearingHouseSettings\"))\n                .BuildServiceProvider();\n\n            var logger = serviceProvider.GetService<ILogger<Program>>();\n\n            try\n            {\n                var clearingHouseService = serviceProvider.GetService<IClearingHouseService>();\n                var request = new ClearingHouseRequest\n                {\n                    TransactionId = Guid.NewGuid().ToString(),\n                    Amount = 1234.56M,\n                    Currency = \"USD\",\n                    BeneficiaryAccount = \"9876543210\"\n                };\n\n                var response = clearingHouseService.ProcessClearingHouseRequest(request).Result;\n                if (response.IsSuccess)\n                {\n                    logger.LogInformation(\"Transaction processed successfully. Confirmation Code: \" + response.ConfirmationCode);\n                }\n                else\n                {\n                    logger.LogError(\"Transaction processing failed: \" + response.ErrorMessage);\n                }\n            }\n            catch (Exception ex)\n            {\n                logger.LogError(ex, \"An unhandled exception occurred.\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a1609fa5-a6d5-4bed-afe9-f96cbd31870b",
        "Name": "appsettings.json",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 1,
        "Text": "{\n  \"ClearingHouseSettings\": {\n    \"EndpointUrl\": \"https://api.clearinghouse.com/transaction\",\n    \"ApiKey\": \"YourProductionApiKey\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\"\n    }\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "da0489a4-bd14-400c-ab3b-354a2a035085",
        "Name": "Configurations",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3467cd8a-9476-4a59-b87b-d5d45cdbbc3d",
        "Name": "ClearingHouseSettings.cs",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 1,
        "Text": "namespace ClearingHouseInterface.Configurations\n{\n    public class ClearingHouseSettings\n    {\n        public string EndpointUrl { get; set; }\n        public string ApiKey { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3387c767-ade7-4a21-bc6f-6fb56edcd167",
        "Name": "Interfaces",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "b585dc13-8832-4742-a0fb-64c9e717a147",
        "Name": "IClearingHouseService.cs",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 1,
        "Text": "using System.Threading.Tasks;\nusing ClearingHouseInterface.Models;\n\nnamespace ClearingHouseInterface.Interfaces\n{\n    public interface IClearingHouseService\n    {\n        Task<ClearingHouseResponse> ProcessClearingHouseRequest(ClearingHouseRequest request);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "949636d0-5462-4f29-8153-d8bf22c2c609",
        "Name": "Models",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d58863ea-4aae-47c1-be24-227a9c113dda",
        "Name": "ClearingHouseRequest.cs",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 1,
        "Text": "namespace ClearingHouseInterface.Models\n{\n    public class ClearingHouseRequest\n    {\n        public string TransactionId { get; set; }\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n        public string BeneficiaryAccount { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "293a0849-d9e9-4d83-bebb-34fe70874ec1",
        "Name": "ClearingHouseResponse.cs",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 1,
        "Text": "namespace ClearingHouseInterface.Models\n{\n    public class ClearingHouseResponse\n    {\n        public bool IsSuccess { get; set; }\n        public string ErrorMessage { get; set; }\n        public string ConfirmationCode { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "0a1dcf17-735c-4346-a654-067a6a926a7f",
        "Name": "Services",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9b7d6b47-04cf-45b7-9beb-e4ce03c83684",
        "Name": "ClearingHouseService.cs",
        "ParentId": "4ba6dcda-4fe4-453a-9a6b-caa09e394e69",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing ClearingHouseInterface.Interfaces;\nusing ClearingHouseInterface.Models;\nusing ClearingHouseInterface.Configurations;\n\nnamespace ClearingHouseInterface.Services\n{\n    public class ClearingHouseService : IClearingHouseService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ClearingHouseSettings _settings;\n        private readonly ILogger<ClearingHouseService> _logger;\n\n        public ClearingHouseService(IHttpClientFactory httpClientFactory, IOptions<ClearingHouseSettings> settings, ILogger<ClearingHouseService> logger)\n        {\n            _httpClient = httpClientFactory.CreateClient();\n            _settings = settings.Value;\n            _logger = logger;\n        }\n\n        public async Task<ClearingHouseResponse> ProcessClearingHouseRequest(ClearingHouseRequest request)\n        {\n            try\n            {\n                string payload = JsonSerializer.Serialize(request);\n                var httpRequest = new HttpRequestMessage(HttpMethod.Post, _settings.EndpointUrl)\n                {\n                    Content = new StringContent(payload, Encoding.UTF8, \"application/json\")\n                };\n                httpRequest.Headers.Add(\"ApiKey\", _settings.ApiKey);\n\n                var httpResponse = await _httpClient.SendAsync(httpRequest);\n                string responseContent = await httpResponse.Content.ReadAsStringAsync();\n\n                if (httpResponse.IsSuccessStatusCode)\n                {\n                    var clearingResponse = JsonSerializer.Deserialize<ClearingHouseResponse>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n                    return clearingResponse ?? new ClearingHouseResponse { IsSuccess = false, ErrorMessage = \"Invalid response format.\" };\n                }\n                else\n                {\n                    _logger.LogError($\"Error from clearing house API. Status Code: {httpResponse.StatusCode}, Response: {responseContent}\");\n                    return new ClearingHouseResponse { IsSuccess = false, ErrorMessage = $\"HTTP Error {httpResponse.StatusCode}\" };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception during ProcessClearingHouseRequest\");\n                return new ClearingHouseResponse { IsSuccess = false, ErrorMessage = ex.Message };\n            }\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "e373f188-8b03-4750-8157-ffe181c8e9cf",
    "Name": "SettlementReconciliationService",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "81a9d90c-b66a-4f4e-ac0e-0c02149d5a0e",
        "Name": "Program.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SettlementReconciliationService\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "83e77324-f732-4985-ad8a-25c3a559177a",
        "Name": "Startup.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\npublic class Startup\n{\n    public IConfiguration Configuration { get; }\n\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddControllers();\n        services.AddLogging();\n        services.AddSingleton<Interfaces.ISettlementReconciliationService, Services.SettlementReconciliationService>();\n        services.AddSingleton<Interfaces.ISettlementRepository, Repositories.SettlementRepository>();\n        services.Configure<Configurations.AppSettings>(Configuration.GetSection(\"AppSettings\"));\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n\n        app.UseRouting();\n        app.UseAuthorization();\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapControllers();\n        });\n    }\n}",
        "Language": 0
      },
      {
        "Id": "6adb6b6d-af18-4690-8e9f-8e71bc1ec179",
        "Name": "Controllers",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "a9b95587-665c-4f4a-95b9-f18ff8e2e9cf",
        "Name": "SettlementController.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Interfaces;\nusing Models;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class SettlementController : ControllerBase\n{\n    private readonly ISettlementReconciliationService _reconciliationService;\n\n    public SettlementController(ISettlementReconciliationService reconciliationService)\n    {\n        _reconciliationService = reconciliationService;\n    }\n\n    [HttpPost(\"reconcile\")]\n    public async Task<IActionResult> Reconcile([FromQuery] DateTime settlementDate)\n    {\n        var result = await _reconciliationService.ReconcileAsync(settlementDate);\n        if (result.Success)\n        {\n            return Ok(result);\n        }\n        return BadRequest(result);\n    }\n}",
        "Language": 0
      },
      {
        "Id": "f077f9a0-cdbc-408b-8580-84e47a72d449",
        "Name": "Models",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "47a8584c-d877-427b-bb6e-8d46f0432a48",
        "Name": "SettlementRecord.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "namespace Models\n{\n    public class SettlementRecord\n    {\n        public int Id { get; set; }\n        public string TransactionId { get; set; }\n        public string SystemIdentifier { get; set; }\n        public System.DateTime SettlementDate { get; set; }\n        public decimal Amount { get; set; }\n        public string Status { get; set; } // e.g. \"Matched\" or \"Discrepancy\"\n    }\n}",
        "Language": 0
      },
      {
        "Id": "4624ae4d-6627-420f-a5ef-848fbd41a71f",
        "Name": "ReconciliationResult.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using System.Collections.Generic;\n\nnamespace Models\n{\n    public class ReconciliationResult\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public List<SettlementRecord> Discrepancies { get; set; }\n    }\n}",
        "Language": 0
      },
      {
        "Id": "bcdfdaf9-0a65-4c94-9008-0b75f4e786b9",
        "Name": "Interfaces",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "f86f8e41-3f51-4d07-84bc-598652c625a2",
        "Name": "ISettlementReconciliationService.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using System;\nusing System.Threading.Tasks;\nusing Models;\n\nnamespace Interfaces\n{\n    public interface ISettlementReconciliationService\n    {\n        Task<ReconciliationResult> ReconcileAsync(DateTime settlementDate);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4fd05797-289e-4232-b34b-367494604cb2",
        "Name": "ISettlementRepository.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Models;\n\nnamespace Interfaces\n{\n    public interface ISettlementRepository\n    {\n        Task<IEnumerable<SettlementRecord>> GetSettlementsByDateAsync(DateTime settlementDate);\n        Task SaveReconciledRecordsAsync(IEnumerable<SettlementRecord> records);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "177b0ec2-ebd0-4796-9cc0-b4d6b502e8a3",
        "Name": "Services",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "0ed37aea-f5f8-42af-b3c7-ae50d4482c28",
        "Name": "SettlementReconciliationService.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Interfaces;\nusing Models;\nusing Microsoft.Extensions.Logging;\n\nnamespace Services\n{\n    public class SettlementReconciliationService : ISettlementReconciliationService\n    {\n        private readonly ISettlementRepository _repository;\n        private readonly ILogger<SettlementReconciliationService> _logger;\n\n        public SettlementReconciliationService(ISettlementRepository repository, ILogger<SettlementReconciliationService> logger)\n        {\n            _repository = repository;\n            _logger = logger;\n        }\n\n        public async Task<ReconciliationResult> ReconcileAsync(DateTime settlementDate)\n        {\n            _logger.LogInformation(\"Starting reconciliation for settlement date {Date}\", settlementDate);\n\n            // Retrieve local settlement records\n            IEnumerable<SettlementRecord> localRecords = await _repository.GetSettlementsByDateAsync(settlementDate);\n\n            // Retrieve settlement records from external system\n            IEnumerable<SettlementRecord> externalRecords = await GetExternalSettlementRecordsAsync(settlementDate);\n\n            // Identify discrepancies between local and external records\n            var discrepancies = localRecords.Where(local => !externalRecords.Any(ext => ext.TransactionId == local.TransactionId && ext.Amount == local.Amount)).ToList();\n\n            if (discrepancies.Any())\n            {\n                _logger.LogWarning(\"Found {Count} discrepancies during reconciliation.\", discrepancies.Count);\n                await _repository.SaveReconciledRecordsAsync(discrepancies);\n\n                return new ReconciliationResult\n                {\n                    Success = false,\n                    Message = \"Discrepancies found during reconciliation.\",\n                    Discrepancies = discrepancies\n                };\n            }\n\n            _logger.LogInformation(\"Reconciliation completed successfully with no discrepancies.\");\n            return new ReconciliationResult\n            {\n                Success = true,\n                Message = \"Reconciliation successful. No discrepancies found.\",\n                Discrepancies = new List<SettlementRecord>()\n            };\n        }\n\n        private async Task<IEnumerable<SettlementRecord>> GetExternalSettlementRecordsAsync(DateTime settlementDate)\n        {\n            // Integration with external systems. Replace this with actual integration logic in production.\n            await Task.Delay(50); // simulate network or I/O delay\n            \n            // For demonstration, assume external data mirrors local records.\n            return await _repository.GetSettlementsByDateAsync(settlementDate);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "04267485-6fcd-418f-b3ef-8fb80fbe3098",
        "Name": "Repositories",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4c78e0c3-fe6e-4d7f-96b4-bd215bc35ff8",
        "Name": "SettlementRepository.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Data;\nusing System.Data.SqlClient;\nusing Dapper;\nusing Interfaces;\nusing Models;\nusing Microsoft.Extensions.Configuration;\n\nnamespace Repositories\n{\n    public class SettlementRepository : ISettlementRepository\n    {\n        private readonly string _connectionString;\n\n        public SettlementRepository(IConfiguration configuration)\n        {\n            _connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n        }\n\n        public async Task<IEnumerable<SettlementRecord>> GetSettlementsByDateAsync(DateTime settlementDate)\n        {\n            using (IDbConnection db = new SqlConnection(_connectionString))\n            {\n                string sql = \"SELECT Id, TransactionId, SystemIdentifier, SettlementDate, Amount, Status FROM Settlements WHERE SettlementDate = @SettlementDate\";\n                return await db.QueryAsync<SettlementRecord>(sql, new { SettlementDate = settlementDate });\n            }\n        }\n\n        public async Task SaveReconciledRecordsAsync(IEnumerable<SettlementRecord> records)\n        {\n            using (IDbConnection db = new SqlConnection(_connectionString))\n            {\n                string sql = \"INSERT INTO ReconciledSettlements (TransactionId, SystemIdentifier, SettlementDate, Amount, Status) VALUES (@TransactionId, @SystemIdentifier, @SettlementDate, @Amount, @Status)\";\n                foreach (var record in records)\n                {\n                    await db.ExecuteAsync(sql, new\n                    {\n                        TransactionId = record.TransactionId,\n                        SystemIdentifier = record.SystemIdentifier,\n                        SettlementDate = record.SettlementDate,\n                        Amount = record.Amount,\n                        Status = record.Status\n                    });\n                }\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "84e192f1-b0f9-44ea-ab14-6d7b5b310130",
        "Name": "Configurations",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c4a98d0e-08b5-4c4f-b388-0143a051f454",
        "Name": "AppSettings.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "namespace Configurations\n{\n    public class AppSettings\n    {\n        public string ExternalSystemEndpoint { get; set; }\n        public string DefaultCurrency { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b6608a84-9b0e-4f57-8698-deed5379c53b",
        "Name": "Exceptions",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "023b470a-118c-41a1-8f1c-4d338391c3fa",
        "Name": "ReconciliationException.cs",
        "ParentId": "e373f188-8b03-4750-8157-ffe181c8e9cf",
        "Type": 1,
        "Text": "using System;\n\nnamespace Exceptions\n{\n    public class ReconciliationException : Exception\n    {\n        public ReconciliationException() { }\n\n        public ReconciliationException(string message) : base(message) { }\n\n        public ReconciliationException(string message, Exception innerException) : base(message, innerException) { }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "3510dee8-7d79-457a-b1e4-d317e88a954a",
    "Name": "FuturesTradingPlatform",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "8b48f547-cf74-41e9-b93d-0e5e20ead7be",
        "Name": "Program.cs",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing FuturesTradingPlatform.Domain;\nusing FuturesTradingPlatform.Infrastructure;\nusing FuturesTradingPlatform.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Register services\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<IFuturesContractRepository, FuturesContractRepository>();\nbuilder.Services.AddTransient<IFuturesTradeService, FuturesTradeService>();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => endpoints.MapControllers());\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "4738de95-769b-4957-82a3-c965e531b182",
        "Name": "Domain",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "debadcf4-fdda-4ceb-9612-8156d6431313",
        "Name": "IFuturesTradeService.cs",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing FuturesTradingPlatform.Models;\n\nnamespace FuturesTradingPlatform.Domain\n{\n    public interface IFuturesTradeService\n    {\n        IEnumerable<FuturesContract> GetAllContracts();\n        FuturesContract GetContractById(int id);\n        void ExecuteTrade(FuturesContract contract);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "052ad70d-f0ae-43ed-ade2-4bfbc044a9ab",
        "Name": "IFuturesContractRepository.cs",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing FuturesTradingPlatform.Models;\n\nnamespace FuturesTradingPlatform.Domain\n{\n    public interface IFuturesContractRepository\n    {\n        IEnumerable<FuturesContract> GetContracts();\n        FuturesContract GetContract(int id);\n        void UpdateContract(FuturesContract contract);\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ea711729-ca82-4310-b8c2-89b9e05deb7f",
        "Name": "Models",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "e238b77b-8be3-4489-9492-014985cc79bd",
        "Name": "FuturesContract.cs",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 1,
        "Text": "namespace FuturesTradingPlatform.Models\n{\n    public class FuturesContract\n    {\n        public int Id { get; set; }\n        public string ContractName { get; set; }\n        public decimal Price { get; set; }\n        public int Quantity { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "14337f3f-0199-4d55-bb5b-972808f9b1a1",
        "Name": "Services",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3e2e6e68-65e1-496f-a5e3-6392fac50193",
        "Name": "FuturesTradeService.cs",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing FuturesTradingPlatform.Domain;\nusing FuturesTradingPlatform.Models;\n\nnamespace FuturesTradingPlatform.Services\n{\n    public class FuturesTradeService : IFuturesTradeService\n    {\n        private readonly IFuturesContractRepository _contractRepository;\n\n        public FuturesTradeService(IFuturesContractRepository contractRepository)\n        {\n            _contractRepository = contractRepository;\n        }\n\n        public IEnumerable<FuturesContract> GetAllContracts()\n        {\n            return _contractRepository.GetContracts();\n        }\n\n        public FuturesContract GetContractById(int id)\n        {\n            return _contractRepository.GetContract(id);\n        }\n\n        public void ExecuteTrade(FuturesContract contract)\n        {\n            if (contract == null || !contract.IsActive || contract.Quantity <= 0)\n            {\n                throw new System.ArgumentException(\"Invalid or inactive contract provided.\");\n            }\n\n            // Example business logic: execute trade by decrementing the available quantity\n            contract.Quantity -= 1;\n            _contractRepository.UpdateContract(contract);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1151c159-1d3f-4014-8281-8d726be8bc54",
        "Name": "Infrastructure",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "73ba8d15-1190-4829-9d3b-242aef8a6c3f",
        "Name": "FuturesContractRepository.cs",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Linq;\nusing FuturesTradingPlatform.Domain;\nusing FuturesTradingPlatform.Models;\n\nnamespace FuturesTradingPlatform.Infrastructure\n{\n    public class FuturesContractRepository : IFuturesContractRepository\n    {\n        private readonly List<FuturesContract> _contracts;\n\n        public FuturesContractRepository()\n        {\n            // Initialize with sample contracts\n            _contracts = new List<FuturesContract>\n            {\n                new FuturesContract { Id = 1, ContractName = \"Crude Oil Futures\", Price = 75.50m, Quantity = 100, IsActive = true },\n                new FuturesContract { Id = 2, ContractName = \"Gold Futures\", Price = 1800.00m, Quantity = 50, IsActive = true }\n            };\n        }\n\n        public IEnumerable<FuturesContract> GetContracts()\n        {\n            return _contracts;\n        }\n\n        public FuturesContract GetContract(int id)\n        {\n            return _contracts.FirstOrDefault(x => x.Id == id);\n        }\n\n        public void UpdateContract(FuturesContract contract)\n        {\n            var existing = _contracts.FirstOrDefault(x => x.Id == contract.Id);\n            if (existing != null)\n            {\n                existing.Price = contract.Price;\n                existing.Quantity = contract.Quantity;\n                existing.IsActive = contract.IsActive;\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "3313c60e-6420-4c35-907f-73be8fcefd8e",
        "Name": "Controllers",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5687cedb-eac2-45c1-b8d3-3631c09ca7bb",
        "Name": "FuturesTradeController.cs",
        "ParentId": "3510dee8-7d79-457a-b1e4-d317e88a954a",
        "Type": 1,
        "Text": "using FuturesTradingPlatform.Domain;\nusing FuturesTradingPlatform.Models;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace FuturesTradingPlatform.Controllers\n{\n    [Route(\"api/[controller]\")]\n    public class FuturesTradeController : ControllerBase\n    {\n        private readonly IFuturesTradeService _tradeService;\n\n        public FuturesTradeController(IFuturesTradeService tradeService)\n        {\n            _tradeService = tradeService;\n        }\n\n        [HttpGet]\n        public IActionResult GetContracts()\n        {\n            var contracts = _tradeService.GetAllContracts();\n            return Ok(contracts);\n        }\n\n        [HttpGet(\"{id}\")]\n        public IActionResult GetContractById(int id)\n        {\n            var contract = _tradeService.GetContractById(id);\n            if (contract == null)\n            {\n                return NotFound();\n            }\n            return Ok(contract);\n        }\n\n        [HttpPost(\"execute\")]\n        public IActionResult ExecuteTrade([FromBody] FuturesContract contract)\n        {\n            if (contract == null)\n            {\n                return BadRequest(\"Contract data is required.\");\n            }\n            try\n            {\n                _tradeService.ExecuteTrade(contract);\n                return Ok(\"Trade executed successfully.\");\n            }\n            catch (System.Exception ex)\n            {\n                return BadRequest(ex.Message);\n            }\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
    "Name": "FinancialPlanningAssistant",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "61845740-9f40-48d4-92aa-f774ecb7443e",
        "Name": "Program.cs",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 1,
        "Text": "using System;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.EntityFrameworkCore;\nusing FinancialPlanningAssistant.Domain;\nusing FinancialPlanningAssistant.Infrastructure;\nusing FinancialPlanningAssistant.Services;\nusing FinancialPlanningAssistant.Utilities;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddDbContext<DataContext>(options => options.UseInMemoryDatabase(\"FinancialPlanningAssistantDB\"));\nbuilder.Services.AddScoped<IFinancialGoalRepository, FinancialGoalRepository>();\nbuilder.Services.AddScoped<FinancialPlanningService>();\nbuilder.Services.AddScoped<NotificationService>();\nbuilder.Services.AddScoped<AnalyticsService>();\nbuilder.Services.AddScoped<ConfigurationManager>();\nbuilder.Services.AddLogging();\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.UseEndpoints(endpoints => { endpoints.MapControllers(); });\n\napp.Run();",
        "Language": 0
      },
      {
        "Id": "bdfa92ee-39fe-4232-bfdf-7b1a5b3a5e3f",
        "Name": "AppSettings.json",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 1,
        "Text": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}",
        "Language": 0
      },
      {
        "Id": "37bfdbef-2973-46a8-a0e0-a76841ba8eaa",
        "Name": "Domain",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4ca266ad-2e7e-42b1-844b-f24aa8821432",
        "Name": "Infrastructure",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "adc11780-f5d2-4c83-b75f-193d6cf45ac5",
        "Name": "Services",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5bb16e66-f0a4-4851-98fa-0b4217c739da",
        "Name": "Controllers",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "eab9391c-a68f-42ff-8bb4-987efc97827c",
        "Name": "Models",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "21490f22-2ad4-49fd-ad05-bdf0d4d22960",
        "Name": "Utilities",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fb89c157-456e-45c0-b52b-f5a5495472c3",
        "Name": "Integration",
        "ParentId": "2de34e78-bb8d-49b1-bb25-7093a3134f5e",
        "Type": 0,
        "Items": []
      }
    ]
  },
  {
    "Id": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
    "Name": "PortfolioRebalancingAssistant",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "592fe1a3-5330-4a9f-a150-7b1e4cb5bbac",
        "Name": "Program.cs",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 1,
        "Text": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing PortfolioRebalancingAssistant.Services;\n\nnamespace PortfolioRebalancingAssistant\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            var rebalancingService = new PortfolioRebalancingService();\n            // Schedule rebalancing every hour\n            using var timer = new Timer(async state => await rebalancingService.RebalancePortfoliosAsync(), null, TimeSpan.Zero, TimeSpan.FromHours(1));\n            Console.WriteLine(\"Portfolio Rebalancing Assistant started. Press any key to exit.\");\n            Console.ReadKey();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "c8f545f8-3dfc-4fbe-a9c6-19842a804588",
        "Name": "appsettings.json",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 1,
        "Text": "{\n  \"ConnectionStrings\": {\n    \"PortfolioDatabase\": \"Server=YOUR_SERVER;Database=PortfolioDb;User Id=YOUR_USER;Password=YOUR_PASSWORD;\"\n  }\n}\n",
        "Language": 0
      },
      {
        "Id": "ce4becd4-de13-4d61-aa62-4b65fff7fb9d",
        "Name": "Domain",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "5276580e-54dc-44bb-acb7-9f4594f3c869",
        "Name": "Portfolio.cs",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\n\nnamespace PortfolioRebalancingAssistant.Domain\n{\n    public class Portfolio\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public List<Asset> Assets { get; set; } = new List<Asset>();\n\n        public void ApplyAdjustment(Adjustment adjustment)\n        {\n            var asset = Assets.Find(a => a.Name == adjustment.AssetName);\n            if (asset != null)\n            {\n                asset.CurrentAllocation += adjustment.AdjustmentValue;\n                asset.CurrentAllocation = Math.Round(asset.CurrentAllocation, 2);\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b1e8a86a-3f21-4afe-baac-d77596114e37",
        "Name": "Asset.cs",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 1,
        "Text": "namespace PortfolioRebalancingAssistant.Domain\n{\n    public class Asset\n    {\n        public string Name { get; set; }\n        public decimal CurrentAllocation { get; set; }\n        public decimal TargetAllocation { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "766fcaca-326e-45d5-99d7-050e7a02d7d7",
        "Name": "Adjustment.cs",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 1,
        "Text": "namespace PortfolioRebalancingAssistant.Domain\n{\n    public class Adjustment\n    {\n        public string AssetName { get; set; }\n        public decimal AdjustmentValue { get; set; }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "98c77804-1766-43b4-871e-88b8c8e3333c",
        "Name": "Services",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ac9e6e6d-b0d2-404c-97ea-6581b245f9ad",
        "Name": "PortfolioRebalancingService.cs",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing PortfolioRebalancingAssistant.Domain;\nusing PortfolioRebalancingAssistant.Infrastructure;\nusing PortfolioRebalancingAssistant.Utils;\n\nnamespace PortfolioRebalancingAssistant.Services\n{\n    public class PortfolioRebalancingService\n    {\n        private readonly PortfolioRepository _portfolioRepository;\n\n        public PortfolioRebalancingService()\n        {\n            _portfolioRepository = new PortfolioRepository();\n        }\n\n        public async Task RebalancePortfoliosAsync()\n        {\n            try\n            {\n                List<Portfolio> portfolios = await _portfolioRepository.GetPortfoliosAsync();\n                foreach (var portfolio in portfolios)\n                {\n                    List<Adjustment> adjustments = RebalancingCalculator.CalculateAdjustments(portfolio);\n                    foreach (var adjustment in adjustments)\n                    {\n                        portfolio.ApplyAdjustment(adjustment);\n                    }\n                    await _portfolioRepository.UpdatePortfolioAsync(portfolio);\n                }\n                Console.WriteLine($\"Rebalanced {portfolios.Count} portfolios at {DateTime.Now}\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error during portfolio rebalancing: {ex.Message}\");\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "1f02bef5-f817-4027-9fa5-efa69b62de31",
        "Name": "Infrastructure",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "1abd35e5-164e-4234-b1dc-95ee98668bde",
        "Name": "PortfolioRepository.cs",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Configuration;\nusing System.Data.SqlClient;\nusing PortfolioRebalancingAssistant.Domain;\n\nnamespace PortfolioRebalancingAssistant.Infrastructure\n{\n    public class PortfolioRepository\n    {\n        private readonly string _connectionString;\n\n        public PortfolioRepository()\n        {\n            var builder = new ConfigurationBuilder()\n                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)\n                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true);\n            IConfiguration configuration = builder.Build();\n            _connectionString = configuration.GetConnectionString(\"PortfolioDatabase\");\n        }\n\n        public async Task<List<Portfolio>> GetPortfoliosAsync()\n        {\n            var portfolios = new List<Portfolio>();\n            using (var connection = new SqlConnection(_connectionString))\n            {\n                await connection.OpenAsync();\n                using (var command = new SqlCommand(\"SELECT Id, Name FROM Portfolios\", connection))\n                using (var reader = await command.ExecuteReaderAsync())\n                {\n                    while (await reader.ReadAsync())\n                    {\n                        var portfolio = new Portfolio\n                        {\n                            Id = reader.GetGuid(0),\n                            Name = reader.GetString(1)\n                        };\n                        portfolios.Add(portfolio);\n                    }\n                }\n                \n                foreach (var portfolio in portfolios)\n                {\n                    using (var assetCmd = new SqlCommand(\"SELECT AssetName, CurrentAllocation, TargetAllocation FROM PortfolioAssets WHERE PortfolioId = @PortfolioId\", connection))\n                    {\n                        assetCmd.Parameters.AddWithValue(\"@PortfolioId\", portfolio.Id);\n                        using (var reader = await assetCmd.ExecuteReaderAsync())\n                        {\n                            while (await reader.ReadAsync())\n                            {\n                                portfolio.Assets.Add(new Asset\n                                {\n                                    Name = reader.GetString(0),\n                                    CurrentAllocation = reader.GetDecimal(1),\n                                    TargetAllocation = reader.GetDecimal(2)\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            return portfolios;\n        }\n\n        public async Task UpdatePortfolioAsync(Portfolio portfolio)\n        {\n            using (var connection = new SqlConnection(_connectionString))\n            {\n                await connection.OpenAsync();\n                foreach (var asset in portfolio.Assets)\n                {\n                    using (var updateCmd = new SqlCommand(\"UPDATE PortfolioAssets SET CurrentAllocation = @CurrentAllocation WHERE PortfolioId = @PortfolioId AND AssetName = @AssetName\", connection))\n                    {\n                        updateCmd.Parameters.AddWithValue(\"@CurrentAllocation\", asset.CurrentAllocation);\n                        updateCmd.Parameters.AddWithValue(\"@PortfolioId\", portfolio.Id);\n                        updateCmd.Parameters.AddWithValue(\"@AssetName\", asset.Name);\n                        await updateCmd.ExecuteNonQueryAsync();\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "04f8a05c-5a98-4a6b-9d44-fb3e4410ce2e",
        "Name": "Utils",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "9e438897-6aa9-45e9-991f-1d7b363bf2e8",
        "Name": "RebalancingCalculator.cs",
        "ParentId": "409c82d4-88d2-4d9b-87e9-f04d6b3cfc7d",
        "Type": 1,
        "Text": "using System;\nusing System.Collections.Generic;\nusing PortfolioRebalancingAssistant.Domain;\n\nnamespace PortfolioRebalancingAssistant.Utils\n{\n    public static class RebalancingCalculator\n    {\n        public static List<Adjustment> CalculateAdjustments(Portfolio portfolio)\n        {\n            var adjustments = new List<Adjustment>();\n            foreach (var asset in portfolio.Assets)\n            {\n                decimal difference = asset.TargetAllocation - asset.CurrentAllocation;\n                if (Math.Abs(difference) >= 0.5m)\n                {\n                    adjustments.Add(new Adjustment\n                    {\n                        AssetName = asset.Name,\n                        AdjustmentValue = difference\n                    });\n                }\n            }\n            return adjustments;\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "0901b209-8207-499b-9027-b9097a65b931",
    "Name": "SettlementEngine",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "360d853a-3e3e-4646-95cc-ea4858d0e3a2",
        "Name": "Core",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "35b460c0-cede-4cbe-9f78-4e158b5d2f43",
        "Name": "Interfaces.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing SettlementEngine.Core.Entities;\n\nnamespace SettlementEngine.Core.Interfaces\n{\n    public interface ISettlementService\n    {\n        Task<bool> ProcessEndOfDaySettlementAsync();\n        Task<IEnumerable<Settlement>> GetSettlementsAsync();\n    }\n\n    public interface ISettlementRepository\n    {\n        Task AddSettlementAsync(Settlement settlement);\n        Task<IEnumerable<Settlement>> GetAllSettlementsAsync();\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "77071c19-8a22-4df0-869f-de7d65e48824",
        "Name": "Entities.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using System;\n\nnamespace SettlementEngine.Core.Entities\n{\n    public class Settlement\n    {\n        public Guid Id { get; set; }\n        public DateTime SettlementDate { get; set; }\n        public decimal TotalAmount { get; set; }\n        public string Status { get; set; }\n\n        public Settlement()\n        {\n            Id = Guid.NewGuid();\n            SettlementDate = DateTime.UtcNow;\n            Status = \"Pending\";\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "618835eb-395c-4362-85b4-529e875afa07",
        "Name": "Exceptions.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using System;\n\nnamespace SettlementEngine.Core.Exceptions\n{\n    public class SettlementException : Exception\n    {\n        public SettlementException(string message) : base(message)\n        {\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "b0457288-476f-4b06-bcbb-53e223eeea11",
        "Name": "Infrastructure",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "4a26f996-fd2a-4790-b505-1b0c54bdc436",
        "Name": "SettlementRepository.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing SettlementEngine.Core.Entities;\nusing SettlementEngine.Core.Interfaces;\n\nnamespace SettlementEngine.Infrastructure\n{\n    public class SettlementRepository : ISettlementRepository\n    {\n        private readonly DatabaseContext _context;\n\n        public SettlementRepository(DatabaseContext context)\n        {\n            _context = context;\n        }\n\n        public async Task AddSettlementAsync(Settlement settlement)\n        {\n            await _context.Settlements.AddAsync(settlement);\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<IEnumerable<Settlement>> GetAllSettlementsAsync()\n        {\n            return await _context.Settlements.ToListAsync();\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4575eed2-ac6f-4a74-b94e-2aac1258e137",
        "Name": "DatabaseContext.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using Microsoft.EntityFrameworkCore;\nusing SettlementEngine.Core.Entities;\n\nnamespace SettlementEngine.Infrastructure\n{\n    public class DatabaseContext : DbContext\n    {\n        public DbSet<Settlement> Settlements { get; set; }\n\n        public DatabaseContext(DbContextOptions<DatabaseContext> options) : base(options)\n        {\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Settlement>().HasKey(s => s.Id);\n            base.OnModelCreating(modelBuilder);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "a1b6087c-8d56-4612-b42d-8085a985dcf5",
        "Name": "Services",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "3bb5d203-53eb-499d-967f-fefaab4195a6",
        "Name": "SettlementService.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing SettlementEngine.Core.Entities;\nusing SettlementEngine.Core.Interfaces;\nusing SettlementEngine.Core.Exceptions;\n\nnamespace SettlementEngine.Services\n{\n    public class SettlementService : ISettlementService\n    {\n        private readonly ISettlementRepository _repository;\n\n        public SettlementService(ISettlementRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<bool> ProcessEndOfDaySettlementAsync()\n        {\n            var settlements = await _repository.GetAllSettlementsAsync();\n            if (settlements == null)\n            {\n                throw new SettlementException(\"No settlements found for processing.\");\n            }\n            // Business logic: compute total amount from existing settlements\n            decimal total = ComputeTotalAmount(settlements);\n\n            var newSettlement = new Settlement\n            {\n                TotalAmount = total,\n                Status = \"Completed\"\n            };\n            await _repository.AddSettlementAsync(newSettlement);\n            return true;\n        }\n\n        public async Task<IEnumerable<Settlement>> GetSettlementsAsync()\n        {\n            return await _repository.GetAllSettlementsAsync();\n        }\n\n        private decimal ComputeTotalAmount(IEnumerable<Settlement> settlements)\n        {\n            decimal total = 0;\n            foreach (var settlement in settlements)\n            {\n                total += settlement.TotalAmount;\n            }\n            return total;\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "4017ba12-aab3-44d0-a28c-ff4b37e1420d",
        "Name": "API",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "386bff84-7b70-4589-b9a4-224a3348c585",
        "Name": "Program.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Hosting;\n\nnamespace SettlementEngine.API\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "d399ae0c-ecdf-40f7-ba68-4326bc4215a2",
        "Name": "SettlementController.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\nusing SettlementEngine.Core.Interfaces;\n\nnamespace SettlementEngine.API.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class SettlementController : ControllerBase\n    {\n        private readonly ISettlementService _settlementService;\n\n        public SettlementController(ISettlementService settlementService)\n        {\n            _settlementService = settlementService;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> Get()\n        {\n            var settlements = await _settlementService.GetSettlementsAsync();\n            return Ok(settlements);\n        }\n\n        [HttpPost(\"process\")]\n        public async Task<IActionResult> ProcessSettlement()\n        {\n            bool result = await _settlementService.ProcessEndOfDaySettlementAsync();\n            if (result)\n            {\n                return Ok(new { message = \"Settlement processed successfully.\" });\n            }\n            return BadRequest(new { message = \"Settlement processing failed.\" });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "ab8c11cd-4712-4e7c-b463-383c0fb8451a",
        "Name": "Startup.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.EntityFrameworkCore;\nusing SettlementEngine.Core.Interfaces;\nusing SettlementEngine.Infrastructure;\nusing SettlementEngine.Services;\n\nnamespace SettlementEngine.API\n{\n    public class Startup\n    {\n        public IConfiguration Configuration { get; }\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext<DatabaseContext>(options =>\n                options.UseInMemoryDatabase(\"SettlementDb\"));\n\n            services.AddScoped<ISettlementRepository, SettlementRepository>();\n            services.AddScoped<ISettlementService, SettlementService>();\n\n            services.AddControllers();\n            services.AddSwaggerGen();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            app.UseRouting();\n            app.UseSwagger();\n            app.UseSwaggerUI(c =>\n            {\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Settlement Engine API V1\");\n            });\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "e412b4f0-0b58-476a-aec5-73a4643b2045",
        "Name": "Tests",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "c06e5e80-f1f3-452b-bd0d-3085d6c1dfe0",
        "Name": "SettlementServiceTests.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Xunit;\nusing SettlementEngine.Core.Entities;\nusing SettlementEngine.Core.Exceptions;\nusing SettlementEngine.Core.Interfaces;\nusing SettlementEngine.Services;\n\nnamespace SettlementEngine.Tests\n{\n    public class SettlementServiceTests\n    {\n        private class FakeRepository : ISettlementRepository\n        {\n            private readonly List<Settlement> _settlements = new List<Settlement>();\n\n            public Task AddSettlementAsync(Settlement settlement)\n            {\n                _settlements.Add(settlement);\n                return Task.CompletedTask;\n            }\n\n            public Task<IEnumerable<Settlement>> GetAllSettlementsAsync()\n            {\n                return Task.FromResult<IEnumerable<Settlement>>(_settlements);\n            }\n        }\n\n        [Fact]\n        public async Task ProcessEndOfDaySettlementAsync_AddsNewSettlement()\n        {\n            var repository = new FakeRepository();\n            await repository.AddSettlementAsync(new Settlement { TotalAmount = 100, Status = \"Initial\" });\n            var service = new SettlementService(repository);\n            bool result = await service.ProcessEndOfDaySettlementAsync();\n            Assert.True(result);\n            var settlements = await repository.GetAllSettlementsAsync();\n            Assert.True(settlements.Count() >= 2);\n        }\n    }\n}\n",
        "Language": 0
      },
      {
        "Id": "bb09595e-a2ac-493a-8583-5f4eb2f9e0a3",
        "Name": "SettlementControllerTests.cs",
        "ParentId": "0901b209-8207-499b-9027-b9097a65b931",
        "Type": 1,
        "Text": "using System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.TestHost;\nusing Xunit;\nusing SettlementEngine.API;\n\nnamespace SettlementEngine.Tests\n{\n    public class SettlementControllerTests\n    {\n        private readonly HttpClient _client;\n\n        public SettlementControllerTests()\n        {\n            var server = new TestServer(new WebHostBuilder()\n                .UseStartup<Startup>());\n            _client = server.CreateClient();\n        }\n\n        [Fact]\n        public async Task Get_ReturnsOkStatus()\n        {\n            var response = await _client.GetAsync(\"/api/Settlement\");\n            Assert.Equal(HttpStatusCode.OK, response.StatusCode);\n        }\n\n        [Fact]\n        public async Task ProcessSettlement_ReturnsSuccessMessage()\n        {\n            var response = await _client.PostAsync(\"/api/Settlement/process\", null);\n            Assert.Equal(HttpStatusCode.OK, response.StatusCode);\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  },
  {
    "Id": "c35244ea-b1b9-4c5e-a0d7-f6ef8f422dbc",
    "Name": "ServiceDiscoveryTool",
    "ParentId": null,
    "Type": 0,
    "Items": [
      {
        "Id": "430a9495-cf50-48cb-bee8-fd5d027ffc90",
        "Name": "Discovery",
        "ParentId": "c35244ea-b1b9-4c5e-a0d7-f6ef8f422dbc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "fdd5e5c6-81ef-4c7b-9961-481bd6a7e88f",
        "Name": "Configuration",
        "ParentId": "c35244ea-b1b9-4c5e-a0d7-f6ef8f422dbc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "83c45b1d-e0c5-4ec3-b858-f28f75037b04",
        "Name": "Communication",
        "ParentId": "c35244ea-b1b9-4c5e-a0d7-f6ef8f422dbc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "ba5e5efc-ded6-42ef-bd1c-c86558c3e2d9",
        "Name": "Logging",
        "ParentId": "c35244ea-b1b9-4c5e-a0d7-f6ef8f422dbc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "dde783d0-0d8b-42ee-8b66-3b8d0f1193e1",
        "Name": "Models",
        "ParentId": "c35244ea-b1b9-4c5e-a0d7-f6ef8f422dbc",
        "Type": 0,
        "Items": []
      },
      {
        "Id": "d8c63f95-11fd-4fa4-84db-18732b902a24",
        "Name": "Program.cs",
        "ParentId": "c35244ea-b1b9-4c5e-a0d7-f6ef8f422dbc",
        "Type": 1,
        "Text": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing DigitalBank.Configuration;\nusing DigitalBank.Discovery;\nusing DigitalBank.Logging;\nusing DigitalBank.Models;\nusing DigitalBank.Communication;\n\nnamespace DigitalBank\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            ILogger logger = new ConsoleLogger();\n            AppSettings settings = new AppSettings();\n            IServiceRegistry serviceRegistry = new ServiceRegistry(logger);\n\n            // Example: Register a service. In a production environment, service registration would be dynamic.\n            ServiceInfo accountService = new ServiceInfo(\"AccountService\", \"127.0.0.1\", 6000, \"Active\");\n            serviceRegistry.RegisterService(accountService);\n\n            // Discover the service and communicate with it\n            ServiceInfo discovered = serviceRegistry.DiscoverService(\"AccountService\");\n            if (discovered != null)\n            {\n                using (HttpClient httpClient = new HttpClient())\n                {\n                    ServiceCommunicator communicator = new ServiceCommunicator(httpClient);\n                    try\n                    {\n                        string result = await communicator.SendRequestAsync(discovered, \"api/status\");\n                        logger.Log($\"Received response from {discovered.Name}: {result}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        logger.Log($\"Error communicating with service {discovered.Name}: {ex.Message}\");\n                    }\n                }\n            }\n\n            logger.Log(\"Service Discovery Tool is running.\");\n\n            // In a real-world application, this would likely be a continuously running process or a hosted service.\n        }\n    }\n}\n",
        "Language": 0
      }
    ]
  }
]